""" Cisco_IOS_XR_ipv4_bgp_act 

This module contains a collection of YANG definitions
for Cisco IOS\-XR action package configuration.

Copyright (c) 2016\-2018 by Cisco Systems, Inc.
All rights reserved.

"""
import sys
from collections import OrderedDict

from ydk.types import Entity as _Entity_
from ydk.types import EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class Afi(Enum):
    """
    Afi (Enum Class)

    .. data:: all = 0

    	Both ipv4 and ipv6 address families

    .. data:: ipv4 = 1

    .. data:: ipv6 = 2

    .. data:: l2vpn = 3

    .. data:: link_state = 4

    .. data:: vpnv4 = 5

    .. data:: vpnv6 = 6

    """

    all = Enum.YLeaf(0, "all")

    ipv4 = Enum.YLeaf(1, "ipv4")

    ipv6 = Enum.YLeaf(2, "ipv6")

    l2vpn = Enum.YLeaf(3, "l2vpn")

    link_state = Enum.YLeaf(4, "link-state")

    vpnv4 = Enum.YLeaf(5, "vpnv4")

    vpnv6 = Enum.YLeaf(6, "vpnv6")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Afi']


class AfiSafiType(Enum):
    """
    AfiSafiType (Enum Class)

    .. data:: all_all = 0

    	Both unicast and multicast address family modifiers

    	of ipv4 and ipv6 address family

    .. data:: all_evpn = 1

    .. data:: all_flowspec = 2

    .. data:: all_labeled_unicast = 3

    .. data:: all_mdt = 4

    .. data:: all_mspw = 5

    .. data:: all_multicast = 6

    .. data:: all_mvpn = 7

    .. data:: all_rt_filter = 8

    .. data:: all_sr_policy = 9

    .. data:: all_tunnel = 10

    .. data:: all_unicast = 11

    .. data:: all_vpls = 12

    .. data:: all_vpws = 13

    .. data:: ipv4_all = 14

    	Both unicast and multicast address family modifiers

    .. data:: ipv4_flowspec = 15

    .. data:: ipv4_labeled_unicast = 16

    .. data:: ipv4_mdt = 17

    .. data:: ipv4_multicast = 18

    .. data:: ipv4_mvpn = 19

    .. data:: ipv4_rt_filter = 20

    .. data:: ipv4_sr_policy = 21

    .. data:: ipv4_tunnel = 22

    .. data:: ipv4_unicast = 23

    .. data:: ipv6_all = 24

    	Both unicast and multicast address family modifiers

    .. data:: ipv6_flowspec = 25

    .. data:: ipv6_labeled_unicast = 26

    .. data:: ipv6_multicast = 27

    .. data:: ipv6_mvpn = 28

    .. data:: ipv6_sr_policy = 29

    .. data:: ipv6_unicast = 30

    .. data:: l2vpn_evpn = 31

    .. data:: l2vpn_mspw = 32

    .. data:: l2vpn_vpls = 33

    .. data:: l2vpn_vpws = 34

    .. data:: link_state = 35

    .. data:: vpnv4_flowspec = 36

    .. data:: vpnv4_multicast = 37

    .. data:: vpnv4_unicast = 38

    .. data:: vpnv6_flowspec = 39

    .. data:: vpnv6_multicast = 40

    .. data:: vpnv6_unicast = 41

    """

    all_all = Enum.YLeaf(0, "all-all")

    all_evpn = Enum.YLeaf(1, "all-evpn")

    all_flowspec = Enum.YLeaf(2, "all-flowspec")

    all_labeled_unicast = Enum.YLeaf(3, "all-labeled-unicast")

    all_mdt = Enum.YLeaf(4, "all-mdt")

    all_mspw = Enum.YLeaf(5, "all-mspw")

    all_multicast = Enum.YLeaf(6, "all-multicast")

    all_mvpn = Enum.YLeaf(7, "all-mvpn")

    all_rt_filter = Enum.YLeaf(8, "all-rt-filter")

    all_sr_policy = Enum.YLeaf(9, "all-sr-policy")

    all_tunnel = Enum.YLeaf(10, "all-tunnel")

    all_unicast = Enum.YLeaf(11, "all-unicast")

    all_vpls = Enum.YLeaf(12, "all-vpls")

    all_vpws = Enum.YLeaf(13, "all-vpws")

    ipv4_all = Enum.YLeaf(14, "ipv4-all")

    ipv4_flowspec = Enum.YLeaf(15, "ipv4-flowspec")

    ipv4_labeled_unicast = Enum.YLeaf(16, "ipv4-labeled-unicast")

    ipv4_mdt = Enum.YLeaf(17, "ipv4-mdt")

    ipv4_multicast = Enum.YLeaf(18, "ipv4-multicast")

    ipv4_mvpn = Enum.YLeaf(19, "ipv4-mvpn")

    ipv4_rt_filter = Enum.YLeaf(20, "ipv4-rt-filter")

    ipv4_sr_policy = Enum.YLeaf(21, "ipv4-sr-policy")

    ipv4_tunnel = Enum.YLeaf(22, "ipv4-tunnel")

    ipv4_unicast = Enum.YLeaf(23, "ipv4-unicast")

    ipv6_all = Enum.YLeaf(24, "ipv6-all")

    ipv6_flowspec = Enum.YLeaf(25, "ipv6-flowspec")

    ipv6_labeled_unicast = Enum.YLeaf(26, "ipv6-labeled-unicast")

    ipv6_multicast = Enum.YLeaf(27, "ipv6-multicast")

    ipv6_mvpn = Enum.YLeaf(28, "ipv6-mvpn")

    ipv6_sr_policy = Enum.YLeaf(29, "ipv6-sr-policy")

    ipv6_unicast = Enum.YLeaf(30, "ipv6-unicast")

    l2vpn_evpn = Enum.YLeaf(31, "l2vpn-evpn")

    l2vpn_mspw = Enum.YLeaf(32, "l2vpn-mspw")

    l2vpn_vpls = Enum.YLeaf(33, "l2vpn-vpls")

    l2vpn_vpws = Enum.YLeaf(34, "l2vpn-vpws")

    link_state = Enum.YLeaf(35, "link-state")

    vpnv4_flowspec = Enum.YLeaf(36, "vpnv4-flowspec")

    vpnv4_multicast = Enum.YLeaf(37, "vpnv4-multicast")

    vpnv4_unicast = Enum.YLeaf(38, "vpnv4-unicast")

    vpnv6_flowspec = Enum.YLeaf(39, "vpnv6-flowspec")

    vpnv6_multicast = Enum.YLeaf(40, "vpnv6-multicast")

    vpnv6_unicast = Enum.YLeaf(41, "vpnv6-unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['AfiSafiType']


class InstanceName(Enum):
    """
    InstanceName (Enum Class)

    .. data:: all = 0

    """

    all = Enum.YLeaf(0, "all")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['InstanceName']


class Ipv4Safi(Enum):
    """
    Ipv4Safi (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    mdt = Enum.YLeaf(3, "mdt")

    multicast = Enum.YLeaf(4, "multicast")

    mvpn = Enum.YLeaf(5, "mvpn")

    rt_filter = Enum.YLeaf(6, "rt-filter")

    sr_policy = Enum.YLeaf(7, "sr-policy")

    tunnel = Enum.YLeaf(8, "tunnel")

    unicast = Enum.YLeaf(9, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv4Safi']


class Ipv4Safi_(Enum):
    """
    Ipv4Safi\_ (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    mdt = Enum.YLeaf(3, "mdt")

    multicast = Enum.YLeaf(4, "multicast")

    mvpn = Enum.YLeaf(5, "mvpn")

    rt_filter = Enum.YLeaf(6, "rt-filter")

    sr_policy = Enum.YLeaf(7, "sr-policy")

    tunnel = Enum.YLeaf(8, "tunnel")

    unicast = Enum.YLeaf(9, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv4Safi_']


class Ipv6Safi(Enum):
    """
    Ipv6Safi (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    multicast = Enum.YLeaf(3, "multicast")

    mvpn = Enum.YLeaf(4, "mvpn")

    sr_policy = Enum.YLeaf(5, "sr-policy")

    unicast = Enum.YLeaf(6, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv6Safi']


class Ipv6Safi_(Enum):
    """
    Ipv6Safi\_ (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    multicast = Enum.YLeaf(3, "multicast")

    mvpn = Enum.YLeaf(4, "mvpn")

    sr_policy = Enum.YLeaf(5, "sr-policy")

    unicast = Enum.YLeaf(6, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Ipv6Safi_']


class L2vpnSafi(Enum):
    """
    L2vpnSafi (Enum Class)

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = Enum.YLeaf(0, "evpn")

    mspw = Enum.YLeaf(1, "mspw")

    vpls = Enum.YLeaf(2, "vpls")

    vpws = Enum.YLeaf(3, "vpws")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['L2vpnSafi']


class L2vpnSafi_(Enum):
    """
    L2vpnSafi\_ (Enum Class)

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = Enum.YLeaf(0, "evpn")

    mspw = Enum.YLeaf(1, "mspw")

    vpls = Enum.YLeaf(2, "vpls")

    vpws = Enum.YLeaf(3, "vpws")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['L2vpnSafi_']


class LinkStateSafi(Enum):
    """
    LinkStateSafi (Enum Class)

    .. data:: link_state = 0

    """

    link_state = Enum.YLeaf(0, "link-state")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['LinkStateSafi']


class LinkStateSafi_(Enum):
    """
    LinkStateSafi\_ (Enum Class)

    .. data:: link_state = 0

    """

    link_state = Enum.YLeaf(0, "link-state")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['LinkStateSafi_']


class Vpnv4Safi(Enum):
    """
    Vpnv4Safi (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv4Safi']


class Vpnv4Safi_(Enum):
    """
    Vpnv4Safi\_ (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv4Safi_']


class Vpnv6Safi(Enum):
    """
    Vpnv6Safi (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv6Safi']


class Vpnv6Safi_(Enum):
    """
    Vpnv6Safi\_ (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['Vpnv6Safi_']


class VrfName(Enum):
    """
    VrfName (Enum Class)

    .. data:: all = 0

    """

    all = Enum.YLeaf(0, "all")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['VrfName']



class ClearBgpAllGraceful(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpAllGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAllGraceful']['meta_info']


class ClearBgpAll(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAll']['meta_info']


class ClearBgpIpAddrGraceful(_Entity_):
    """
    BGP neighbor address to clear.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddrGraceful.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddrGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddrGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddrGraceful']['meta_info']


class ClearBgpIpAddrLongLivedStale(_Entity_):
    """
    BGP neighbor address to clear.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddrLongLivedStale.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddrLongLivedStale']['meta_info']


class ClearBgpIpAddr(_Entity_):
    """
    BGP neighbor address to clear.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpIpAddr']['meta_info']


class ClearBgpAfiSafiAllSoftInPrefixFilter(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftInPrefixFilter.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftInPrefixFilter']['meta_info']


class ClearBgpAfiSafiAllSoftIn(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftIn.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftIn']['meta_info']


class ClearBgpAfiSafiAllSoftOut(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftOut.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoftOut']['meta_info']


class ClearBgpAfiSafiAllSoft(_Entity_):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoft.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAllSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAllSoft']['meta_info']


class ClearBgpAfiSafiIpAddrLongLivedStale(_Entity_):
    """
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrLongLivedStale.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrLongLivedStale']['meta_info']


class ClearBgpAfiSafiIpAddrSoftInPrefixFilter(_Entity_):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftInPrefixFilter']['meta_info']


class ClearBgpAfiSafiIpAddrSoftIn(_Entity_):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftIn.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftIn']['meta_info']


class ClearBgpAfiSafiIpAddrSoftOut(_Entity_):
    """
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftOut.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoftOut']['meta_info']


class ClearBgpAfiSafiIpAddrSoft(_Entity_):
    """
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoft.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiIpAddrSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiIpAddrSoft']['meta_info']


class ClearBgpAfiSafiAsSoftInPrefixFilter(_Entity_):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftInPrefixFilter.Input, ['afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftInPrefixFilter']['meta_info']


class ClearBgpAfiSafiAsSoftIn(_Entity_):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftIn.Input, ['afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftIn']['meta_info']


class ClearBgpAfiSafiAsSoftOut(_Entity_):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftOut.Input, ['afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoftOut']['meta_info']


class ClearBgpAfiSafiAsSoft(_Entity_):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoft.Input, ['afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiAsSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiAsSoft']['meta_info']


class ClearBgpAfiSafiDampeningIpPrefix(_Entity_):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiDampeningIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiDampeningIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpPrefix']['meta_info']


class ClearBgpAfiSafiDampening(_Entity_):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampening.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampening.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampening()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampening']['meta_info']


class ClearBgpAfiSafiExternalSoftInPrefixFilter(_Entity_):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftInPrefixFilter.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftInPrefixFilter']['meta_info']


class ClearBgpAfiSafiExternalSoftIn(_Entity_):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftIn.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftIn']['meta_info']


class ClearBgpAfiSafiExternalSoftOut(_Entity_):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftOut.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoftOut']['meta_info']


class ClearBgpAfiSafiExternalSoft(_Entity_):
    """
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoft.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiExternalSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiExternalSoft']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpAddr(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpAddr']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpPrefix(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpPrefix']['meta_info']


class ClearBgpAfiSafiFlapStatisticsRegexp(_Entity_):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('regexp_pattern', (YLeaf(YType.str, 'regexp-pattern'), ['str'])),
            ])
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsRegexp.Input, ['afi_safi_name', 'regexp_pattern'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRegexp.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsRegexp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRegexp']['meta_info']


class ClearBgpAfiSafiFlapStatisticsRoutePolicy(_Entity_):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
            ])
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input, ['afi_safi_name', 'route_policy_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsRoutePolicy']['meta_info']


class ClearBgpAfiSafiFlapStatistics(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatistics.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatistics']['meta_info']


class ClearBgpAfiSafiNexthopPerformanceStatistics(_Entity_):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiNexthopPerformanceStatistics.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiNexthopPerformanceStatistics']['meta_info']


class ClearBgpAfiSafiNexthopRegistrationIpAddr(_Entity_):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiNexthopRegistrationIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiNexthopRegistrationIpAddr']['meta_info']


class ClearBgpAfiSafiSelfOriginated(_Entity_):
    """
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiSelfOriginated.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiSelfOriginated.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiSelfOriginated()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiSelfOriginated']['meta_info']


class ClearBgpAfiSafiShutdown(_Entity_):
    """
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiShutdown.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiShutdown']['meta_info']


class ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqAddressFamily(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqAddressFamily.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqAddressFamily']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqNeighborIpAddr(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpAfiSafiUpdateOutqUpdateGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroup.Input, ['afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiUpdateOutqUpdateGroup']['meta_info']


class ClearBgpAsGraceful(_Entity_):
    """
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAsGraceful.Input, ['as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAsGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAsGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAsGraceful']['meta_info']


class ClearBgpAs(_Entity_):
    """
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAs.Input, ['as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAs.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAs()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAs']['meta_info']


class ClearBgpBestpathIpAddrIpNetmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpAddrIpNetmask.Input, ['ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpAddrIpNetmask']['meta_info']


class ClearBgpBestpathIpAddr(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpAddr']['meta_info']


class ClearBgpBestpathIpPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpPrefix.Input, ['ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathIpPrefix']['meta_info']


class ClearBgpBestpathAfiSafiIpAddrIpNetmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input, ['afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpAddrIpNetmask']['meta_info']


class ClearBgpBestpathAfiSafiIpAddr(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpAddr']['meta_info']


class ClearBgpBestpathAfiSafiIpPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpPrefix']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpAddr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpAddr']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpPrefix']['meta_info']


class ClearBgpBestpathAfiSafiRdIpAddrIpNetmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input, ['afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddrIpNetmask']['meta_info']


class ClearBgpBestpathAfiSafiRdIpAddr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpAddr.Input, ['afi_safi_name', 'rd', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpAddr']['meta_info']


class ClearBgpBestpathAfiSafiRdIpPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpPrefix.Input, ['afi_safi_name', 'rd', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpPrefix']['meta_info']


class ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpBestpathAfiSafiIpv4Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4Addr.Input, ['afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4Addr']['meta_info']


class ClearBgpBestpathAfiSafiIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4Prefix']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4Addr.Input, ['afi_safi_name', 'rd', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4Addr']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4Addr']['meta_info']


class ClearBgpBestpathAfiSafiNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiNetwork.Input, ['afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiNetwork']['meta_info']


class ClearBgpBestpathAfiSafiRdNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdNetwork.Input, ['afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdNetwork']['meta_info']


class ClearBgpBestpathAfiSafiVrfNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfNetwork.Input, ['afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfNetwork']['meta_info']


class ClearBgpBestpathAfiSafiRtConstraintNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rt_constraint_network', (YLeaf(YType.str, 'rt-constraint-network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRtConstraintNetwork.Input, ['afi_safi_name', 'rt_constraint_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRtConstraintNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRtConstraintNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRtConstraintNetwork']['meta_info']


class ClearBgpBestpathAfiSafiIpv4TunnelNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_tunnel_network', (YLeaf(YType.str, 'ipv4-tunnel-network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input, ['afi_safi_name', 'ipv4_tunnel_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4TunnelNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv4TunnelNetwork']['meta_info']


class ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpBestpathAfiSafiIpv6Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6Addr.Input, ['afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6Addr']['meta_info']


class ClearBgpBestpathAfiSafiIpv6Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiIpv6Prefix']['meta_info']


class ClearBgpBestpathAfiSafiRd(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRd.Input, ['afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRd']['meta_info']


class ClearBgpBestpathAfiSafiVrf(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrf.Input, ['afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrf']['meta_info']


class ClearBgpBestpathAfiSafi(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafi.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafi']['meta_info']


class ClearBgpBestpathAfiSafiSrPolicyPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('sr_policy_prefix', (YLeaf(YType.str, 'sr-policy-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiSrPolicyPrefix.Input, ['afi_safi_name', 'sr_policy_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiSrPolicyPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiSrPolicyPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiSrPolicyPrefix']['meta_info']


class ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4Prefix.Input, ['afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4Prefix']['meta_info']


class ClearBgpBestpathAfiSafiMp2mpIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiMp2mpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('mp2mp', (YLeaf(YType.str, 'mp2mp'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input, ['afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiMp2mpIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiMp2mpIpv4Prefix']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4Prefix']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6Addr.Input, ['afi_safi_name', 'rd', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6Addr']['meta_info']


class ClearBgpBestpathAfiSafiRdIpv6Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6Prefix.Input, ['afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiRdIpv6Prefix']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6Addr']['meta_info']


class ClearBgpBestpathAfiSafiVrfIpv6Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathAfiSafiVrfIpv6Prefix']['meta_info']


class ClearBgpBestpathVrfIpAddrIpNetmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpAddrIpNetmask.Input, ['vrf_all', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpAddrIpNetmask']['meta_info']


class ClearBgpBestpathVrfIpAddr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpAddr']['meta_info']


class ClearBgpBestpathVrfIpPrefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpPrefix.Input, ['vrf_all', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfIpPrefix']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4Prefix']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv4Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv4Addr']['meta_info']


class ClearBgpBestpathVrfAfiSafiNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiNetwork.Input, ['vrf_all', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiNetwork']['meta_info']


class ClearBgpBestpathVrfAfiSafiRdNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiRdNetwork.Input, ['vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiRdNetwork']['meta_info']


class ClearBgpBestpathVrfAfiSafiVrfNetwork(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiVrfNetwork.Input, ['vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrfNetwork']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6Addr(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6Addr']['meta_info']


class ClearBgpBestpathVrfAfiSafiIpv6Prefix(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiIpv6Prefix']['meta_info']


class ClearBgpBestpathVrfAfiSafiRd(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiRd.Input, ['vrf_all', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiRd']['meta_info']


class ClearBgpBestpathVrfAfiSafiVrf(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiVrf.Input, ['vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafiVrf']['meta_info']


class ClearBgpBestpathVrfAfiSafi(_Entity_):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpBestpathVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpBestpathVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafi.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpBestpathVrfAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpBestpathVrfAfiSafi']['meta_info']


class ClearBgpExternalGraceful(_Entity_):
    """
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpExternalGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpExternalGraceful']['meta_info']


class ClearBgpExternal(_Entity_):
    """
    Clear all external peers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpExternal()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpExternal']['meta_info']


class ClearBgpInstanceAllGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAllGraceful.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAllGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAllGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAllGraceful']['meta_info']


class ClearBgpInstanceAll(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAll.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAll']['meta_info']


class ClearBgpInstanceIpAddrGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddrGraceful.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddrGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddrGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddrGraceful']['meta_info']


class ClearBgpInstanceIpAddrLongLivedStale(_Entity_):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddrLongLivedStale.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddrLongLivedStale']['meta_info']


class ClearBgpInstanceIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceIpAddr']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftIn.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftIn']['meta_info']


class ClearBgpInstanceAfiSafiAllSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftOut.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoftOut']['meta_info']


class ClearBgpInstanceAfiSafiAllSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoft.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAllSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAllSoft']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrLongLivedStale(_Entity_):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrLongLivedStale']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftIn.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftIn']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftOut.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoftOut']['meta_info']


class ClearBgpInstanceAfiSafiIpAddrSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoft.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiIpAddrSoft']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftIn.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftIn']['meta_info']


class ClearBgpInstanceAfiSafiAsSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftOut.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoftOut']['meta_info']


class ClearBgpInstanceAfiSafiAsSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoft.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiAsSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiAsSoft']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiDampeningIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiDampeningIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpPrefix']['meta_info']


class ClearBgpInstanceAfiSafiDampening(_Entity_):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampening.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampening.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampening()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampening']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftIn.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftIn']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftOut.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoftOut']['meta_info']


class ClearBgpInstanceAfiSafiExternalSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoft.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiExternalSoft']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpAddr']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsRegexp(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('regexp_pattern', (YLeaf(YType.str, 'regexp-pattern'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input, ['instance_name', 'afi_safi_name', 'regexp_pattern'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsRegexp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRegexp']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input, ['instance_name', 'afi_safi_name', 'route_policy_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatistics.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatistics']['meta_info']


class ClearBgpInstanceAfiSafiNexthopPerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiNexthopPerformanceStatistics']['meta_info']


class ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr']['meta_info']


class ClearBgpInstanceAfiSafiSelfOriginated(_Entity_):
    """
    Choose a particular BGP instance.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiSelfOriginated.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiSelfOriginated.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiSelfOriginated()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiSelfOriginated']['meta_info']


class ClearBgpInstanceAfiSafiShutdown(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiShutdown.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiShutdown']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqAddressFamily(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqAddressFamily']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input, ['instance_name', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup']['meta_info']


class ClearBgpInstanceAsGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAsGraceful.Input, ['instance_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAsGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAsGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAsGraceful']['meta_info']


class ClearBgpInstanceAs(_Entity_):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAs.Input, ['instance_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAs.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAs()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAs']['meta_info']


class ClearBgpInstanceBestpathIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpAddrIpNetmask.Input, ['instance_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceBestpathIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpAddr']['meta_info']


class ClearBgpInstanceBestpathIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpPrefix.Input, ['instance_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathIpPrefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpAddr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpPrefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpAddr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpPrefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiNetwork.Input, ['instance_name', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiNetwork']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdNetwork.Input, ['instance_name', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdNetwork']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfNetwork']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rt_constraint_network', (YLeaf(YType.str, 'rt-constraint-network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input, ['instance_name', 'afi_safi_name', 'rt_constraint_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_tunnel_network', (YLeaf(YType.str, 'ipv4-tunnel-network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input, ['instance_name', 'afi_safi_name', 'ipv4_tunnel_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiIpv6Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRd(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRd.Input, ['instance_name', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRd']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrf(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrf.Input, ['instance_name', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrf']['meta_info']


class ClearBgpInstanceBestpathAfiSafi(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafi.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafi']['meta_info']


class ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('sr_policy_prefix', (YLeaf(YType.str, 'sr-policy-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input, ['instance_name', 'afi_safi_name', 'sr_policy_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('mp2mp', (YLeaf(YType.str, 'mp2mp'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr']['meta_info']


class ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix']['meta_info']


class ClearBgpInstanceBestpathVrfIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input, ['instance_name', 'vrf_all', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceBestpathVrfIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpAddr']['meta_info']


class ClearBgpInstanceBestpathVrfIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpPrefix.Input, ['instance_name', 'vrf_all', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfIpPrefix']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiNetwork']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiRdNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRdNetwork']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiRd(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiRd.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiRd']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafiVrf(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiVrf.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafiVrf']['meta_info']


class ClearBgpInstanceBestpathVrfAfiSafi(_Entity_):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceBestpathVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceBestpathVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafi.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceBestpathVrfAfiSafi']['meta_info']


class ClearBgpInstanceExternalGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceExternalGraceful.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceExternalGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceExternalGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceExternalGraceful']['meta_info']


class ClearBgpInstanceExternal(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceExternal.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceExternal.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceExternal()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceExternal']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv4Prefix']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix']['meta_info']


class ClearBgpInstanceAfiSafiDampeningIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiDampeningIpv6Prefix']['meta_info']


class ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix']['meta_info']


class ClearBgpInstanceNexthopPerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceNexthopPerformanceStatistics.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceNexthopPerformanceStatistics']['meta_info']


class ClearBgpInstanceNexthopRegistrationIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceNexthopRegistrationIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceNexthopRegistrationIpAddr']['meta_info']


class ClearBgpInstancePeerDropsAll(_Entity_):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstancePeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstancePeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePeerDropsAll.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePeerDropsAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePeerDropsAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePeerDropsAll']['meta_info']


class ClearBgpInstancePeerDropsIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstancePeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstancePeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePeerDropsIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePeerDropsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePeerDropsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePeerDropsIpAddr']['meta_info']


class ClearBgpInstancePerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstancePerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstancePerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePerformanceStatistics.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstancePerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstancePerformanceStatistics']['meta_info']


class ClearBgpInstanceRpkiServerAllSerialQuery(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAllSerialQuery.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiServerAllSerialQuery, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-all-serial-query"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerAllSerialQuery.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiServerAllSerialQuery.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-all-serial-query"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerAllSerialQuery.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerAllSerialQuery.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerAllSerialQuery()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerAllSerialQuery']['meta_info']


class ClearBgpInstanceRpkiServerAll(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiServerAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiServerAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerAll.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerAll']['meta_info']


class ClearBgpInstanceRpkiServerRpkiServer(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerRpkiServer.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiServerRpkiServer, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-rpki-server"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerRpkiServer.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiServerRpkiServer.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-rpki-server"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('rpki_server', (YLeaf(YType.str, 'rpki-server'), ['str'])),
            ])
            self.instance_name = None
            self.rpki_server = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerRpkiServer.Input, ['instance_name', 'rpki_server'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiServerRpkiServer.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerRpkiServer()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiServerRpkiServer']['meta_info']


class ClearBgpInstanceRpkiValidationIpv4(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv4.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidationIpv4.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiValidationIpv4.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation-ipv4"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidationIpv4.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidationIpv4.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidationIpv4()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidationIpv4']['meta_info']


class ClearBgpInstanceRpkiValidationIpv6(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv6.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidationIpv6.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiValidationIpv6.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation-ipv6"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidationIpv6.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidationIpv6.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidationIpv6()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidationIpv6']['meta_info']


class ClearBgpInstanceRpkiValidation(_Entity_):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidation.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidation.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceRpkiValidation.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidation.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceRpkiValidation.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidation()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceRpkiValidation']['meta_info']


class ClearBgpInstanceShutdown(_Entity_):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceShutdown.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceShutdown']['meta_info']


class ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqAddressFamily(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqAddressFamily.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqAddressFamily']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqNeighborIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpInstanceUpdateOutqProcess(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqProcess.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqProcess, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-process"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqProcess.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqProcess.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-process"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqProcess.Input, ['instance_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqProcess.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqProcess()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqProcess']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpInstanceUpdateOutqUpdateGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroup.Input, ['instance_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceUpdateOutqUpdateGroup']['meta_info']


class ClearBgpInstanceVersionIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpAddrIpNetmask.Input, ['instance_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceVersionIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpAddr']['meta_info']


class ClearBgpInstanceVersionIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpPrefix.Input, ['instance_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionIpPrefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpAddr']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpPrefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpAddr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpAddr']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpPrefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiNetwork.Input, ['instance_name', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiNetwork']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdNetwork.Input, ['instance_name', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdNetwork']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfNetwork.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfNetwork']['meta_info']


class ClearBgpInstanceVersionAfiSafiRtConstraintNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rt_constraint_network', (YLeaf(YType.str, 'rt-constraint-network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input, ['instance_name', 'afi_safi_name', 'rt_constraint_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRtConstraintNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRtConstraintNetwork']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_tunnel_network', (YLeaf(YType.str, 'ipv4-tunnel-network'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input, ['instance_name', 'afi_safi_name', 'ipv4_tunnel_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiIpv6Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiRd(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRd.Input, ['instance_name', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRd']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrf(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrf.Input, ['instance_name', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrf']['meta_info']


class ClearBgpInstanceVersionAfiSafi(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafi.Input, ['instance_name', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafi']['meta_info']


class ClearBgpInstanceVersionAfiSafiSrPolicyPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('sr_policy_prefix', (YLeaf(YType.str, 'sr-policy-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input, ['instance_name', 'afi_safi_name', 'sr_policy_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiSrPolicyPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiSrPolicyPrefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('mp2mp', (YLeaf(YType.str, 'mp2mp'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiRdIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiRdIpv6Prefix']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6Addr']['meta_info']


class ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix']['meta_info']


class ClearBgpInstanceVersionVrfIpAddrIpNetmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input, ['instance_name', 'vrf_all', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpAddrIpNetmask']['meta_info']


class ClearBgpInstanceVersionVrfIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpAddr']['meta_info']


class ClearBgpInstanceVersionVrfIpPrefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpPrefix.Input, ['instance_name', 'vrf_all', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfIpPrefix']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv4Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv4Addr']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiNetwork']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiRdNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRdNetwork']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiVrfNetwork(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrfNetwork']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6Addr(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6Addr']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiRd(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiRd.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiRd']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafiVrf(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiVrf.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafiVrf']['meta_info']


class ClearBgpInstanceVersionVrfAfiSafi(_Entity_):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVersionVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVersionVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafi.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVersionVrfAfiSafi']['meta_info']


class ClearBgpInstanceVrfAllGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAllGraceful.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAllGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAllGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAllGraceful']['meta_info']


class ClearBgpInstanceVrfAll(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAll.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAll']['meta_info']


class ClearBgpInstanceVrfIpAddrGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddrGraceful.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddrGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddrGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddrGraceful']['meta_info']


class ClearBgpInstanceVrfIpAddrLongLivedStale(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddrLongLivedStale.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddrLongLivedStale']['meta_info']


class ClearBgpInstanceVrfIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfIpAddr']['meta_info']


class ClearBgpInstanceVrfAsGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAsGraceful.Input, ['instance_name', 'vrf_all', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAsGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAsGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAsGraceful']['meta_info']


class ClearBgpInstanceVrfAs(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAs.Input, ['instance_name', 'vrf_all', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAs.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAs()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAs']['meta_info']


class ClearBgpInstanceVrfExternalGraceful(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfExternalGraceful.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfExternalGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfExternalGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfExternalGraceful']['meta_info']


class ClearBgpInstanceVrfExternal(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfExternal.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfExternal.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfExternal()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfExternal']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftIn']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoftOut']['meta_info']


class ClearBgpInstanceVrfAfiSafiAllSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAllSoft']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftIn']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoftOut']['meta_info']


class ClearBgpInstanceVrfAfiSafiIpAddrSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiIpAddrSoft']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftIn']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoftOut']['meta_info']


class ClearBgpInstanceVrfAfiSafiAsSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiAsSoft']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampening(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampening.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampening.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampening()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampening']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftIn(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftIn']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoftOut(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoftOut']['meta_info']


class ClearBgpInstanceVrfAfiSafiExternalSoft(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiExternalSoft']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('regexp_pattern', (YLeaf(YType.str, 'regexp-pattern'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'regexp_pattern'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'route_policy_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatistics.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatistics']['meta_info']


class ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics']['meta_info']


class ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr']['meta_info']


class ClearBgpInstanceVrfAfiSafiSelfOriginated(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiSelfOriginated.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiSelfOriginated.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiSelfOriginated()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiSelfOriginated']['meta_info']


class ClearBgpInstanceVrfAfiSafiShutdown(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiShutdown.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiShutdown']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup']['meta_info']


class ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix']['meta_info']


class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix']['meta_info']


class ClearBgpInstanceVrfNexthopPerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfNexthopPerformanceStatistics.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfNexthopPerformanceStatistics']['meta_info']


class ClearBgpInstanceVrfNexthopRegistrationIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfNexthopRegistrationIpAddr']['meta_info']


class ClearBgpInstanceVrfPeerDropsAll(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfPeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPeerDropsAll.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPeerDropsAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPeerDropsAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPeerDropsAll']['meta_info']


class ClearBgpInstanceVrfPeerDropsIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPeerDropsIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPeerDropsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPeerDropsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPeerDropsIpAddr']['meta_info']


class ClearBgpInstanceVrfPerformanceStatistics(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPerformanceStatistics.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfPerformanceStatistics']['meta_info']


class ClearBgpInstanceVrfShutdown(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfShutdown.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfShutdown']['meta_info']


class ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqAddressFamily(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqAddressFamily.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqAddressFamily']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqNeighborIpAddr(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'vrf_all', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'vrf_all', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpInstanceVrfUpdateOutqUpdateGroup(_Entity_):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input, ['instance_name', 'vrf_all', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfUpdateOutqUpdateGroup']['meta_info']


class ClearBgpAfiSafiDampeningIpv4Prefix(_Entity_):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpv4Prefix']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpv4Prefix(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv4Prefix']['meta_info']


class ClearBgpAfiSafiDampeningIpv6Prefix(_Entity_):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiDampeningIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiDampeningIpv6Prefix']['meta_info']


class ClearBgpAfiSafiFlapStatisticsIpv6Prefix(_Entity_):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpAfiSafiFlapStatisticsIpv6Prefix']['meta_info']


class ClearBgpNexthopPerformanceStatistics(_Entity_):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpNexthopPerformanceStatistics']['meta_info']


class ClearBgpNexthopRegistrationIpAddr(_Entity_):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpNexthopRegistrationIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpNexthopRegistrationIpAddr']['meta_info']


class ClearBgpPeerDropsAll(_Entity_):
    """
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpPeerDropsAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPeerDropsAll']['meta_info']


class ClearBgpPeerDropsIpAddr(_Entity_):
    """
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpPeerDropsIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpPeerDropsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpPeerDropsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPeerDropsIpAddr']['meta_info']


class ClearBgpPerformanceStatistics(_Entity_):
    """
    Clear performance statistics.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpPerformanceStatistics']['meta_info']


class ClearBgpRpkiServerAllSerialQuery(_Entity_):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiServerAllSerialQuery, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-all-serial-query"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerAllSerialQuery()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerAllSerialQuery']['meta_info']


class ClearBgpRpkiServerAll(_Entity_):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiServerAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerAll']['meta_info']


class ClearBgpRpkiServerRpkiServer(_Entity_):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpRpkiServerRpkiServer.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiServerRpkiServer, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-rpki-server"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpRpkiServerRpkiServer.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpRpkiServerRpkiServer.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-rpki-server-rpki-server"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('rpki_server', (YLeaf(YType.str, 'rpki-server'), ['str'])),
            ])
            self.rpki_server = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpRpkiServerRpkiServer.Input, ['rpki_server'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpRpkiServerRpkiServer.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerRpkiServer()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiServerRpkiServer']['meta_info']


class ClearBgpRpkiValidationIpv4(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidationIpv4()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidationIpv4']['meta_info']


class ClearBgpRpkiValidationIpv6(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidationIpv6()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidationIpv6']['meta_info']


class ClearBgpRpkiValidation(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidation()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpRpkiValidation']['meta_info']


class ClearBgpShutdown(_Entity_):
    """
    Clear all peers which were shut down due to low memory.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpShutdown']['meta_info']


class ClearBgpUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpUpdateOutqAddressFamily(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqAddressFamily']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrRefresh.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpUpdateOutqNeighborIpAddr(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpUpdateOutqProcess(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqProcess, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-process"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process"
        self._is_frozen = True

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqProcess()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqProcess']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroup.Input, ['update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupUpdateParent.Input, ['update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpUpdateOutqUpdateGroup(_Entity_):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroup.Input, ['update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpUpdateOutqUpdateGroup']['meta_info']


class ClearBgpVersionIpAddrIpNetmask(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpAddrIpNetmask.Input, ['ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpAddrIpNetmask']['meta_info']


class ClearBgpVersionIpAddr(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpAddr.Input, ['ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpAddr']['meta_info']


class ClearBgpVersionIpPrefix(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpPrefix.Input, ['ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionIpPrefix']['meta_info']


class ClearBgpVersionAfiSafiIpAddrIpNetmask(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpAddrIpNetmask.Input, ['afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpAddrIpNetmask']['meta_info']


class ClearBgpVersionAfiSafiIpAddr(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpAddr']['meta_info']


class ClearBgpVersionAfiSafiIpPrefix(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpPrefix']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpAddr(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpAddr']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpPrefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpPrefix']['meta_info']


class ClearBgpVersionAfiSafiRdIpAddrIpNetmask(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input, ['afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddrIpNetmask']['meta_info']


class ClearBgpVersionAfiSafiRdIpAddr(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpAddr.Input, ['afi_safi_name', 'rd', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpAddr']['meta_info']


class ClearBgpVersionAfiSafiRdIpPrefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpPrefix.Input, ['afi_safi_name', 'rd', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpPrefix']['meta_info']


class ClearBgpVersionAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpVersionAfiSafiIpv4Addr(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4Addr.Input, ['afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4Addr']['meta_info']


class ClearBgpVersionAfiSafiIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4Prefix']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4Addr(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4Addr.Input, ['afi_safi_name', 'rd', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4Addr']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4Addr(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4Addr']['meta_info']


class ClearBgpVersionAfiSafiNetwork(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiNetwork.Input, ['afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiNetwork']['meta_info']


class ClearBgpVersionAfiSafiRdNetwork(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdNetwork.Input, ['afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdNetwork']['meta_info']


class ClearBgpVersionAfiSafiVrfNetwork(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfNetwork.Input, ['afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfNetwork']['meta_info']


class ClearBgpVersionAfiSafiRtConstraintNetwork(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rt_constraint_network', (YLeaf(YType.str, 'rt-constraint-network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRtConstraintNetwork.Input, ['afi_safi_name', 'rt_constraint_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRtConstraintNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRtConstraintNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRtConstraintNetwork']['meta_info']


class ClearBgpVersionAfiSafiIpv4TunnelNetwork(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_tunnel_network', (YLeaf(YType.str, 'ipv4-tunnel-network'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input, ['afi_safi_name', 'ipv4_tunnel_network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4TunnelNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv4TunnelNetwork']['meta_info']


class ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpVersionAfiSafiIpv6Addr(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6Addr.Input, ['afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6Addr']['meta_info']


class ClearBgpVersionAfiSafiIpv6Prefix(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiIpv6Prefix']['meta_info']


class ClearBgpVersionAfiSafiRd(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRd.Input, ['afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRd']['meta_info']


class ClearBgpVersionAfiSafiVrf(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrf.Input, ['afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrf']['meta_info']


class ClearBgpVersionAfiSafi(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafi.Input, ['afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafi']['meta_info']


class ClearBgpVersionAfiSafiSrPolicyPrefix(_Entity_):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('sr_policy_prefix', (YLeaf(YType.str, 'sr-policy-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiSrPolicyPrefix.Input, ['afi_safi_name', 'sr_policy_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiSrPolicyPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiSrPolicyPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiSrPolicyPrefix']['meta_info']


class ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('bridge_domain_name', (YLeaf(YType.str, 'bridge-domain-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4Prefix.Input, ['afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4Prefix']['meta_info']


class ClearBgpVersionAfiSafiMp2mpIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiMp2mpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiMp2mpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiMp2mpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiMp2mpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('mp2mp', (YLeaf(YType.str, 'mp2mp'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiMp2mpIpv4Prefix.Input, ['afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiMp2mpIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiMp2mpIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiMp2mpIpv4Prefix']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4Prefix']['meta_info']


class ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6Addr(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6Addr.Input, ['afi_safi_name', 'rd', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6Addr']['meta_info']


class ClearBgpVersionAfiSafiRdIpv6Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6Prefix.Input, ['afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiRdIpv6Prefix']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6Addr(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6Addr']['meta_info']


class ClearBgpVersionAfiSafiVrfIpv6Prefix(_Entity_):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionAfiSafiVrfIpv6Prefix']['meta_info']


class ClearBgpVersionVrfIpAddrIpNetmask(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ip_netmask', (YLeaf(YType.str, 'ip-netmask'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpAddrIpNetmask.Input, ['vrf_all', 'ip_addr', 'ip_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpAddrIpNetmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpAddrIpNetmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpAddrIpNetmask']['meta_info']


class ClearBgpVersionVrfIpAddr(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpAddr']['meta_info']


class ClearBgpVersionVrfIpPrefix(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_prefix', (YLeaf(YType.str, 'ip-prefix'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpPrefix.Input, ['vrf_all', 'ip_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfIpPrefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpPrefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfIpPrefix']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4Prefix(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4Prefix']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv4Addr(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_addr', (YLeaf(YType.str, 'ipv4-addr'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv4Addr']['meta_info']


class ClearBgpVersionVrfAfiSafiNetwork(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiNetwork.Input, ['vrf_all', 'afi_safi_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiNetwork']['meta_info']


class ClearBgpVersionVrfAfiSafiRdNetwork(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiRdNetwork.Input, ['vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiRdNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiRdNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiRdNetwork']['meta_info']


class ClearBgpVersionVrfAfiSafiVrfNetwork(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                ('network', (YLeaf(YType.str, 'network'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiVrfNetwork.Input, ['vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfNetwork.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiVrfNetwork()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiVrfNetwork']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
                ('ipv6_netmask', (YLeaf(YType.str, 'ipv6-netmask'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6Addr(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_addr', (YLeaf(YType.str, 'ipv6-addr'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6Addr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6Addr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6Addr']['meta_info']


class ClearBgpVersionVrfAfiSafiIpv6Prefix(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiIpv6Prefix']['meta_info']


class ClearBgpVersionVrfAfiSafiRd(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('rd', (YLeaf(YType.str, 'rd'), ['str','str','str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiRd.Input, ['vrf_all', 'afi_safi_name', 'rd'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiRd.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiRd()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiRd']['meta_info']


class ClearBgpVersionVrfAfiSafiVrf(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiVrf.Input, ['vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafiVrf.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiVrf()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafiVrf']['meta_info']


class ClearBgpVersionVrfAfiSafi(_Entity_):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVersionVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVersionVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafi.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVersionVrfAfiSafi.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafi()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVersionVrfAfiSafi']['meta_info']


class ClearBgpVrfAllGraceful(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAllGraceful.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAllGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAllGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAllGraceful']['meta_info']


class ClearBgpInstanceVrfRpkiValidationIpv4(_Entity_):
    """
    Choose a particular BGP instance and VRF.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfRpkiValidationIpv4.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfRpkiValidationIpv4.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation-ipv4"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfRpkiValidationIpv4.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-rpki-validation-ipv4"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation-ipv4/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfRpkiValidationIpv4.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfRpkiValidationIpv4.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfRpkiValidationIpv4()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfRpkiValidationIpv4']['meta_info']


class ClearBgpInstanceVrfRpkiValidationIpv6(_Entity_):
    """
    Choose a particular BGP instance and VRF.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfRpkiValidationIpv6.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfRpkiValidationIpv6.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation-ipv6"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfRpkiValidationIpv6.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-rpki-validation-ipv6"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation-ipv6/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfRpkiValidationIpv6.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfRpkiValidationIpv6.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfRpkiValidationIpv6()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfRpkiValidationIpv6']['meta_info']


class ClearBgpInstanceVrfRpkiValidation(_Entity_):
    """
    Choose a particular BGP instance and VRF.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfRpkiValidation.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpInstanceVrfRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfRpkiValidation.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpInstanceVrfRpkiValidation.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-rpki-validation"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'InstanceName', ''),'str'])),
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-rpki-validation/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfRpkiValidation.Input, ['instance_name', 'vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpInstanceVrfRpkiValidation.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfRpkiValidation()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpInstanceVrfRpkiValidation']['meta_info']


class ClearBgpVrfRpkiValidationIpv4(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfRpkiValidationIpv4.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfRpkiValidationIpv4.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation-ipv4"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfRpkiValidationIpv4.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-rpki-validation-ipv4"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation-ipv4/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfRpkiValidationIpv4.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfRpkiValidationIpv4.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfRpkiValidationIpv4()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfRpkiValidationIpv4']['meta_info']


class ClearBgpVrfRpkiValidationIpv6(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfRpkiValidationIpv6.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfRpkiValidationIpv6.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation-ipv6"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfRpkiValidationIpv6.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-rpki-validation-ipv6"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation-ipv6/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfRpkiValidationIpv6.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfRpkiValidationIpv6.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfRpkiValidationIpv6()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfRpkiValidationIpv6']['meta_info']


class ClearBgpVrfRpkiValidation(_Entity_):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfRpkiValidation.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfRpkiValidation.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfRpkiValidation.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-rpki-validation"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-rpki-validation/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfRpkiValidation.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfRpkiValidation.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfRpkiValidation()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfRpkiValidation']['meta_info']


class ClearBgpVrfAll(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAll.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAll']['meta_info']


class ClearBgpVrfIpAddrGraceful(_Entity_):
    """
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddrGraceful.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddrGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddrGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddrGraceful']['meta_info']


class ClearBgpVrfIpAddrLongLivedStale(_Entity_):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddrLongLivedStale.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddrLongLivedStale']['meta_info']


class ClearBgpVrfIpAddr(_Entity_):
    """
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfIpAddr']['meta_info']


class ClearBgpVrfAsGraceful(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAsGraceful.Input, ['vrf_all', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAsGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAsGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAsGraceful']['meta_info']


class ClearBgpVrfAs(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAs.Input, ['vrf_all', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAs.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAs()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAs']['meta_info']


class ClearBgpVrfExternalGraceful(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfExternalGraceful.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfExternalGraceful.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfExternalGraceful()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfExternalGraceful']['meta_info']


class ClearBgpVrfExternal(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfExternal.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfExternal.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfExternal()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfExternal']['meta_info']


class ClearBgpVrfAfiSafiAllSoftInPrefixFilter(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftInPrefixFilter']['meta_info']


class ClearBgpVrfAfiSafiAllSoftIn(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftIn.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftIn']['meta_info']


class ClearBgpVrfAfiSafiAllSoftOut(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftOut.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoftOut']['meta_info']


class ClearBgpVrfAfiSafiAllSoft(_Entity_):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoft.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAllSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAllSoft']['meta_info']


class ClearBgpVrfAfiSafiIpAddrLongLivedStale(_Entity_):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrLongLivedStale()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrLongLivedStale']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter(_Entity_):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftIn(_Entity_):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftIn.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftIn']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoftOut(_Entity_):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftOut.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoftOut']['meta_info']


class ClearBgpVrfAfiSafiIpAddrSoft(_Entity_):
    """
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoft.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiIpAddrSoft']['meta_info']


class ClearBgpVrfAfiSafiAsSoftInPrefixFilter(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftInPrefixFilter']['meta_info']


class ClearBgpVrfAfiSafiAsSoftIn(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftIn.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftIn']['meta_info']


class ClearBgpVrfAfiSafiAsSoftOut(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftOut.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoftOut']['meta_info']


class ClearBgpVrfAfiSafiAsSoft(_Entity_):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('as_number', (YLeaf(YType.str, 'as-number'), ['int','str','int'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoft.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiAsSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiAsSoft']['meta_info']


class ClearBgpVrfAfiSafiDampeningIpv4Prefix(_Entity_):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampeningIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv4Prefix']['meta_info']


class ClearBgpVrfAfiSafiDampening(_Entity_):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampening.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampening.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampening()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampening']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftInPrefixFilter(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftInPrefixFilter']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftIn(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftIn.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftIn.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftIn()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftIn']['meta_info']


class ClearBgpVrfAfiSafiExternalSoftOut(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftOut.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftOut.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftOut()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoftOut']['meta_info']


class ClearBgpVrfAfiSafiExternalSoft(_Entity_):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoft.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiExternalSoft.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoft()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiExternalSoft']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
                ('ipv4_mask', (YLeaf(YType.str, 'ipv4-mask'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpAddr']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv4_prefix', (YLeaf(YType.str, 'ipv4-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsRegexp(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('regexp_pattern', (YLeaf(YType.str, 'regexp-pattern'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input, ['vrf_all', 'afi_safi_name', 'regexp_pattern'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsRegexp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRegexp']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input, ['vrf_all', 'afi_safi_name', 'route_policy_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy']['meta_info']


class ClearBgpVrfAfiSafiFlapStatistics(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatistics.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatistics']['meta_info']


class ClearBgpVrfAfiSafiNexthopPerformanceStatistics(_Entity_):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiNexthopPerformanceStatistics']['meta_info']


class ClearBgpVrfAfiSafiNexthopRegistrationIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiNexthopRegistrationIpAddr']['meta_info']


class ClearBgpVrfAfiSafiSelfOriginated(_Entity_):
    """
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiSelfOriginated.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiSelfOriginated.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiSelfOriginated()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiSelfOriginated']['meta_info']


class ClearBgpVrfAfiSafiShutdown(_Entity_):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiShutdown.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiShutdown']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqAddressFamily(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input, ['vrf_all', 'afi_safi_name'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqAddressFamily']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpVrfAfiSafiUpdateOutqUpdateGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiUpdateOutqUpdateGroup']['meta_info']


class ClearBgpVrfAfiSafiDampeningIpv6Prefix(_Entity_):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampeningIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiDampeningIpv6Prefix']['meta_info']


class ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix(_Entity_):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('afi_safi_name', (YLeaf(YType.enumeration, 'afi-safi-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'AfiSafiType', '')])),
                ('ipv6_prefix', (YLeaf(YType.str, 'ipv6-prefix'), ['str'])),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix']['meta_info']


class ClearBgpVrfNexthopPerformanceStatistics(_Entity_):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfNexthopPerformanceStatistics.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfNexthopPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfNexthopPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfNexthopPerformanceStatistics']['meta_info']


class ClearBgpVrfNexthopRegistrationIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfNexthopRegistrationIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfNexthopRegistrationIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfNexthopRegistrationIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfNexthopRegistrationIpAddr']['meta_info']


class ClearBgpVrfPeerDropsAll(_Entity_):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfPeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPeerDropsAll.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPeerDropsAll.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPeerDropsAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPeerDropsAll']['meta_info']


class ClearBgpVrfPeerDropsIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPeerDropsIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPeerDropsIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPeerDropsIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPeerDropsIpAddr']['meta_info']


class ClearBgpVrfPerformanceStatistics(_Entity_):
    """
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPerformanceStatistics.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfPerformanceStatistics.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPerformanceStatistics()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfPerformanceStatistics']['meta_info']


class ClearBgpVrfShutdown(_Entity_):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfShutdown.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfShutdown.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfShutdown()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfShutdown']['meta_info']


class ClearBgpVrfUpdateOutqAddressFamilyUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamilyUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqAddressFamily(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqAddressFamily.Input, ['vrf_all'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamily.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqAddressFamily()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqAddressFamily']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrRefresh(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrRefresh']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqNeighborIpAddr(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str','str'])),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddr.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddr()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqNeighborIpAddr']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['vrf_all', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('sub_group', (YLeaf(YType.str, 'sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input, ['vrf_all', 'update_group', 'sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroup']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['vrf_all', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
                ('refresh_sub_group', (YLeaf(YType.str, 'refresh-sub-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['vrf_all', 'update_group', 'refresh_sub_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroupUpdateParent(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input, ['vrf_all', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroupUpdateParent']['meta_info']


class ClearBgpVrfUpdateOutqUpdateGroup(_Entity_):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(ClearBgpVrfUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group"
        self._is_frozen = True


    class Input(_Entity_):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(ClearBgpVrfUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', (YLeaf(YType.str, 'vrf-all'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act', 'VrfName', ''),'str'])),
                ('update_group', (YLeaf(YType.str, 'update-group'), ['str'])),
            ])
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroup.Input, ['vrf_all', 'update_group'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
            return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroup.Input']['meta_info']

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroup()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_act as meta
        return meta._meta_table['ClearBgpVrfUpdateOutqUpdateGroup']['meta_info']


