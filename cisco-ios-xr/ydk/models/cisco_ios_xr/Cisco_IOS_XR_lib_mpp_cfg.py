""" Cisco_IOS_XR_lib_mpp_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR lib\-mpp package configuration.

This module contains definitions
for the following management objects\:
  control\-plane\: Configure control Plane

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class ControlPlane(Entity):
    """
    Configure control Plane
    
    .. attribute:: management_plane_protection
    
    	Configure management plane protection
    	**type**\:   :py:class:`ManagementPlaneProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection>`
    
    

    """

    _prefix = 'lib-mpp-cfg'
    _revision = '2015-07-30'

    def __init__(self):
        super(ControlPlane, self).__init__()
        self._top_entity = None

        self.yang_name = "control-plane"
        self.yang_parent_name = "Cisco-IOS-XR-lib-mpp-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self._child_container_classes = {"management-plane-protection" : ("management_plane_protection", ControlPlane.ManagementPlaneProtection)}
        self._child_list_classes = {}

        self.management_plane_protection = ControlPlane.ManagementPlaneProtection()
        self.management_plane_protection.parent = self
        self._children_name_map["management_plane_protection"] = "management-plane-protection"
        self._children_yang_names.add("management-plane-protection")
        self._segment_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane"


    class ManagementPlaneProtection(Entity):
        """
        Configure management plane protection
        
        .. attribute:: inband
        
        	Inband Configuration
        	**type**\:   :py:class:`Inband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband>`
        
        .. attribute:: outband
        
        	Outband Configuration
        	**type**\:   :py:class:`Outband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband>`
        
        

        """

        _prefix = 'lib-mpp-cfg'
        _revision = '2015-07-30'

        def __init__(self):
            super(ControlPlane.ManagementPlaneProtection, self).__init__()

            self.yang_name = "management-plane-protection"
            self.yang_parent_name = "control-plane"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {"inband" : ("inband", ControlPlane.ManagementPlaneProtection.Inband), "outband" : ("outband", ControlPlane.ManagementPlaneProtection.Outband)}
            self._child_list_classes = {}

            self.inband = ControlPlane.ManagementPlaneProtection.Inband()
            self.inband.parent = self
            self._children_name_map["inband"] = "inband"
            self._children_yang_names.add("inband")

            self.outband = ControlPlane.ManagementPlaneProtection.Outband()
            self.outband.parent = self
            self._children_name_map["outband"] = "outband"
            self._children_yang_names.add("outband")
            self._segment_path = lambda: "management-plane-protection"
            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/%s" % self._segment_path()


        class Inband(Entity):
            """
            Inband Configuration
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:   :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection>`
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                super(ControlPlane.ManagementPlaneProtection.Inband, self).__init__()

                self.yang_name = "inband"
                self.yang_parent_name = "management-plane-protection"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {"interface-selection" : ("interface_selection", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection)}
                self._child_list_classes = {}

                self.interface_selection = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection()
                self.interface_selection.parent = self
                self._children_name_map["interface_selection"] = "interface-selection"
                self._children_yang_names.add("interface-selection")
                self._segment_path = lambda: "inband"
                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/%s" % self._segment_path()


            class InterfaceSelection(Entity):
                """
                Configure interfaces
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:   :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces>`
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection, self).__init__()

                    self.yang_name = "interface-selection"
                    self.yang_parent_name = "inband"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {"all-interfaces" : ("all_interfaces", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces), "interfaces" : ("interfaces", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces)}
                    self._child_list_classes = {}

                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self._children_name_map["all_interfaces"] = "all-interfaces"
                    self._children_yang_names.add("all-interfaces")

                    self.interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interface-selection"
                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/%s" % self._segment_path()


                class AllInterfaces(Entity):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces, self).__init__()

                        self.yang_name = "all-interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {"all-protocols" : ("all_protocols", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols), "http-protocol" : ("http_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol), "netconf-protocol" : ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol), "snmp-protocol" : ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol), "ssh-protocol" : ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol), "telnet-protocol" : ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol), "tftp-protocol" : ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol), "xr-xml" : ("xr_xml", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml)}
                        self._child_list_classes = {}

                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self._children_name_map["all_protocols"] = "all-protocols"
                        self._children_yang_names.add("all-protocols")

                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self._children_name_map["http_protocol"] = "http-protocol"
                        self._children_yang_names.add("http-protocol")

                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self._children_name_map["netconf_protocol"] = "netconf-protocol"
                        self._children_yang_names.add("netconf-protocol")

                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self._children_name_map["snmp_protocol"] = "snmp-protocol"
                        self._children_yang_names.add("snmp-protocol")

                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self._children_name_map["ssh_protocol"] = "ssh-protocol"
                        self._children_yang_names.add("ssh-protocol")

                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self._children_name_map["telnet_protocol"] = "telnet-protocol"
                        self._children_yang_names.add("telnet-protocol")

                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self._children_name_map["tftp_protocol"] = "tftp-protocol"
                        self._children_yang_names.add("tftp-protocol")

                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self
                        self._children_name_map["xr_xml"] = "xr-xml"
                        self._children_yang_names.add("xr-xml")
                        self._segment_path = lambda: "all-interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/%s" % self._segment_path()


                    class AllProtocols(Entity):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols, self).__init__()

                            self.yang_name = "all-protocols"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "all-protocols"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "all-protocols"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class HttpProtocol(Entity):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol, self).__init__()

                            self.yang_name = "http-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "http-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "http-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class NetconfProtocol(Entity):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol, self).__init__()

                            self.yang_name = "netconf-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "netconf-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "netconf-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class SnmpProtocol(Entity):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol, self).__init__()

                            self.yang_name = "snmp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "snmp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "snmp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class SshProtocol(Entity):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol, self).__init__()

                            self.yang_name = "ssh-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "ssh-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "ssh-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class TelnetProtocol(Entity):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol, self).__init__()

                            self.yang_name = "telnet-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "telnet-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "telnet-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class TftpProtocol(Entity):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol, self).__init__()

                            self.yang_name = "tftp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "tftp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "tftp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class XrXml(Entity):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml, self).__init__()

                            self.yang_name = "xr-xml"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "xr-xml"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "xr-xml"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                class Interfaces(Entity):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {"interface" : ("interface", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface)}

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces, [], name, value)


                    class Interface(Entity):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Name of the Interface
                        	**type**\:  str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"all-protocols" : ("all_protocols", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols), "http-protocol" : ("http_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol), "netconf-protocol" : ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol), "snmp-protocol" : ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol), "ssh-protocol" : ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol), "telnet-protocol" : ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol), "tftp-protocol" : ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol), "xr-xml" : ("xr_xml", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml)}
                            self._child_list_classes = {}

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self._children_name_map["all_protocols"] = "all-protocols"
                            self._children_yang_names.add("all-protocols")

                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self._children_name_map["http_protocol"] = "http-protocol"
                            self._children_yang_names.add("http-protocol")

                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self._children_name_map["netconf_protocol"] = "netconf-protocol"
                            self._children_yang_names.add("netconf-protocol")

                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self._children_name_map["snmp_protocol"] = "snmp-protocol"
                            self._children_yang_names.add("snmp-protocol")

                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self._children_name_map["ssh_protocol"] = "ssh-protocol"
                            self._children_yang_names.add("ssh-protocol")

                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self._children_name_map["telnet_protocol"] = "telnet-protocol"
                            self._children_yang_names.add("telnet-protocol")

                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self._children_name_map["tftp_protocol"] = "tftp-protocol"
                            self._children_yang_names.add("tftp-protocol")

                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self
                            self._children_name_map["xr_xml"] = "xr-xml"
                            self._children_yang_names.add("xr-xml")
                            self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface, ['interface_name'], name, value)


                        class AllProtocols(Entity):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols, self).__init__()

                                self.yang_name = "all-protocols"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "all-protocols"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "all-protocols"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class HttpProtocol(Entity):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol, self).__init__()

                                self.yang_name = "http-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "http-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "http-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class NetconfProtocol(Entity):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol, self).__init__()

                                self.yang_name = "netconf-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "netconf-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "netconf-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class SnmpProtocol(Entity):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol, self).__init__()

                                self.yang_name = "snmp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "snmp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "snmp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class SshProtocol(Entity):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol, self).__init__()

                                self.yang_name = "ssh-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "ssh-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "ssh-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class TelnetProtocol(Entity):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol, self).__init__()

                                self.yang_name = "telnet-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "telnet-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "telnet-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class TftpProtocol(Entity):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol, self).__init__()

                                self.yang_name = "tftp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "tftp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "tftp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class XrXml(Entity):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml, self).__init__()

                                self.yang_name = "xr-xml"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "xr-xml"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "xr-xml"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


        class Outband(Entity):
            """
            Outband Configuration
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:   :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection>`
            
            .. attribute:: outband_vrf
            
            	Configure outband VRF
            	**type**\:  str
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                super(ControlPlane.ManagementPlaneProtection.Outband, self).__init__()

                self.yang_name = "outband"
                self.yang_parent_name = "management-plane-protection"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {"interface-selection" : ("interface_selection", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection)}
                self._child_list_classes = {}

                self.outband_vrf = YLeaf(YType.str, "outband-vrf")

                self.interface_selection = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection()
                self.interface_selection.parent = self
                self._children_name_map["interface_selection"] = "interface-selection"
                self._children_yang_names.add("interface-selection")
                self._segment_path = lambda: "outband"
                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband, ['outband_vrf'], name, value)


            class InterfaceSelection(Entity):
                """
                Configure interfaces
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:   :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces>`
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection, self).__init__()

                    self.yang_name = "interface-selection"
                    self.yang_parent_name = "outband"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self._child_container_classes = {"all-interfaces" : ("all_interfaces", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces), "interfaces" : ("interfaces", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces)}
                    self._child_list_classes = {}

                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self._children_name_map["all_interfaces"] = "all-interfaces"
                    self._children_yang_names.add("all-interfaces")

                    self.interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interface-selection"
                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/%s" % self._segment_path()


                class AllInterfaces(Entity):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces, self).__init__()

                        self.yang_name = "all-interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {"all-protocols" : ("all_protocols", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols), "http-protocol" : ("http_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol), "netconf-protocol" : ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol), "snmp-protocol" : ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol), "ssh-protocol" : ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol), "telnet-protocol" : ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol), "tftp-protocol" : ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol), "xr-xml" : ("xr_xml", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml)}
                        self._child_list_classes = {}

                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self._children_name_map["all_protocols"] = "all-protocols"
                        self._children_yang_names.add("all-protocols")

                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self._children_name_map["http_protocol"] = "http-protocol"
                        self._children_yang_names.add("http-protocol")

                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self._children_name_map["netconf_protocol"] = "netconf-protocol"
                        self._children_yang_names.add("netconf-protocol")

                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self._children_name_map["snmp_protocol"] = "snmp-protocol"
                        self._children_yang_names.add("snmp-protocol")

                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self._children_name_map["ssh_protocol"] = "ssh-protocol"
                        self._children_yang_names.add("ssh-protocol")

                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self._children_name_map["telnet_protocol"] = "telnet-protocol"
                        self._children_yang_names.add("telnet-protocol")

                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self._children_name_map["tftp_protocol"] = "tftp-protocol"
                        self._children_yang_names.add("tftp-protocol")

                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self
                        self._children_name_map["xr_xml"] = "xr-xml"
                        self._children_yang_names.add("xr-xml")
                        self._segment_path = lambda: "all-interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/%s" % self._segment_path()


                    class AllProtocols(Entity):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols, self).__init__()

                            self.yang_name = "all-protocols"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "all-protocols"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "all-protocols"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class HttpProtocol(Entity):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol, self).__init__()

                            self.yang_name = "http-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "http-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "http-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class NetconfProtocol(Entity):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol, self).__init__()

                            self.yang_name = "netconf-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "netconf-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "netconf-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class SnmpProtocol(Entity):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol, self).__init__()

                            self.yang_name = "snmp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "snmp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "snmp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class SshProtocol(Entity):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol, self).__init__()

                            self.yang_name = "ssh-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "ssh-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "ssh-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class TelnetProtocol(Entity):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol, self).__init__()

                            self.yang_name = "telnet-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "telnet-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "telnet-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class TftpProtocol(Entity):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol, self).__init__()

                            self.yang_name = "tftp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "tftp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "tftp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                    class XrXml(Entity):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml, self).__init__()

                            self.yang_name = "xr-xml"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass)}
                            self._child_list_classes = {}

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "xr-xml"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "xr-xml"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6)}
                                self._child_list_classes = {}

                                self.peer_all = YLeaf(YType.empty, "peer-all")

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers)}
                                    self._child_list_classes = {}

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address_prefix = YLeaf(YType.str, "address-prefix")
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer)}

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.address = YLeaf(YType.str, "address")
                                            self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                class Interfaces(Entity):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self._child_container_classes = {}
                        self._child_list_classes = {"interface" : ("interface", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface)}

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces, [], name, value)


                    class Interface(Entity):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Name of the Interface
                        	**type**\:  str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self._child_container_classes = {"all-protocols" : ("all_protocols", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols), "http-protocol" : ("http_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol), "netconf-protocol" : ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol), "snmp-protocol" : ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol), "ssh-protocol" : ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol), "telnet-protocol" : ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol), "tftp-protocol" : ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol), "xr-xml" : ("xr_xml", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml)}
                            self._child_list_classes = {}

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self._children_name_map["all_protocols"] = "all-protocols"
                            self._children_yang_names.add("all-protocols")

                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self._children_name_map["http_protocol"] = "http-protocol"
                            self._children_yang_names.add("http-protocol")

                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self._children_name_map["netconf_protocol"] = "netconf-protocol"
                            self._children_yang_names.add("netconf-protocol")

                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self._children_name_map["snmp_protocol"] = "snmp-protocol"
                            self._children_yang_names.add("snmp-protocol")

                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self._children_name_map["ssh_protocol"] = "ssh-protocol"
                            self._children_yang_names.add("ssh-protocol")

                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self._children_name_map["telnet_protocol"] = "telnet-protocol"
                            self._children_yang_names.add("telnet-protocol")

                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self._children_name_map["tftp_protocol"] = "tftp-protocol"
                            self._children_yang_names.add("tftp-protocol")

                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self
                            self._children_name_map["xr_xml"] = "xr-xml"
                            self._children_yang_names.add("xr-xml")
                            self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface, ['interface_name'], name, value)


                        class AllProtocols(Entity):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols, self).__init__()

                                self.yang_name = "all-protocols"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "all-protocols"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "all-protocols"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class HttpProtocol(Entity):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol, self).__init__()

                                self.yang_name = "http-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "http-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "http-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class NetconfProtocol(Entity):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol, self).__init__()

                                self.yang_name = "netconf-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "netconf-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "netconf-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class SnmpProtocol(Entity):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol, self).__init__()

                                self.yang_name = "snmp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "snmp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "snmp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class SshProtocol(Entity):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol, self).__init__()

                                self.yang_name = "ssh-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "ssh-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "ssh-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class TelnetProtocol(Entity):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol, self).__init__()

                                self.yang_name = "telnet-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "telnet-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "telnet-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class TftpProtocol(Entity):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol, self).__init__()

                                self.yang_name = "tftp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "tftp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "tftp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                        class XrXml(Entity):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml, self).__init__()

                                self.yang_name = "xr-xml"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"peer-class" : ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass)}
                                self._child_list_classes = {}

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "xr-xml"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "xr-xml"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"peer-v4" : ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4), "peer-v6" : ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6)}
                                    self._child_list_classes = {}

                                    self.peer_all = YLeaf(YType.empty, "peer-all")

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v4"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"peer-prefixes" : ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes), "peers" : ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers)}
                                        self._child_list_classes = {}

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")
                                        self._segment_path = lambda: "peer-v6"


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer-prefix" : ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix)}

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address_prefix = YLeaf(YType.str, "address-prefix")
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + self.address_prefix.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"peer" : ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer)}

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.address = YLeaf(YType.str, "address")
                                                self._segment_path = lambda: "peer" + "[address='" + self.address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)

    def clone_ptr(self):
        self._top_entity = ControlPlane()
        return self._top_entity

