""" Cisco_IOS_XR_ifmgr_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ifmgr package configuration.

This module contains definitions
for the following management objects\:
  global\-interface\-configuration\: Global scoped configuration
    for interfaces
  interface\-configurations\: interface configurations

Copyright (c) 2013\-2015 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError


from ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes import AtmPvcDataEnum
from ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes import AtmPvcEncapsulationEnum
from ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes import AtmPvcShapingEnum
from ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes import AtmVpShapingEnum
from ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg import AtmPvcTestModeEnum
from ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg import AtmPvpTestModeEnum
from ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg import AtmVpiBitsModeEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import BfdModeEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import BundleCiscoExtTypesEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import BundleLoadBalanceEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import BundleMaximumActiveLinksModeEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import BundlePortActivityEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import ChurnLoggingEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import MlacpMaximizeParameterEnum
from ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg import MlacpSwitchoverEnum
from ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg import OpticsDwdmCarrierGridEnum
from ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg import OpticsDwdmCarrierParamEnum
from ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg import OpticsLoopbackEnum
from ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg import ThresholdEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnExpTtiTypeDapiEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnExpTtiTypeFullEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnExpTtiTypeOsEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnExpTtiTypeSapiEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnLoopbackEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnPerMonEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnSecAdminStateEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnSendTtiTypeDapiEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnSendTtiTypeFullEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnSendTtiTypeOsEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtnSendTtiTypeSapiEnum
from ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg import OtuForwardErrorCorrectionEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetAutoNegotiationEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetDuplexEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetFecEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetFlowCtrlEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetIpgEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetLoopbackEnum
from ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg import EthernetSpeedEnum
from ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg import SpanMirrorIntervalEnum
from ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg import SpanTrafficDirectionEnum
from ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_datatypes import SpanSessionClassEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_cfg import CfmLmCountersCfgEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_datatypes import CfmAisIntervalEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_datatypes import CfmCcmIntervalEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamEventActionEnumEfdEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamEventActionEnumEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamEventActionPrimEnumEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamInterfaceHelloIntervalEnumEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamInterfaceModeEnumEnum
from ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg import EtherLinkOamInterfaceRequireModeEnumEnum
from ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg import VrfAddressFamilyEnum
from ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg import VrfSubAddressFamilyEnum
from ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg import Ipv4DefaultPingEnum
from ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg import Ipv4InterfaceQppbEnum
from ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg import Ipv4ReachableEnum
from ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg import Ipv4SelfPingEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg import Ipv6DefaultPingEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg import Ipv6QppbEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg import Ipv6ReachableEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg import Ipv6SelfPingEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg import Ipv6NdMonthEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg import Ipv6NdRouterPrefEnum
from ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg import Ipv6SrpEncapsulationEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg import EgressFilteringEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg import FilteringEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg import L2ProtocolModeEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg import L2ProtocolNameEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes import EthertypeMatchEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes import MatchEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes import RewriteEnum
from ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes import VlanEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import BindingSegmentIdEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeAutorouteMetricEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeBackupBandwidthClassEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeBackupBandwidthPoolEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeBandwidthDsteEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeBandwidthLimitEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeIgpProtocolEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTePathOptionEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTePathOptionPropertyEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTePathOptionProtectionEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTePathSelectionMetricEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeSwitchingCapEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeSwitchingEncodeEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import MplsTeTunnelAffinityEnum
from ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg import PathInvalidationActionEnum
from ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg import QosFieldNotSupportedEnum
from ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg import QosPolicyAccountEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import EtherReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import EtherThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import FecReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import FecThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import GfpReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import GfpThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import HoVcReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import HoVcThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OcnReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OcnThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OpticsReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OpticsThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OtnReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OtnTcmReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OtnTcmThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import OtnThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import PathReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import PathThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import ReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import StmReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import StmThresholdEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import StsReportEnum
from ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg import StsThresholdEnum
from ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg import QosFieldNotSupportedEnum
from ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg import QosPolicyAccountEnum
from ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg import Qosl2DataLinkEnum
from ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg import Qosl2EncapEnum
from ydk.models.wanphy.Cisco_IOS_XR_wanphy_ui_cfg import WanphyLanModeEnum
from ydk.models.wanphy.Cisco_IOS_XR_wanphy_ui_cfg import WanphyWanModeEnum

class InterfaceModeEnumEnum(Enum):
    """
    InterfaceModeEnumEnum

    Interface mode enum

    .. data:: DEFAULT = 0

    	Default Interface Mode

    .. data:: POINT_TO_POINT = 1

    	Point-to-Point Interface Mode

    .. data:: MULTIPOINT = 2

    	Multipoint Interface Mode

    .. data:: L2_TRANSPORT = 3

    	L2 Transport Interface Mode

    """

    DEFAULT = 0

    POINT_TO_POINT = 1

    MULTIPOINT = 2

    L2_TRANSPORT = 3


    @staticmethod
    def _meta_info():
        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
        return meta._meta_table['InterfaceModeEnumEnum']


class LinkStatusEnumEnum(Enum):
    """
    LinkStatusEnumEnum

    Link status enum

    .. data:: DEFAULT = 0

    	Display link status messages for physical links

    .. data:: DISABLE = 1

    	Disable link status messages

    .. data:: SOFTWARE_INTERFACES = 2

    	Display link status messages for all interfaces

    """

    DEFAULT = 0

    DISABLE = 1

    SOFTWARE_INTERFACES = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
        return meta._meta_table['LinkStatusEnumEnum']


class SecondaryAdminStateEnumEnum(Enum):
    """
    SecondaryAdminStateEnumEnum

    Secondary admin state enum

    .. data:: MAINTENANCE = 1

    	Maintenance Mode

    """

    MAINTENANCE = 1


    @staticmethod
    def _meta_info():
        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
        return meta._meta_table['SecondaryAdminStateEnumEnum']



class GlobalInterfaceConfiguration(object):
    """
    Global scoped configuration for interfaces
    
    .. attribute:: link_status
    
    	Enable or disable link\-status messages
    	**type**\: :py:class:`LinkStatusEnumEnum <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.LinkStatusEnumEnum>`
    
    

    """

    _prefix = 'ifmgr-cfg'
    _revision = '2015-07-30'

    def __init__(self):
        self.link_status = None

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.link_status is not None:
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
        return meta._meta_table['GlobalInterfaceConfiguration']['meta_info']


class InterfaceConfigurations(object):
    """
    interface configurations
    
    .. attribute:: interface_configuration
    
    	The configuration for an interface
    	**type**\: list of :py:class:`InterfaceConfiguration <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration>`
    
    

    """

    _prefix = 'ifmgr-cfg'
    _revision = '2015-07-30'

    def __init__(self):
        self.interface_configuration = YList()
        self.interface_configuration.parent = self
        self.interface_configuration.name = 'interface_configuration'


    class InterfaceConfiguration(object):
        """
        The configuration for an interface
        
        .. attribute:: active  <key>
        
        	Whether the interface is active or preconfigured
        	**type**\: str
        
        	**pattern:** (act)\|(pre)
        
        .. attribute:: interface_name  <key>
        
        	The name of the interface
        	**type**\: str
        
        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
        
        .. attribute:: afs
        
        	Per\-address\-family and topology configuration
        	**type**\: :py:class:`Afs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs>`
        
        .. attribute:: atm
        
        	ATM Configuration
        	**type**\: :py:class:`Atm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm>`
        
        .. attribute:: bandwidth
        
        	The bandwidth of the interface in kbps
        	**type**\: int
        
        	**range:** \-2147483648..2147483647
        
        .. attribute:: bfd
        
        	BFD over bundle members configuration
        	**type**\: :py:class:`Bfd <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd>`
        
        .. attribute:: bundle
        
        	Generic per\-bundle configuration
        	**type**\: :py:class:`Bundle <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle>`
        
        .. attribute:: bundle_member
        
        	Generic per\-member configuration
        	**type**\: :py:class:`BundleMember <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.BundleMember>`
        
        .. attribute:: cdp
        
        	Interface specific CDP configuration
        	**type**\: :py:class:`Cdp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Cdp>`
        
        .. attribute:: cisco_ios_xr_ncs5500_qos_cfg_qos
        
        	Interface QOS configuration
        	**type**\: :py:class:`CiscoIosXrNcs5500QosCfg_Qos <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos>`
        
        .. attribute:: cisco_ios_xr_skp_qos_cfg_qos
        
        	Interface QOS configuration
        	**type**\: :py:class:`CiscoIosXrSkpQosCfg_Qos <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos>`
        
        .. attribute:: dagrs
        
        	Direct\-Attached Gateway Redundancy configuration
        	**type**\: :py:class:`Dagrs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs>`
        
        .. attribute:: dampening
        
        	Whether this interface's state changes are dampened or not
        	**type**\: :py:class:`Dampening <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dampening>`
        
        .. attribute:: description
        
        	The description of this interface
        	**type**\: str
        
        .. attribute:: encapsulation
        
        	The encapsulation on the interface
        	**type**\: :py:class:`Encapsulation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Encapsulation>`
        
        .. attribute:: es_packet_filter
        
        	ES Packet Filtering configuration for the interface
        	**type**\: :py:class:`EsPacketFilter <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter>`
        
        .. attribute:: ethernet
        
        	Ether specific interface configuration
        	**type**\: :py:class:`Ethernet <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet>`
        
        .. attribute:: ethernet_bng
        
        	Ethernet Infra BNG specific configuration
        	**type**\: :py:class:`EthernetBng <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetBng>`
        
        .. attribute:: ethernet_features
        
        	Ethernet Features Configuration
        	**type**\: :py:class:`EthernetFeatures <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures>`
        
        .. attribute:: ethernet_service
        
        	Ethernet service configuration
        	**type**\: :py:class:`EthernetService <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService>`
        
        .. attribute:: interface_mode_non_physical
        
        	The mode in which an interface is running. The existence of this object causes the creation of the software subinterface
        	**type**\: :py:class:`InterfaceModeEnumEnum <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceModeEnumEnum>`
        
        .. attribute:: interface_virtual
        
        	The mode in which an interface is running. The existence of this object causes the creation of the software virtual/subinterface
        	**type**\: :py:class:`Empty <ydk.types.Empty>`
        
        .. attribute:: ipv4_network
        
        	Interface IPv4 Network configuration data
        	**type**\: :py:class:`Ipv4Network <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network>`
        
        .. attribute:: ipv4_network_forwarding
        
        	Interface IPv4 Network configuration data also used for forwarding
        	**type**\: :py:class:`Ipv4NetworkForwarding <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding>`
        
        .. attribute:: ipv4_packet_filter
        
        	IPv4 Packet Filtering configuration for the interface
        	**type**\: :py:class:`Ipv4PacketFilter <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter>`
        
        .. attribute:: ipv4arp
        
        	Configure Address Resolution Protocol
        	**type**\: :py:class:`Ipv4Arp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Arp>`
        
        .. attribute:: ipv6_neighbor
        
        	IPv6 interface neighbor or neighbor discovery configuration
        	**type**\: :py:class:`Ipv6Neighbor <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor>`
        
        .. attribute:: ipv6_network
        
        	Interface IPv6 Network configuration data
        	**type**\: :py:class:`Ipv6Network <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network>`
        
        .. attribute:: ipv6_packet_filter
        
        	IPv6 Packet Filtering configuration for the interface
        	**type**\: :py:class:`Ipv6PacketFilter <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter>`
        
        .. attribute:: l2_transport
        
        	Interface Layer 2 Transport service configuration data
        	**type**\: :py:class:`L2Transport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport>`
        
        .. attribute:: lacp
        
        	Link Aggregation Control Protocol per\-interface configuration (for bundle or member)
        	**type**\: :py:class:`Lacp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp>`
        
        .. attribute:: link_status
        
        	Enable interface and line\-protocol state change alarms
        	**type**\: :py:class:`Empty <ydk.types.Empty>`
        
        .. attribute:: lldp
        
        	Disable LLDP TX or RX
        	**type**\: :py:class:`Lldp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp>`
        
        .. attribute:: mac_accounting
        
        	MAC Accounting Configuration
        	**type**\: :py:class:`MacAccounting <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MacAccounting>`
        
        .. attribute:: mlacp
        
        	Multi\-chassis LACP configuration
        	**type**\: :py:class:`Mlacp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mlacp>`
        
        .. attribute:: mte_tunnel_attributes
        
        	MPLS P2MP tunnel attributes
        	**type**\: :py:class:`MteTunnelAttributes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes>`
        
        .. attribute:: mtus
        
        	The MTU configuration for the interface
        	**type**\: :py:class:`Mtus <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mtus>`
        
        .. attribute:: net_flow
        
        	Interface netflow configuration
        	**type**\: :py:class:`NetFlow <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow>`
        
        .. attribute:: nv_satellite_access
        
        	nV Satellite Access Link Configuration
        	**type**\: :py:class:`NvSatelliteAccess <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess>`
        
        .. attribute:: nv_satellite_fabric_link
        
        	nV Satellite Fabric Link Configuration
        	**type**\: :py:class:`NvSatelliteFabricLink <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink>`
        
        .. attribute:: nv_satellite_fabric_network
        
        	Complex Network connection to one or more Satellites
        	**type**\: :py:class:`NvSatelliteFabricNetwork <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork>`
        
        .. attribute:: optics
        
        	Optics controller configuration
        	**type**\: :py:class:`Optics <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics>`
        
        .. attribute:: otu
        
        	OTU port controller configuration
        	**type**\: :py:class:`Otu <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu>`
        
        .. attribute:: pbr
        
        	Dynamic Template PBR configuration
        	**type**\: :py:class:`Pbr <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pbr>`
        
        .. attribute:: performance_management
        
        	Configure pm parameters
        	**type**\: :py:class:`PerformanceManagement <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement>`
        
        .. attribute:: pseudowire_ether
        
        	PW\-Ether attributes
        	**type**\: :py:class:`PseudowireEther <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PseudowireEther>`
        
        .. attribute:: pseudowire_iw
        
        	PW\-IW attributes
        	**type**\: :py:class:`PseudowireIw <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PseudowireIw>`
        
        .. attribute:: secondary_admin_state
        
        	The secondary admin state of the interface
        	**type**\: :py:class:`SecondaryAdminStateEnumEnum <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.SecondaryAdminStateEnumEnum>`
        
        .. attribute:: shutdown
        
        	The existence of this configuration indicates the interface is shut down
        	**type**\: :py:class:`Empty <ydk.types.Empty>`
        
        .. attribute:: span_monitor_sessions
        
        	Monitor Session container for this source interface
        	**type**\: :py:class:`SpanMonitorSessions <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions>`
        
        .. attribute:: statistics
        
        	Per\-interface statistics configuration
        	**type**\: :py:class:`Statistics <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Statistics>`
        
        .. attribute:: transport_profile_tunnel
        
        	MPLS\-TP tunnel attributes
        	**type**\: :py:class:`TransportProfileTunnel <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel>`
        
        .. attribute:: tunnel_te_attributes
        
        	MPLS tunnel attributes
        	**type**\: :py:class:`TunnelTeAttributes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes>`
        
        .. attribute:: vlan_sub_configuration
        
        	IEEE 802.1Q VLAN subinterface configuration
        	**type**\: :py:class:`VlanSubConfiguration <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration>`
        
        .. attribute:: vlan_trunk_configuration
        
        	IEEE 802.1Q VLAN trunk interface configuration
        	**type**\: :py:class:`VlanTrunkConfiguration <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration>`
        
        .. attribute:: vrf
        
        	Assign the interface to a VRF
        	**type**\: str
        
        	**range:** 0..32
        
        .. attribute:: wanphy
        
        	WANPHY port controller configuration
        	**type**\: :py:class:`Wanphy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Wanphy>`
        
        

        """

        _prefix = 'ifmgr-cfg'
        _revision = '2015-07-30'

        def __init__(self):
            self.parent = None
            self.active = None
            self.interface_name = None
            self.afs = InterfaceConfigurations.InterfaceConfiguration.Afs()
            self.afs.parent = self
            self.atm = InterfaceConfigurations.InterfaceConfiguration.Atm()
            self.atm.parent = self
            self.bandwidth = None
            self.bfd = InterfaceConfigurations.InterfaceConfiguration.Bfd()
            self.bfd.parent = self
            self.bundle = InterfaceConfigurations.InterfaceConfiguration.Bundle()
            self.bundle.parent = self
            self.bundle_member = InterfaceConfigurations.InterfaceConfiguration.BundleMember()
            self.bundle_member.parent = self
            self.cdp = InterfaceConfigurations.InterfaceConfiguration.Cdp()
            self.cdp.parent = self
            self.cisco_ios_xr_ncs5500_qos_cfg_qos = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos()
            self.cisco_ios_xr_ncs5500_qos_cfg_qos.parent = self
            self.cisco_ios_xr_skp_qos_cfg_qos = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos()
            self.cisco_ios_xr_skp_qos_cfg_qos.parent = self
            self.dagrs = InterfaceConfigurations.InterfaceConfiguration.Dagrs()
            self.dagrs.parent = self
            self.dampening = InterfaceConfigurations.InterfaceConfiguration.Dampening()
            self.dampening.parent = self
            self.description = None
            self.encapsulation = InterfaceConfigurations.InterfaceConfiguration.Encapsulation()
            self.encapsulation.parent = self
            self.es_packet_filter = InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter()
            self.es_packet_filter.parent = self
            self.ethernet = InterfaceConfigurations.InterfaceConfiguration.Ethernet()
            self.ethernet.parent = self
            self.ethernet_bng = InterfaceConfigurations.InterfaceConfiguration.EthernetBng()
            self.ethernet_bng.parent = self
            self.ethernet_features = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures()
            self.ethernet_features.parent = self
            self.ethernet_service = InterfaceConfigurations.InterfaceConfiguration.EthernetService()
            self.ethernet_service.parent = self
            self.interface_mode_non_physical = None
            self.interface_virtual = None
            self.ipv4_network = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network()
            self.ipv4_network.parent = self
            self.ipv4_network_forwarding = InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding()
            self.ipv4_network_forwarding.parent = self
            self.ipv4_packet_filter = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter()
            self.ipv4_packet_filter.parent = self
            self.ipv4arp = InterfaceConfigurations.InterfaceConfiguration.Ipv4Arp()
            self.ipv4arp.parent = self
            self.ipv6_neighbor = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor()
            self.ipv6_neighbor.parent = self
            self.ipv6_network = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network()
            self.ipv6_network.parent = self
            self.ipv6_packet_filter = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter()
            self.ipv6_packet_filter.parent = self
            self.l2_transport = InterfaceConfigurations.InterfaceConfiguration.L2Transport()
            self.l2_transport.parent = self
            self.lacp = InterfaceConfigurations.InterfaceConfiguration.Lacp()
            self.lacp.parent = self
            self.link_status = None
            self.lldp = None
            self.mac_accounting = InterfaceConfigurations.InterfaceConfiguration.MacAccounting()
            self.mac_accounting.parent = self
            self.mlacp = InterfaceConfigurations.InterfaceConfiguration.Mlacp()
            self.mlacp.parent = self
            self.mte_tunnel_attributes = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes()
            self.mte_tunnel_attributes.parent = self
            self.mtus = InterfaceConfigurations.InterfaceConfiguration.Mtus()
            self.mtus.parent = self
            self.net_flow = InterfaceConfigurations.InterfaceConfiguration.NetFlow()
            self.net_flow.parent = self
            self.nv_satellite_access = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess()
            self.nv_satellite_access.parent = self
            self.nv_satellite_fabric_link = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink()
            self.nv_satellite_fabric_link.parent = self
            self.nv_satellite_fabric_network = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork()
            self.nv_satellite_fabric_network.parent = self
            self.optics = InterfaceConfigurations.InterfaceConfiguration.Optics()
            self.optics.parent = self
            self.otu = InterfaceConfigurations.InterfaceConfiguration.Otu()
            self.otu.parent = self
            self.pbr = InterfaceConfigurations.InterfaceConfiguration.Pbr()
            self.pbr.parent = self
            self.performance_management = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement()
            self.performance_management.parent = self
            self.pseudowire_ether = InterfaceConfigurations.InterfaceConfiguration.PseudowireEther()
            self.pseudowire_ether.parent = self
            self.pseudowire_iw = InterfaceConfigurations.InterfaceConfiguration.PseudowireIw()
            self.pseudowire_iw.parent = self
            self.secondary_admin_state = None
            self.shutdown = None
            self.span_monitor_sessions = InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions()
            self.span_monitor_sessions.parent = self
            self.statistics = InterfaceConfigurations.InterfaceConfiguration.Statistics()
            self.statistics.parent = self
            self.transport_profile_tunnel = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel()
            self.transport_profile_tunnel.parent = self
            self.tunnel_te_attributes = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes()
            self.tunnel_te_attributes.parent = self
            self.vlan_sub_configuration = InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration()
            self.vlan_sub_configuration.parent = self
            self.vlan_trunk_configuration = InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration()
            self.vlan_trunk_configuration.parent = self
            self.vrf = None
            self.wanphy = InterfaceConfigurations.InterfaceConfiguration.Wanphy()
            self.wanphy.parent = self


        class Dampening(object):
            """
            Whether this interface's state changes are
            dampened or not
            
            .. attribute:: args
            
            	Dampening Arguments
            	**type**\: :py:class:`ArgsEnum <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dampening.ArgsEnum>`
            
            .. attribute:: half_life
            
            	Decay half life (in minutes)
            	**type**\: int
            
            	**range:** 1..45
            
            .. attribute:: restart_penalty
            
            	Restart penalty
            	**type**\: int
            
            	**range:** 0..20000
            
            .. attribute:: reuse_threshold
            
            	Reuse threshold
            	**type**\: int
            
            	**range:** 1..20000
            
            .. attribute:: suppress_threshold
            
            	Suppress threshold
            	**type**\: int
            
            	**range:** 1..20000
            
            .. attribute:: suppress_time
            
            	Max suppress time (in minutes)
            	**type**\: int
            
            	**range:** 1..255
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.args = None
                self.half_life = None
                self.restart_penalty = None
                self.reuse_threshold = None
                self.suppress_threshold = None
                self.suppress_time = None

            class ArgsEnum(Enum):
                """
                ArgsEnum

                Dampening Arguments

                .. data:: DEFAULT_VALUES = 0

                	Default values

                .. data:: SPECIFY_HALF_LIFE = 1

                	Half Life Specified

                .. data:: SPECIFY_ALL = 4

                	All Arguments except Restart Penalty

                	Specified

                .. data:: SPECIFY_RP = 5

                	All Arguments Specified

                """

                DEFAULT_VALUES = 0

                SPECIFY_HALF_LIFE = 1

                SPECIFY_ALL = 4

                SPECIFY_RP = 5


                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dampening.ArgsEnum']


            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ifmgr-cfg:dampening'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.args is not None:
                    return True

                if self.half_life is not None:
                    return True

                if self.restart_penalty is not None:
                    return True

                if self.reuse_threshold is not None:
                    return True

                if self.suppress_threshold is not None:
                    return True

                if self.suppress_time is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dampening']['meta_info']


        class Mtus(object):
            """
            The MTU configuration for the interface
            
            .. attribute:: mtu
            
            	The MTU for the interface
            	**type**\: list of :py:class:`Mtu <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu>`
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.mtu = YList()
                self.mtu.parent = self
                self.mtu.name = 'mtu'


            class Mtu(object):
                """
                The MTU for the interface
                
                .. attribute:: owner  <key>
                
                	The Owner of the interface \- eg. for 'LoopbackX' main interface this is 'loopback'
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: mtu
                
                	The MTU value
                	**type**\: int
                
                	**range:** 64..65535
                
                

                """

                _prefix = 'ifmgr-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.owner = None
                    self.mtu = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.owner is None:
                        raise YPYModelError('Key property owner is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-ifmgr-cfg:mtu[Cisco-IOS-XR-ifmgr-cfg:owner = ' + str(self.owner) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.owner is not None:
                        return True

                    if self.mtu is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ifmgr-cfg:mtus'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.mtu is not None:
                    for child_ref in self.mtu:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Mtus']['meta_info']


        class Encapsulation(object):
            """
            The encapsulation on the interface
            
            .. attribute:: capsulation_options
            
            	The options for this capsulation, usually '0'
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: encapsulation
            
            	The encapsulation \- e.g. hdlc, ppp
            	**type**\: str
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.capsulation_options = None
                self.encapsulation = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ifmgr-cfg:encapsulation'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.capsulation_options is not None:
                    return True

                if self.encapsulation is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Encapsulation']['meta_info']


        class PseudowireEther(object):
            """
            PW\-Ether attributes
            
            .. attribute:: generic_interface_list
            
            	Name of the interface list
            	**type**\: str
            
            	**range:** 0..32
            
            .. attribute:: l2_overhead
            
            	PW Ether L2 overhead requirement
            	**type**\: int
            
            	**range:** 1..64
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.generic_interface_list = None
                self.l2_overhead = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.generic_interface_list is not None:
                    return True

                if self.l2_overhead is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PseudowireEther']['meta_info']


        class PseudowireIw(object):
            """
            PW\-IW attributes
            
            .. attribute:: generic_interface_list
            
            	Name of the interface list
            	**type**\: str
            
            	**range:** 0..32
            
            .. attribute:: l2_overhead
            
            	L2 overhead size in bytes
            	**type**\: int
            
            	**range:** 1..64
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.generic_interface_list = None
                self.l2_overhead = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.generic_interface_list is not None:
                    return True

                if self.l2_overhead is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PseudowireIw']['meta_info']


        class L2Transport(object):
            """
            Interface Layer 2 Transport service
            configuration data
            
            .. attribute:: atm_port_mode_parameters
            
            	ATM L2transport Port Mode Parameters Configuration
            	**type**\: :py:class:`AtmPortModeParameters <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters>`
            
            .. attribute:: enabled
            
            	This object is only valid on physical interfaces and it controls whether that interface is a port mode Layer 2 attachment circuit (note that for subinterfaces, the Layer 2 property is specified when the subinterface is created).The object must be set before any other L2Transport configuration is supplied for the interface, and must be the last per\-interface configuration object to be removed
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: l2_ethernet_features
            
            	L2 Ethernet Features Configuration
            	**type**\: :py:class:`L2EthernetFeatures <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures>`
            
            .. attribute:: l2_protocols
            
            	Interface specific Layer 2 protocol handling
            	**type**\: :py:class:`L2Protocols <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols>`
            
            .. attribute:: propagate_remote_status
            
            	Enable propagation of the remote attachment\-circuit link state to the localattachment\-circuit link state
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: span_monitor_sessions
            
            	Monitor Session container for this source interface
            	**type**\: :py:class:`SpanMonitorSessions <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions>`
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.atm_port_mode_parameters = InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters()
                self.atm_port_mode_parameters.parent = self
                self.enabled = None
                self.l2_ethernet_features = InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures()
                self.l2_ethernet_features.parent = self
                self.l2_protocols = InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols()
                self.l2_protocols.parent = self
                self.propagate_remote_status = None
                self.span_monitor_sessions = InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions()
                self.span_monitor_sessions.parent = self


            class AtmPortModeParameters(object):
                """
                ATM L2transport Port Mode Parameters
                Configuration
                
                .. attribute:: cell_packing
                
                	Configure cell\-packing parameters.  All parameters are mandatory
                	**type**\: :py:class:`CellPacking <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.cell_packing = None


                class CellPacking(object):
                    """
                    Configure cell\-packing parameters.  All
                    parameters are mandatory.
                    
                    .. attribute:: cell_packing_timer_id
                    
                    	Which cell packing timer to use
                    	**type**\: int
                    
                    	**range:** 1..3
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: maximum_cells_packed
                    
                    	Maximum number of cells to be packed in a packet
                    	**type**\: int
                    
                    	**range:** 2..255
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.cell_packing_timer_id = None
                        self.maximum_cells_packed = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:cell-packing'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.cell_packing_timer_id is not None:
                            return True

                        if self.maximum_cells_packed is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.cell_packing is not None and self.cell_packing._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters']['meta_info']


            class L2Protocols(object):
                """
                Interface specific Layer 2 protocol handling
                
                .. attribute:: l2_protocol
                
                	Handling of a specific Layer 2 protocol
                	**type**\: list of :py:class:`L2Protocol <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol>`
                
                

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.l2_protocol = YList()
                    self.l2_protocol.parent = self
                    self.l2_protocol.name = 'l2_protocol'


                class L2Protocol(object):
                    """
                    Handling of a specific Layer 2 protocol
                    
                    .. attribute:: l2_protocol_name  <key>
                    
                    	Protocol name
                    	**type**\: :py:class:`L2ProtocolNameEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg.L2ProtocolNameEnum>`
                    
                    .. attribute:: mode
                    
                    	How to handle the protocol's packets
                    	**type**\: :py:class:`L2ProtocolModeEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg.L2ProtocolModeEnum>`
                    
                    .. attribute:: mpls_exp_bits_value
                    
                    	The value to set the MPLS Exp bits to within the PW.This value may be specified if the mode is forward or tunnel and must not be specified if the mode is drop
                    	**type**\: int
                    
                    	**range:** 0..7
                    
                    

                    """

                    _prefix = 'l2-eth-infra-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.l2_protocol_name = None
                        self.mode = None
                        self.mpls_exp_bits_value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.l2_protocol_name is None:
                            raise YPYModelError('Key property l2_protocol_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocol[Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocol-name = ' + str(self.l2_protocol_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.l2_protocol_name is not None:
                            return True

                        if self.mode is not None:
                            return True

                        if self.mpls_exp_bits_value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.l2_protocol is not None:
                        for child_ref in self.l2_protocol:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols']['meta_info']


            class L2EthernetFeatures(object):
                """
                L2 Ethernet Features Configuration
                
                .. attribute:: egress_filtering
                
                	Egress Ethernet filtering
                	**type**\: :py:class:`EgressFilteringEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg.EgressFilteringEnum>`
                
                .. attribute:: source_bypass_egress_filtering
                
                	Mark all ingress packets to bypass any egress VLAN filter
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.egress_filtering = None
                    self.source_bypass_egress_filtering = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.egress_filtering is not None:
                        return True

                    if self.source_bypass_egress_filtering is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures']['meta_info']


            class SpanMonitorSessions(object):
                """
                Monitor Session container for this source
                interface
                
                .. attribute:: span_monitor_session
                
                	Configuration for a particular class of Monitor Session
                	**type**\: list of :py:class:`SpanMonitorSession <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession>`
                
                

                """

                _prefix = 'ethernet-span-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.span_monitor_session = YList()
                    self.span_monitor_session.parent = self
                    self.span_monitor_session.name = 'span_monitor_session'


                class SpanMonitorSession(object):
                    """
                    Configuration for a particular class of Monitor
                    Session
                    
                    .. attribute:: session_class  <key>
                    
                    	Session Class
                    	**type**\: :py:class:`SpanSessionClassEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_datatypes.SpanSessionClassEnum>`
                    
                    .. attribute:: acl
                    
                    	Enable ACL matching for traffic mirroring
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: attachment
                    
                    	Attach the interface to a Monitor Session
                    	**type**\: :py:class:`Attachment <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment>`
                    
                    .. attribute:: mirror_first
                    
                    	Mirror a specified number of bytes from start of packet
                    	**type**\: int
                    
                    	**range:** 1..10000
                    
                    .. attribute:: mirror_interval
                    
                    	Specify the mirror interval
                    	**type**\: :py:class:`SpanMirrorIntervalEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanMirrorIntervalEnum>`
                    
                    

                    """

                    _prefix = 'ethernet-span-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.session_class = None
                        self.acl = None
                        self.attachment = None
                        self.mirror_first = None
                        self.mirror_interval = None


                    class Attachment(object):
                        """
                        Attach the interface to a Monitor Session
                        
                        .. attribute:: direction
                        
                        	Specify the direction of traffic to replicate (optional)
                        	**type**\: :py:class:`SpanTrafficDirectionEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanTrafficDirectionEnum>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        .. attribute:: port_level_enable
                        
                        	Enable port level traffic mirroring
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        .. attribute:: session_name
                        
                        	Session Name
                        	**type**\: str
                        
                        	**range:** 0..79
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ethernet-span-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.direction = None
                            self.port_level_enable = None
                            self.session_name = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:attachment'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.direction is not None:
                                return True

                            if self.port_level_enable is not None:
                                return True

                            if self.session_name is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.session_class is None:
                            raise YPYModelError('Key property session_class is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-session[Cisco-IOS-XR-Ethernet-SPAN-cfg:session-class = ' + str(self.session_class) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.session_class is not None:
                            return True

                        if self.acl is not None:
                            return True

                        if self.attachment is not None and self.attachment._has_data():
                            return True

                        if self.mirror_first is not None:
                            return True

                        if self.mirror_interval is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.span_monitor_session is not None:
                        for child_ref in self.span_monitor_session:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2vpn-cfg:l2-transport'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.atm_port_mode_parameters is not None and self.atm_port_mode_parameters._has_data():
                    return True

                if self.enabled is not None:
                    return True

                if self.l2_ethernet_features is not None and self.l2_ethernet_features._has_data():
                    return True

                if self.l2_protocols is not None and self.l2_protocols._has_data():
                    return True

                if self.propagate_remote_status is not None:
                    return True

                if self.span_monitor_sessions is not None and self.span_monitor_sessions._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.L2Transport']['meta_info']


        class Atm(object):
            """
            ATM Configuration
            
            .. attribute:: max_vpi_bits
            
            	Support 12\-bits VPI cell format
            	**type**\: :py:class:`AtmVpiBitsModeEnum <ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg.AtmVpiBitsModeEnum>`
            
            .. attribute:: maximum_cell_packing_timers
            
            	Configure maximum cell\-packing timers.  All parameters are mandatory
            	**type**\: :py:class:`MaximumCellPackingTimers <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers>`
            
            .. attribute:: pvcs
            
            	PVC Configuration
            	**type**\: :py:class:`Pvcs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs>`
            
            .. attribute:: pvps
            
            	PVP Configuration
            	**type**\: :py:class:`Pvps <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps>`
            
            .. attribute:: vc_class
            
            	Name of the VC class
            	**type**\: str
            
            	**range:** 0..30
            
            .. attribute:: vp_tunnels
            
            	VP tunnel configuration
            	**type**\: :py:class:`VpTunnels <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels>`
            
            

            """

            _prefix = 'atm-vcm-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.max_vpi_bits = None
                self.maximum_cell_packing_timers = None
                self.pvcs = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs()
                self.pvcs.parent = self
                self.pvps = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps()
                self.pvps.parent = self
                self.vc_class = None
                self.vp_tunnels = InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels()
                self.vp_tunnels.parent = self


            class Pvps(object):
                """
                PVP Configuration
                
                .. attribute:: pvp
                
                	Configuration of particular PVP
                	**type**\: list of :py:class:`Pvp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.pvp = YList()
                    self.pvp.parent = self
                    self.pvp.name = 'pvp'


                class Pvp(object):
                    """
                    Configuration of particular PVP
                    
                    .. attribute:: vpi  <key>
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: cell_packing
                    
                    	Configure cell\-packing parameters.  All parameters are mandatory
                    	**type**\: :py:class:`CellPacking <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking>`
                    
                    .. attribute:: enable
                    
                    	Create the PVP
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: oam_segment_endpoint
                    
                    	Enable L2VPN PVP OAM segment endpoint
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: shape
                    
                    	Configure traffic shaping parameters
                    	**type**\: :py:class:`Shape <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape>`
                    
                    .. attribute:: test_mode
                    
                    	Configure the PVP test mode
                    	**type**\: :py:class:`AtmPvpTestModeEnum <ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg.AtmPvpTestModeEnum>`
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.vpi = None
                        self.cell_packing = None
                        self.enable = None
                        self.oam_segment_endpoint = None
                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape()
                        self.shape.parent = self
                        self.test_mode = None


                    class Shape(object):
                        """
                        Configure traffic shaping parameters
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\: :py:class:`AtmPvcShapingEnum <ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes.AtmPvcShapingEnum>`
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.burst_size = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:shape'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.burst_size is not None:
                                return True

                            if self.peak_cell_rate is not None:
                                return True

                            if self.sustained_cell_rate is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape']['meta_info']


                    class CellPacking(object):
                        """
                        Configure cell\-packing parameters.  All
                        parameters are mandatory.
                        
                        .. attribute:: cell_packing_timer_id
                        
                        	Which cell packing timer to use
                        	**type**\: int
                        
                        	**range:** 1..3
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        .. attribute:: maximum_cells_packed
                        
                        	Maximum number of cells to be packed in a packet
                        	**type**\: int
                        
                        	**range:** 2..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.cell_packing_timer_id = None
                            self.maximum_cells_packed = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:cell-packing'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.cell_packing_timer_id is not None:
                                return True

                            if self.maximum_cells_packed is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.vpi is None:
                            raise YPYModelError('Key property vpi is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:pvp[Cisco-IOS-XR-atm-vcm-cfg:vpi = ' + str(self.vpi) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vpi is not None:
                            return True

                        if self.cell_packing is not None and self.cell_packing._has_data():
                            return True

                        if self.enable is not None:
                            return True

                        if self.oam_segment_endpoint is not None:
                            return True

                        if self.shape is not None and self.shape._has_data():
                            return True

                        if self.test_mode is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:pvps'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.pvp is not None:
                        for child_ref in self.pvp:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps']['meta_info']


            class Pvcs(object):
                """
                PVC Configuration
                
                .. attribute:: pvc
                
                	Configuration particular PVC
                	**type**\: list of :py:class:`Pvc <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.pvc = YList()
                    self.pvc.parent = self
                    self.pvc.name = 'pvc'


                class Pvc(object):
                    """
                    Configuration particular PVC
                    
                    .. attribute:: pv_ctype  <key>
                    
                    	PVC type
                    	**type**\: :py:class:`AtmPvcDataEnum <ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes.AtmPvcDataEnum>`
                    
                    .. attribute:: vci  <key>
                    
                    	VCI value
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: vpi  <key>
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: cell_packing
                    
                    	Configure cell\-packing parameters.  All parameters are mandatory
                    	**type**\: :py:class:`CellPacking <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking>`
                    
                    .. attribute:: enable
                    
                    	Create the PVC
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: encapsulation
                    
                    	Configure encapsulation
                    	**type**\: :py:class:`AtmPvcEncapsulationEnum <ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes.AtmPvcEncapsulationEnum>`
                    
                    .. attribute:: oam_emulation
                    
                    	L2VPN OAM emulation
                    	**type**\: :py:class:`OamEmulation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation>`
                    
                    .. attribute:: oam_segment_endpoint
                    
                    	Enable L2VPN PVC OAM segment endpoint
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: shape
                    
                    	Configure traffic shaping parameters
                    	**type**\: :py:class:`Shape <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape>`
                    
                    .. attribute:: test_mode
                    
                    	Configure the PVC test mode
                    	**type**\: :py:class:`AtmPvcTestModeEnum <ydk.models.atm.Cisco_IOS_XR_atm_vcm_cfg.AtmPvcTestModeEnum>`
                    
                    .. attribute:: vc_class
                    
                    	Name of the VC class
                    	**type**\: str
                    
                    	**range:** 0..30
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.pv_ctype = None
                        self.vci = None
                        self.vpi = None
                        self.cell_packing = None
                        self.enable = None
                        self.encapsulation = None
                        self.oam_emulation = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation()
                        self.oam_emulation.parent = self
                        self.oam_segment_endpoint = None
                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape()
                        self.shape.parent = self
                        self.test_mode = None
                        self.vc_class = None


                    class Shape(object):
                        """
                        Configure traffic shaping parameters
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\: :py:class:`AtmPvcShapingEnum <ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes.AtmPvcShapingEnum>`
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.burst_size = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:shape'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.burst_size is not None:
                                return True

                            if self.peak_cell_rate is not None:
                                return True

                            if self.sustained_cell_rate is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape']['meta_info']


                    class OamEmulation(object):
                        """
                        L2VPN OAM emulation
                        
                        .. attribute:: ais_transmit_rate
                        
                        	AIS cell transmit rate (1 per x seconds)
                        	**type**\: int
                        
                        	**range:** 0..60
                        
                        .. attribute:: enable
                        
                        	Enable OAM emulation
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ais_transmit_rate = None
                            self.enable = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:oam-emulation'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ais_transmit_rate is not None:
                                return True

                            if self.enable is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation']['meta_info']


                    class CellPacking(object):
                        """
                        Configure cell\-packing parameters.  All
                        parameters are mandatory.
                        
                        .. attribute:: cell_packing_timer_id
                        
                        	Which cell packing timer to use
                        	**type**\: int
                        
                        	**range:** 1..3
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        .. attribute:: maximum_cells_packed
                        
                        	Maximum number of cells to be packed in a packet
                        	**type**\: int
                        
                        	**range:** 2..255
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.cell_packing_timer_id = None
                            self.maximum_cells_packed = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:cell-packing'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.cell_packing_timer_id is not None:
                                return True

                            if self.maximum_cells_packed is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.pv_ctype is None:
                            raise YPYModelError('Key property pv_ctype is None')
                        if self.vci is None:
                            raise YPYModelError('Key property vci is None')
                        if self.vpi is None:
                            raise YPYModelError('Key property vpi is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:pvc[Cisco-IOS-XR-atm-vcm-cfg:pv-ctype = ' + str(self.pv_ctype) + '][Cisco-IOS-XR-atm-vcm-cfg:vci = ' + str(self.vci) + '][Cisco-IOS-XR-atm-vcm-cfg:vpi = ' + str(self.vpi) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.pv_ctype is not None:
                            return True

                        if self.vci is not None:
                            return True

                        if self.vpi is not None:
                            return True

                        if self.cell_packing is not None and self.cell_packing._has_data():
                            return True

                        if self.enable is not None:
                            return True

                        if self.encapsulation is not None:
                            return True

                        if self.oam_emulation is not None and self.oam_emulation._has_data():
                            return True

                        if self.oam_segment_endpoint is not None:
                            return True

                        if self.shape is not None and self.shape._has_data():
                            return True

                        if self.test_mode is not None:
                            return True

                        if self.vc_class is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:pvcs'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.pvc is not None:
                        for child_ref in self.pvc:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs']['meta_info']


            class MaximumCellPackingTimers(object):
                """
                Configure maximum cell\-packing timers.  All
                parameters are mandatory.
                
                .. attribute:: cell_packing_timer1
                
                	Cell\-packing timer1 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: cell_packing_timer2
                
                	Cell\-packing timer2 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: cell_packing_timer3
                
                	Cell\-packing timer3 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.cell_packing_timer1 = None
                    self.cell_packing_timer2 = None
                    self.cell_packing_timer3 = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:maximum-cell-packing-timers'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.cell_packing_timer1 is not None:
                        return True

                    if self.cell_packing_timer2 is not None:
                        return True

                    if self.cell_packing_timer3 is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers']['meta_info']


            class VpTunnels(object):
                """
                VP tunnel configuration
                
                .. attribute:: vp_tunnel
                
                	Configure a VP tunnel on this interface
                	**type**\: list of :py:class:`VpTunnel <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.vp_tunnel = YList()
                    self.vp_tunnel.parent = self
                    self.vp_tunnel.name = 'vp_tunnel'


                class VpTunnel(object):
                    """
                    Configure a VP tunnel on this interface
                    
                    .. attribute:: vpi  <key>
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: disable_f4oam
                    
                    	Disable F4 OAM configuration
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: enable
                    
                    	Create the VP Tunnel
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: enable_hierarchical_shaping
                    
                    	Enable Hierarchical Shaping configuration
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: shape
                    
                    	Configure Traffic shaping parameters
                    	**type**\: :py:class:`Shape <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape>`
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.vpi = None
                        self.disable_f4oam = None
                        self.enable = None
                        self.enable_hierarchical_shaping = None
                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape()
                        self.shape.parent = self


                    class Shape(object):
                        """
                        Configure Traffic shaping parameters
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\: :py:class:`AtmVpShapingEnum <ydk.models.atm.Cisco_IOS_XR_atm_common_datatypes.AtmVpShapingEnum>`
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.burst_size = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:shape'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.burst_size is not None:
                                return True

                            if self.peak_cell_rate is not None:
                                return True

                            if self.sustained_cell_rate is not None:
                                return True

                            if self.type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.vpi is None:
                            raise YPYModelError('Key property vpi is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:vp-tunnel[Cisco-IOS-XR-atm-vcm-cfg:vpi = ' + str(self.vpi) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vpi is not None:
                            return True

                        if self.disable_f4oam is not None:
                            return True

                        if self.enable is not None:
                            return True

                        if self.enable_hierarchical_shaping is not None:
                            return True

                        if self.shape is not None and self.shape._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:vp-tunnels'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.vp_tunnel is not None:
                        for child_ref in self.vp_tunnel:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-atm-vcm-cfg:atm'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.max_vpi_bits is not None:
                    return True

                if self.maximum_cell_packing_timers is not None and self.maximum_cell_packing_timers._has_data():
                    return True

                if self.pvcs is not None and self.pvcs._has_data():
                    return True

                if self.pvps is not None and self.pvps._has_data():
                    return True

                if self.vc_class is not None:
                    return True

                if self.vp_tunnels is not None and self.vp_tunnels._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Atm']['meta_info']


        class Bfd(object):
            """
            BFD over bundle members configuration
            
            .. attribute:: address_family
            
            	Configuration of BFDoBM for all address families
            	**type**\: :py:class:`AddressFamily <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily>`
            
            .. attribute:: mode
            
            	Configuration of BFDoBM mode [cisco\|ietf]
            	**type**\: :py:class:`BfdModeEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.BfdModeEnum>`
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.address_family = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily()
                self.address_family.parent = self
                self.mode = None


            class AddressFamily(object):
                """
                Configuration of BFDoBM for all address
                families
                
                .. attribute:: ipv4
                
                	Configuration of BFDoBM for IPv4 address family
                	**type**\: :py:class:`Ipv4 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4>`
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ipv4 = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4()
                    self.ipv4.parent = self


                class Ipv4(object):
                    """
                    Configuration of BFDoBM for IPv4 address
                    family
                    
                    .. attribute:: destination_address
                    
                    	Destination address for BFD sessions created by bundlemgr
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection multiplier for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 2..50
                    
                    .. attribute:: echo
                    
                    	Container for Echo min\-multiplier
                    	**type**\: :py:class:`Echo <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo>`
                    
                    .. attribute:: fast_detect
                    
                    	Configure to enable BFD over bundle members
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: interval
                    
                    	Hello interval for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 3..30000
                    
                    .. attribute:: timers
                    
                    	Timers associated with BFDoBM
                    	**type**\: :py:class:`Timers <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers>`
                    
                    

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.destination_address = None
                        self.detection_multiplier = None
                        self.echo = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo()
                        self.echo.parent = self
                        self.fast_detect = None
                        self.interval = None
                        self.timers = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers()
                        self.timers.parent = self


                    class Echo(object):
                        """
                        Container for Echo min\-multiplier
                        
                        .. attribute:: min_interval
                        
                        	Configure echo min\-interval for bundle interface
                        	**type**\: int
                        
                        	**range:** 15..2000
                        
                        

                        """

                        _prefix = 'bundlemgr-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.min_interval = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:echo'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.min_interval is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo']['meta_info']


                    class Timers(object):
                        """
                        Timers associated with BFDoBM
                        
                        .. attribute:: nbor_unconfig_timer
                        
                        	Timer associated with aggressiveness on BFD session peer being unconfigured
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        .. attribute:: start_timer
                        
                        	Timer associated with aggressiveness on BFD session creation
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        

                        """

                        _prefix = 'bundlemgr-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.nbor_unconfig_timer = None
                            self.start_timer = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:timers'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nbor_unconfig_timer is not None:
                                return True

                            if self.start_timer is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:ipv4'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_address is not None:
                            return True

                        if self.detection_multiplier is not None:
                            return True

                        if self.echo is not None and self.echo._has_data():
                            return True

                        if self.fast_detect is not None:
                            return True

                        if self.interval is not None:
                            return True

                        if self.timers is not None and self.timers._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:address-family'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv4 is not None and self.ipv4._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:bfd'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.address_family is not None and self.address_family._has_data():
                    return True

                if self.mode is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bfd']['meta_info']


        class Bundle(object):
            """
            Generic per\-bundle configuration
            
            .. attribute:: bundle_load_balancing
            
            	Load\-balance configuration
            	**type**\: :py:class:`BundleLoadBalancing <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing>`
            
            .. attribute:: maximum_active
            
            	Set a limit on the number of links that can be active
            	**type**\: :py:class:`MaximumActive <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive>`
            
            .. attribute:: minimum_active
            
            	Minimum criteria for a bundle to be active
            	**type**\: :py:class:`MinimumActive <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive>`
            
            .. attribute:: shutdown
            
            	Deactivate all member links (down to Standby state)
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: wait_while
            
            	Set the wait\-while timeout for members of this bundle
            	**type**\: int
            
            	**range:** 0..2000
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.bundle_load_balancing = InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing()
                self.bundle_load_balancing.parent = self
                self.maximum_active = InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive()
                self.maximum_active.parent = self
                self.minimum_active = InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive()
                self.minimum_active.parent = self
                self.shutdown = None
                self.wait_while = None


            class BundleLoadBalancing(object):
                """
                Load\-balance configuration
                
                .. attribute:: hash_function
                
                	Enable loadbalancing on this Bundle / EFP
                	**type**\: :py:class:`HashFunction <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction>`
                
                .. attribute:: localize_links
                
                	Set thresholds for forwarding bundle traffic within a rack
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hash_function = None
                    self.localize_links = None


                class HashFunction(object):
                    """
                    Enable loadbalancing on this Bundle / EFP
                    
                    .. attribute:: hash_type
                    
                    	The specified hash function to use
                    	**type**\: :py:class:`BundleLoadBalanceEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.BundleLoadBalanceEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: hash_value
                    
                    	The loadbalance hash value selected. For non\-EFP Value methods, this value must be set to 1
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hash_type = None
                        self.hash_value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:hash-function'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hash_type is not None:
                            return True

                        if self.hash_value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:bundle-load-balancing'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hash_function is not None and self.hash_function._has_data():
                        return True

                    if self.localize_links is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing']['meta_info']


            class MinimumActive(object):
                """
                Minimum criteria for a bundle to be active
                
                .. attribute:: bandwidth
                
                	Bandwidth (in kbps) needed to bring up a bundle
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: links
                
                	Number of active links needed to bring up a bundle
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bandwidth = None
                    self.links = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:minimum-active'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bandwidth is not None:
                        return True

                    if self.links is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive']['meta_info']


            class MaximumActive(object):
                """
                Set a limit on the number of links that can be
                active
                
                .. attribute:: links
                
                	Maximum number of active links in a bundle
                	**type**\: :py:class:`Links <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links>`
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.links = None


                class Links(object):
                    """
                    Maximum number of active links in a bundle
                    
                    .. attribute:: links
                    
                    	Number of active links
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: max_active_links_mode
                    
                    	Maximum active links mode
                    	**type**\: :py:class:`BundleMaximumActiveLinksModeEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.BundleMaximumActiveLinksModeEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.links = None
                        self.max_active_links_mode = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:links'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.links is not None:
                            return True

                        if self.max_active_links_mode is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:maximum-active'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.links is not None and self.links._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:bundle'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.bundle_load_balancing is not None and self.bundle_load_balancing._has_data():
                    return True

                if self.maximum_active is not None and self.maximum_active._has_data():
                    return True

                if self.minimum_active is not None and self.minimum_active._has_data():
                    return True

                if self.shutdown is not None:
                    return True

                if self.wait_while is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Bundle']['meta_info']


        class Lacp(object):
            """
            Link Aggregation Control Protocol per\-interface
            configuration (for bundle or member)
            
            .. attribute:: churn_logging
            
            	Log churn notifications on the specified system(s)
            	**type**\: :py:class:`ChurnLoggingEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.ChurnLoggingEnum>`
            
            .. attribute:: cisco_extensions
            
            	Enable bundle Cisco extensions
            	**type**\: :py:class:`CiscoExtensions <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions>`
            
            .. attribute:: collector_max_delay
            
            	Collector Max Delay value to signal to the LACP partner
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: fast_switchover
            
            	Configure to enable the fast\-switchover mode
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: lacp_nonrevertive
            
            	Configure to enable lacp non\-revertive mode
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: period_short
            
            	LACP period to request from the partner (LACP standard short period, or rate in milliseconds for use with Cisco\-specific extensions). Default is LACP standard long period (30s)
            	**type**\: one of the below types:
            
            	**type**\: :py:class:`PeriodShortEnumEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.PeriodShortEnumEnum>`
            
            
            ----
            	**type**\: int
            
            	**range:** 1..1000
            
            
            ----
            .. attribute:: suppress_flaps
            
            	Suppress flaps on switchover for the specified period (in ms)
            	**type**\: int
            
            	**range:** 100..65535
            
            .. attribute:: system_mac
            
            	System identifier for this bundle
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: system_priority
            
            	System priority for this bundle. Lower value is higher priority
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: timeout
            
            	Set timeout values for LACP\-related timers
            	**type**\: :py:class:`Timeout <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout>`
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.churn_logging = None
                self.cisco_extensions = None
                self.collector_max_delay = None
                self.fast_switchover = None
                self.lacp_nonrevertive = None
                self.period_short = None
                self.suppress_flaps = None
                self.system_mac = None
                self.system_priority = None
                self.timeout = InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout()
                self.timeout.parent = self


            class CiscoExtensions(object):
                """
                Enable bundle Cisco extensions
                
                .. attribute:: cisco_ext
                
                	Cisco extensions
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: cisco_ext_type
                
                	Specific Cisco extension to enable / disable
                	**type**\: :py:class:`BundleCiscoExtTypesEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.BundleCiscoExtTypesEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.cisco_ext = None
                    self.cisco_ext_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:cisco-extensions'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.cisco_ext is not None:
                        return True

                    if self.cisco_ext_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions']['meta_info']


            class Timeout(object):
                """
                Set timeout values for LACP\-related timers
                
                .. attribute:: actor_churn
                
                	The time in milliseconds for which to run the timer
                	**type**\: int
                
                	**range:** 0..120
                
                .. attribute:: partner_churn
                
                	Set the timeout to use before declaring partner churn
                	**type**\: int
                
                	**range:** 0..120
                
                .. attribute:: rx_default
                
                	Set the timeout between expired and defaulted states
                	**type**\: int
                
                	**range:** 0..3000
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.actor_churn = None
                    self.partner_churn = None
                    self.rx_default = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:timeout'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.actor_churn is not None:
                        return True

                    if self.partner_churn is not None:
                        return True

                    if self.rx_default is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:lacp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.churn_logging is not None:
                    return True

                if self.cisco_extensions is not None and self.cisco_extensions._has_data():
                    return True

                if self.collector_max_delay is not None:
                    return True

                if self.fast_switchover is not None:
                    return True

                if self.lacp_nonrevertive is not None:
                    return True

                if self.period_short is not None:
                    return True

                if self.suppress_flaps is not None:
                    return True

                if self.system_mac is not None:
                    return True

                if self.system_priority is not None:
                    return True

                if self.timeout is not None and self.timeout._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lacp']['meta_info']


        class BundleMember(object):
            """
            Generic per\-member configuration
            
            .. attribute:: id
            
            	Add the port to an aggregated interface
            	**type**\: :py:class:`Id <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id>`
            
            .. attribute:: port_priority
            
            	Priority for this port. Lower value is higher priority
            	**type**\: int
            
            	**range:** 1..65535
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.id = InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id()
                self.id.parent = self
                self.port_priority = None


            class Id(object):
                """
                Add the port to an aggregated interface.
                
                .. attribute:: bundle_id
                
                	Identifier of the bundle to add the port to
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: port_activity
                
                	Port Activity
                	**type**\: :py:class:`BundlePortActivityEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.BundlePortActivityEnum>`
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bundle_id = None
                    self.port_activity = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:id'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bundle_id is not None:
                        return True

                    if self.port_activity is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:bundle-member'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.id is not None and self.id._has_data():
                    return True

                if self.port_priority is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.BundleMember']['meta_info']


        class Mlacp(object):
            """
            Multi\-chassis LACP configuration
            
            .. attribute:: iccp_group
            
            	Specify an ICCP Group in which this bundle should operate
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: maximize
            
            	Set parameters to maximize between the mLACP peers
            	**type**\: :py:class:`Maximize <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize>`
            
            .. attribute:: port_priority
            
            	The LACP port priority (lower value is higher priority)
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: recovery_delay
            
            	Set the delay before the bundle becomes active after recovery from failure
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: switchover_type
            
            	Set the type of mLACP switchover to use for this bundle
            	**type**\: :py:class:`MlacpSwitchoverEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.MlacpSwitchoverEnum>`
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.iccp_group = None
                self.maximize = None
                self.port_priority = None
                self.recovery_delay = None
                self.switchover_type = None


            class Maximize(object):
                """
                Set parameters to maximize between the mLACP
                peers
                
                .. attribute:: bandwidth_threshold
                
                	The bandwidth (in kbps) below which to switch to the peer if it has more bandwidth available . Only applicable if maximizing by bandwidth. If 0, no threshold is applied
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: link_threshold
                
                	The number of links below which to switch to the peer if it has more links available. Only applicable if maximizing by links. If 0, no threshold is applied
                	**type**\: int
                
                	**range:** 0..64
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: maximize_by
                
                	The paramenter which should be maximized
                	**type**\: :py:class:`MlacpMaximizeParameterEnum <ydk.models.bundlemgr.Cisco_IOS_XR_bundlemgr_cfg.MlacpMaximizeParameterEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bandwidth_threshold = None
                    self.link_threshold = None
                    self.maximize_by = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:maximize'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bandwidth_threshold is not None:
                        return True

                    if self.link_threshold is not None:
                        return True

                    if self.maximize_by is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-bundlemgr-cfg:mlacp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.iccp_group is not None:
                    return True

                if self.maximize is not None and self.maximize._has_data():
                    return True

                if self.port_priority is not None:
                    return True

                if self.recovery_delay is not None:
                    return True

                if self.switchover_type is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Mlacp']['meta_info']


        class Cdp(object):
            """
            Interface specific CDP configuration
            
            .. attribute:: enable
            
            	Enable or disable CDP on an interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            

            """

            _prefix = 'cdp-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.enable = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-cdp-cfg:cdp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.enable is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Cdp']['meta_info']


        class Optics(object):
            """
            Optics controller configuration
            
            .. attribute:: optics_cd_high_threshold
            
            	Select chromatic dispersion high threshold(in units of ps/nm)
            	**type**\: int
            
            	**range:** \-70000..70000
            
            .. attribute:: optics_cd_low_threshold
            
            	Select chromatic dispersion low threshold(in units of ps/nm)
            	**type**\: int
            
            	**range:** \-70000..70000
            
            .. attribute:: optics_cd_max
            
            	Select max chromatic dispersion (in units of ps/nm)
            	**type**\: int
            
            	**range:** \-70000..70000
            
            .. attribute:: optics_cd_min
            
            	Select min chromatic dispersion (in units of ps/nm)
            	**type**\: int
            
            	**range:** \-70000..70000
            
            .. attribute:: optics_description
            
            	Configure optics port description 
            	**type**\: str
            
            	**range:** 0..255
            
            .. attribute:: optics_dgd_high_threshold
            
            	Select DGD high threshold(in units of 0.1ps)
            	**type**\: int
            
            	**range:** 0..18000
            
            .. attribute:: optics_dwdm_carrier
            
            	Configure optics DWDM Carrier
            	**type**\: :py:class:`OpticsDwdmCarrier <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier>`
            
            .. attribute:: optics_lbc_high_threshold
            
            	Select power level (in units of percentage)
            	**type**\: int
            
            	**range:** 0..100
            
            .. attribute:: optics_loopback
            
            	Configure optics loopback mode 
            	**type**\: :py:class:`OpticsLoopbackEnum <ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg.OpticsLoopbackEnum>`
            
            .. attribute:: optics_network_srlgs
            
            	Configure Network srlgs
            	**type**\: :py:class:`OpticsNetworkSrlgs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs>`
            
            .. attribute:: optics_osnr_low_threshold
            
            	Select OSNR low threshold(in units of 0.01db)
            	**type**\: int
            
            	**range:** 0..4000
            
            .. attribute:: optics_performance_monitoring
            
            	Select Performance Monitoring as Enable or Disable
            	**type**\: bool
            
            .. attribute:: optics_transmit_power
            
            	Select power level (in units of 0.1dBm)
            	**type**\: int
            
            	**range:** \-190..15
            
            .. attribute:: optics_transmit_shutdown
            
            	Configure optics transmit laser shutdown 
            	**type**\: bool
            
            .. attribute:: rx_thresholds
            
            	Configure Rx threshold
            	**type**\: :py:class:`RxThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds>`
            
            .. attribute:: tx_thresholds
            
            	Configure Tx threshold
            	**type**\: :py:class:`TxThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds>`
            
            

            """

            _prefix = 'controller-optics-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.optics_cd_high_threshold = None
                self.optics_cd_low_threshold = None
                self.optics_cd_max = None
                self.optics_cd_min = None
                self.optics_description = None
                self.optics_dgd_high_threshold = None
                self.optics_dwdm_carrier = None
                self.optics_lbc_high_threshold = None
                self.optics_loopback = None
                self.optics_network_srlgs = InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs()
                self.optics_network_srlgs.parent = self
                self.optics_osnr_low_threshold = None
                self.optics_performance_monitoring = None
                self.optics_transmit_power = None
                self.optics_transmit_shutdown = None
                self.rx_thresholds = InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds()
                self.rx_thresholds.parent = self
                self.tx_thresholds = InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds()
                self.tx_thresholds.parent = self


            class RxThresholds(object):
                """
                Configure Rx threshold
                
                .. attribute:: rx_threshold
                
                	Optics RX Low or high threshold configuration
                	**type**\: list of :py:class:`RxThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rx_threshold = YList()
                    self.rx_threshold.parent = self
                    self.rx_threshold.name = 'rx_threshold'


                class RxThreshold(object):
                    """
                    Optics RX Low or high threshold configuration
                    
                    .. attribute:: rx_threshold_type  <key>
                    
                    	Low or high rx threshold
                    	**type**\: :py:class:`ThresholdEnum <ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg.ThresholdEnum>`
                    
                    .. attribute:: rx_threshold
                    
                    	Select power level (in units of 0.1dBm)
                    	**type**\: int
                    
                    	**range:** \-400..300
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.rx_threshold_type = None
                        self.rx_threshold = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.rx_threshold_type is None:
                            raise YPYModelError('Key property rx_threshold_type is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:rx-threshold[Cisco-IOS-XR-controller-optics-cfg:rx-threshold-type = ' + str(self.rx_threshold_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.rx_threshold_type is not None:
                            return True

                        if self.rx_threshold is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:rx-thresholds'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rx_threshold is not None:
                        for child_ref in self.rx_threshold:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds']['meta_info']


            class OpticsNetworkSrlgs(object):
                """
                Configure Network srlgs
                
                .. attribute:: optics_network_srlg
                
                	Configure network srlg sets
                	**type**\: list of :py:class:`OpticsNetworkSrlg <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.optics_network_srlg = YList()
                    self.optics_network_srlg.parent = self
                    self.optics_network_srlg.name = 'optics_network_srlg'


                class OpticsNetworkSrlg(object):
                    """
                    Configure network srlg sets
                    
                    .. attribute:: set_id  <key>
                    
                    	Set index
                    	**type**\: int
                    
                    	**range:** 1..17
                    
                    .. attribute:: srlg1
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg2
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg3
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg4
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg5
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg6
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.set_id = None
                        self.srlg1 = None
                        self.srlg2 = None
                        self.srlg3 = None
                        self.srlg4 = None
                        self.srlg5 = None
                        self.srlg6 = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.set_id is None:
                            raise YPYModelError('Key property set_id is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:optics-network-srlg[Cisco-IOS-XR-controller-optics-cfg:set-id = ' + str(self.set_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.set_id is not None:
                            return True

                        if self.srlg1 is not None:
                            return True

                        if self.srlg2 is not None:
                            return True

                        if self.srlg3 is not None:
                            return True

                        if self.srlg4 is not None:
                            return True

                        if self.srlg5 is not None:
                            return True

                        if self.srlg6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:optics-network-srlgs'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.optics_network_srlg is not None:
                        for child_ref in self.optics_network_srlg:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs']['meta_info']


            class OpticsDwdmCarrier(object):
                """
                Configure optics DWDM Carrier
                
                .. attribute:: grid_type
                
                	DWDM Channel Grid Type
                	**type**\: :py:class:`OpticsDwdmCarrierGridEnum <ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg.OpticsDwdmCarrierGridEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: param_type
                
                	DWDM Channel Parameter Type ITU\-Channel or Frequency or Wavelength
                	**type**\: :py:class:`OpticsDwdmCarrierParamEnum <ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg.OpticsDwdmCarrierParamEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: param_value
                
                	Type ITU\-Channel Range 1\-100, Frequency Range 19115\-19610, Wavelength Range 1528773\-1568362, 100MHz Frequency Range 1911500\-1961000
                	**type**\: int
                
                	**range:** 1..1961000
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.grid_type = None
                    self.param_type = None
                    self.param_value = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:optics-dwdm-carrier'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.grid_type is not None:
                        return True

                    if self.param_type is not None:
                        return True

                    if self.param_value is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier']['meta_info']


            class TxThresholds(object):
                """
                Configure Tx threshold
                
                .. attribute:: tx_threshold
                
                	Optics TX Low or high threshold configuration
                	**type**\: list of :py:class:`TxThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.tx_threshold = YList()
                    self.tx_threshold.parent = self
                    self.tx_threshold.name = 'tx_threshold'


                class TxThreshold(object):
                    """
                    Optics TX Low or high threshold configuration
                    
                    .. attribute:: tx_threshold_type  <key>
                    
                    	Low or high tx threshold
                    	**type**\: :py:class:`ThresholdEnum <ydk.models.controller.Cisco_IOS_XR_controller_optics_cfg.ThresholdEnum>`
                    
                    .. attribute:: tx_threshold
                    
                    	Select power level (in units of 0.1dBm)
                    	**type**\: int
                    
                    	**range:** \-400..300
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.tx_threshold_type = None
                        self.tx_threshold = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.tx_threshold_type is None:
                            raise YPYModelError('Key property tx_threshold_type is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:tx-threshold[Cisco-IOS-XR-controller-optics-cfg:tx-threshold-type = ' + str(self.tx_threshold_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.tx_threshold_type is not None:
                            return True

                        if self.tx_threshold is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:tx-thresholds'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.tx_threshold is not None:
                        for child_ref in self.tx_threshold:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-controller-optics-cfg:optics'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.optics_cd_high_threshold is not None:
                    return True

                if self.optics_cd_low_threshold is not None:
                    return True

                if self.optics_cd_max is not None:
                    return True

                if self.optics_cd_min is not None:
                    return True

                if self.optics_description is not None:
                    return True

                if self.optics_dgd_high_threshold is not None:
                    return True

                if self.optics_dwdm_carrier is not None and self.optics_dwdm_carrier._has_data():
                    return True

                if self.optics_lbc_high_threshold is not None:
                    return True

                if self.optics_loopback is not None:
                    return True

                if self.optics_network_srlgs is not None and self.optics_network_srlgs._has_data():
                    return True

                if self.optics_osnr_low_threshold is not None:
                    return True

                if self.optics_performance_monitoring is not None:
                    return True

                if self.optics_transmit_power is not None:
                    return True

                if self.optics_transmit_shutdown is not None:
                    return True

                if self.rx_thresholds is not None and self.rx_thresholds._has_data():
                    return True

                if self.tx_thresholds is not None and self.tx_thresholds._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Optics']['meta_info']


        class Otu(object):
            """
            OTU port controller configuration
            
            .. attribute:: fec
            
            	Configure forward error correction
            	**type**\: :py:class:`OtuForwardErrorCorrectionEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtuForwardErrorCorrectionEnum>`
            
            .. attribute:: gcc
            
            	General Communication Channel configuration
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: loopback
            
            	Type of Loopback
            	**type**\: :py:class:`OtnLoopbackEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnLoopbackEnum>`
            
            .. attribute:: network_srlgs
            
            	Configure Network srlgs
            	**type**\: :py:class:`NetworkSrlgs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs>`
            
            .. attribute:: otn_expected_tti
            
            	Configure OTN Expected TTI value for Full ASCII/HEX
            	**type**\: :py:class:`OtnExpectedTti <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti>`
            
            .. attribute:: otn_expected_ttisapi
            
            	Configure OTN Expected TTI value for SAPI configs
            	**type**\: :py:class:`OtnExpectedTtisapi <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi>`
            
            .. attribute:: otn_expected_ttitcmdapi
            
            	Configure OTN Expected TTI value for DAPI configs
            	**type**\: :py:class:`OtnExpectedTtitcmdapi <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi>`
            
            .. attribute:: otn_expected_ttitcmos
            
            	Configure OTN Expected TTI value for OS config
            	**type**\: :py:class:`OtnExpectedTtitcmos <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos>`
            
            .. attribute:: otn_send_tti
            
            	Configure OTN Send TTI value for Full ASCII/HEX
            	**type**\: :py:class:`OtnSendTti <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti>`
            
            .. attribute:: otn_send_ttisapi
            
            	Configure OTN Send TTI value for SAPI configs
            	**type**\: :py:class:`OtnSendTtisapi <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi>`
            
            .. attribute:: otn_send_ttitcmdapi
            
            	Configure OTN Send TTI value for DAPI configs
            	**type**\: :py:class:`OtnSendTtitcmdapi <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi>`
            
            .. attribute:: otn_send_ttitcmos
            
            	Configure OTN Send TTI value for OS config
            	**type**\: :py:class:`OtnSendTtitcmos <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos>`
            
            .. attribute:: performance_monitoring
            
            	Configure performance monitoring
            	**type**\: :py:class:`OtnPerMonEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnPerMonEnum>`
            
            .. attribute:: proactive_protection
            
            	Configure Proactive Protection
            	**type**\: :py:class:`ProactiveProtection <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection>`
            
            .. attribute:: sd
            
            	Signal degrade threshold
            	**type**\: int
            
            	**range:** 5..9
            
            .. attribute:: secondary_admin_state
            
            	Configure secondary admin state 
            	**type**\: :py:class:`OtnSecAdminStateEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnSecAdminStateEnum>`
            
            .. attribute:: sf
            
            	Signal failure threshold
            	**type**\: int
            
            	**range:** 5..9
            
            

            """

            _prefix = 'controller-otu-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.fec = None
                self.gcc = None
                self.loopback = None
                self.network_srlgs = InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs()
                self.network_srlgs.parent = self
                self.otn_expected_tti = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti()
                self.otn_expected_tti.parent = self
                self.otn_expected_ttisapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi()
                self.otn_expected_ttisapi.parent = self
                self.otn_expected_ttitcmdapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi()
                self.otn_expected_ttitcmdapi.parent = self
                self.otn_expected_ttitcmos = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos()
                self.otn_expected_ttitcmos.parent = self
                self.otn_send_tti = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti()
                self.otn_send_tti.parent = self
                self.otn_send_ttisapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi()
                self.otn_send_ttisapi.parent = self
                self.otn_send_ttitcmdapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi()
                self.otn_send_ttitcmdapi.parent = self
                self.otn_send_ttitcmos = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos()
                self.otn_send_ttitcmos.parent = self
                self.performance_monitoring = None
                self.proactive_protection = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection()
                self.proactive_protection.parent = self
                self.sd = None
                self.secondary_admin_state = None
                self.sf = None


            class OtnSendTtitcmos(object):
                """
                Configure OTN Send TTI value for OS config
                
                .. attribute:: osascii_string
                
                	OS ASCII text (Max 32 characters)
                	**type**\: str
                
                	**range:** 0..32
                
                .. attribute:: oshex_string
                
                	OS HEX text (Max 64 characters)
                	**type**\: str
                
                	**range:** 0..64
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnSendTtiTypeOsEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeOsEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.osascii_string = None
                    self.oshex_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-send-ttitcmos'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.osascii_string is not None:
                        return True

                    if self.oshex_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos']['meta_info']


            class OtnSendTtitcmdapi(object):
                """
                Configure OTN Send TTI value for DAPI configs
                
                .. attribute:: dapi_ascii_string
                
                	DAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**range:** 0..14
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnSendTtiTypeDapiEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeDapiEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dapi_ascii_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-send-ttitcmdapi'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dapi_ascii_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi']['meta_info']


            class OtnExpectedTtisapi(object):
                """
                Configure OTN Expected TTI value for SAPI
                configs
                
                .. attribute:: sapi_ascii_string
                
                	SAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**range:** 0..14
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnExpTtiTypeSapiEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeSapiEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sapi_ascii_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-expected-ttisapi'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sapi_ascii_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi']['meta_info']


            class ProactiveProtection(object):
                """
                Configure Proactive Protection
                
                .. attribute:: revert_threshold
                
                	Proactive Protection Threshold
                	**type**\: :py:class:`RevertThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold>`
                
                .. attribute:: revert_window
                
                	Proactive Protection Window
                	**type**\: :py:class:`RevertWindow <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow>`
                
                .. attribute:: status
                
                	Enable Proactive Protection
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: trigger_threshold
                
                	Proactive Protection Threshold
                	**type**\: :py:class:`TriggerThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold>`
                
                .. attribute:: trigger_window
                
                	Proactive Protection Window
                	**type**\: :py:class:`TriggerWindow <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.revert_threshold = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold()
                    self.revert_threshold.parent = self
                    self.revert_window = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow()
                    self.revert_window.parent = self
                    self.status = None
                    self.trigger_threshold = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold()
                    self.trigger_threshold.parent = self
                    self.trigger_window = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow()
                    self.trigger_window.parent = self


                class TriggerThreshold(object):
                    """
                    Proactive Protection Threshold
                    
                    .. attribute:: coefficient
                    
                    	Bit error rate coefficient
                    	**type**\: int
                    
                    	**range:** 1..9
                    
                    .. attribute:: enable
                    
                    	Proactive Protection supported
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: power
                    
                    	Bit error rate power
                    	**type**\: int
                    
                    	**range:** 3..9
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.coefficient = None
                        self.enable = None
                        self.power = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:trigger-threshold'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.coefficient is not None:
                            return True

                        if self.enable is not None:
                            return True

                        if self.power is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold']['meta_info']


                class RevertWindow(object):
                    """
                    Proactive Protection Window
                    
                    .. attribute:: enable
                    
                    	Enable Proactive Protection
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: value
                    
                    	Integration window for FRR trigger in MS
                    	**type**\: int
                    
                    	**range:** 2000..10000
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.enable = None
                        self.value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:revert-window'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        if self.value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow']['meta_info']


                class TriggerWindow(object):
                    """
                    Proactive Protection Window
                    
                    .. attribute:: enable
                    
                    	Enable Proactive Protection
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: value
                    
                    	Integration window for FRR trigger in MS
                    	**type**\: int
                    
                    	**range:** 10..10000
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.enable = None
                        self.value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:trigger-window'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        if self.value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow']['meta_info']


                class RevertThreshold(object):
                    """
                    Proactive Protection Threshold
                    
                    .. attribute:: coefficient
                    
                    	Bit error rate coefficient
                    	**type**\: int
                    
                    	**range:** 1..9
                    
                    .. attribute:: enable
                    
                    	Proactive Protection supported
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: power
                    
                    	Bit error rate power
                    	**type**\: int
                    
                    	**range:** 4..10
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.coefficient = None
                        self.enable = None
                        self.power = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:revert-threshold'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.coefficient is not None:
                            return True

                        if self.enable is not None:
                            return True

                        if self.power is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:proactive-protection'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.revert_threshold is not None and self.revert_threshold._has_data():
                        return True

                    if self.revert_window is not None and self.revert_window._has_data():
                        return True

                    if self.status is not None:
                        return True

                    if self.trigger_threshold is not None and self.trigger_threshold._has_data():
                        return True

                    if self.trigger_window is not None and self.trigger_window._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection']['meta_info']


            class NetworkSrlgs(object):
                """
                Configure Network srlgs
                
                .. attribute:: network_srlg
                
                	Configure network srlg sets
                	**type**\: list of :py:class:`NetworkSrlg <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.network_srlg = YList()
                    self.network_srlg.parent = self
                    self.network_srlg.name = 'network_srlg'


                class NetworkSrlg(object):
                    """
                    Configure network srlg sets
                    
                    .. attribute:: set_id  <key>
                    
                    	Set index
                    	**type**\: int
                    
                    	**range:** 1..17
                    
                    .. attribute:: srlg1
                    
                    	First value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg2
                    
                    	Second value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg3
                    
                    	Third value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg4
                    
                    	Forth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg5
                    
                    	Fifth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg6
                    
                    	Sixth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.set_id = None
                        self.srlg1 = None
                        self.srlg2 = None
                        self.srlg3 = None
                        self.srlg4 = None
                        self.srlg5 = None
                        self.srlg6 = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.set_id is None:
                            raise YPYModelError('Key property set_id is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:network-srlg[Cisco-IOS-XR-controller-otu-cfg:set-id = ' + str(self.set_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.set_id is not None:
                            return True

                        if self.srlg1 is not None:
                            return True

                        if self.srlg2 is not None:
                            return True

                        if self.srlg3 is not None:
                            return True

                        if self.srlg4 is not None:
                            return True

                        if self.srlg5 is not None:
                            return True

                        if self.srlg6 is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:network-srlgs'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.network_srlg is not None:
                        for child_ref in self.network_srlg:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs']['meta_info']


            class OtnSendTti(object):
                """
                Configure OTN Send TTI value for Full ASCII/HEX
                
                .. attribute:: full_ascii_string
                
                	Full ASCII text (Max 64 characters)
                	**type**\: str
                
                	**range:** 0..64
                
                .. attribute:: hex_string
                
                	Hex nibbles (Max 128 \- The string length should be an even number)
                	**type**\: str
                
                	**range:** 0..128
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnSendTtiTypeFullEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeFullEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.full_ascii_string = None
                    self.hex_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-send-tti'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.full_ascii_string is not None:
                        return True

                    if self.hex_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti']['meta_info']


            class OtnExpectedTtitcmdapi(object):
                """
                Configure OTN Expected TTI value for DAPI
                configs
                
                .. attribute:: dapi_ascii_string
                
                	DAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**range:** 0..14
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnExpTtiTypeDapiEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeDapiEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dapi_ascii_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-expected-ttitcmdapi'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dapi_ascii_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi']['meta_info']


            class OtnSendTtisapi(object):
                """
                Configure OTN Send TTI value for SAPI configs
                
                .. attribute:: sapi_ascii_string
                
                	SAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**range:** 0..14
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnSendTtiTypeSapiEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeSapiEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sapi_ascii_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-send-ttisapi'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sapi_ascii_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi']['meta_info']


            class OtnExpectedTtitcmos(object):
                """
                Configure OTN Expected TTI value for OS config
                
                .. attribute:: osascii_string
                
                	OS ASCII text (Max 32 characters)
                	**type**\: str
                
                	**range:** 0..32
                
                .. attribute:: oshex_string
                
                	OS HEX text (Max 64 characters)
                	**type**\: str
                
                	**range:** 0..64
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnExpTtiTypeOsEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeOsEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.osascii_string = None
                    self.oshex_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-expected-ttitcmos'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.osascii_string is not None:
                        return True

                    if self.oshex_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos']['meta_info']


            class OtnExpectedTti(object):
                """
                Configure OTN Expected TTI value for Full
                ASCII/HEX
                
                .. attribute:: full_ascii_string
                
                	Full ASCII text (Max 64 characters)
                	**type**\: str
                
                	**range:** 0..64
                
                .. attribute:: hex_string
                
                	Hex nibbles (Max 128 \- The string length should be an even number)
                	**type**\: str
                
                	**range:** 0..128
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\: :py:class:`OtnExpTtiTypeFullEnum <ydk.models.controller.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeFullEnum>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.full_ascii_string = None
                    self.hex_string = None
                    self.string_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otn-expected-tti'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.full_ascii_string is not None:
                        return True

                    if self.hex_string is not None:
                        return True

                    if self.string_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-controller-otu-cfg:otu'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.fec is not None:
                    return True

                if self.gcc is not None:
                    return True

                if self.loopback is not None:
                    return True

                if self.network_srlgs is not None and self.network_srlgs._has_data():
                    return True

                if self.otn_expected_tti is not None and self.otn_expected_tti._has_data():
                    return True

                if self.otn_expected_ttisapi is not None and self.otn_expected_ttisapi._has_data():
                    return True

                if self.otn_expected_ttitcmdapi is not None and self.otn_expected_ttitcmdapi._has_data():
                    return True

                if self.otn_expected_ttitcmos is not None and self.otn_expected_ttitcmos._has_data():
                    return True

                if self.otn_send_tti is not None and self.otn_send_tti._has_data():
                    return True

                if self.otn_send_ttisapi is not None and self.otn_send_ttisapi._has_data():
                    return True

                if self.otn_send_ttitcmdapi is not None and self.otn_send_ttitcmdapi._has_data():
                    return True

                if self.otn_send_ttitcmos is not None and self.otn_send_ttitcmos._has_data():
                    return True

                if self.performance_monitoring is not None:
                    return True

                if self.proactive_protection is not None and self.proactive_protection._has_data():
                    return True

                if self.sd is not None:
                    return True

                if self.secondary_admin_state is not None:
                    return True

                if self.sf is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Otu']['meta_info']


        class Ethernet(object):
            """
            Ether specific interface configuration
            
            .. attribute:: auto_negotiation
            
            	Link auto\-negotiation
            	**type**\: :py:class:`EthernetAutoNegotiationEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetAutoNegotiationEnum>`
            
            .. attribute:: carrier_delay
            
            	Set the carrier transition delay on an interface in msecs
            	**type**\: :py:class:`CarrierDelay <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay>`
            
            .. attribute:: duplex
            
            	Configure duplex operational mode
            	**type**\: :py:class:`EthernetDuplexEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetDuplexEnum>`
            
            .. attribute:: flow_control
            
            	Configure flow\-control mode
            	**type**\: :py:class:`EthernetFlowCtrlEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetFlowCtrlEnum>`
            
            .. attribute:: forward_error_correction
            
            	Forward Error Correction
            	**type**\: :py:class:`EthernetFecEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetFecEnum>`
            
            .. attribute:: inter_packet_gap
            
            	Inter\-packet gap
            	**type**\: :py:class:`EthernetIpgEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetIpgEnum>`
            
            .. attribute:: loopback
            
            	Configure loopback mode
            	**type**\: :py:class:`EthernetLoopbackEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetLoopbackEnum>`
            
            .. attribute:: signal_degrade_bit_error_rate
            
            	Signal Degrade Bit Error Rate handling options
            	**type**\: :py:class:`SignalDegradeBitErrorRate <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate>`
            
            .. attribute:: signal_fail_bit_error_rate
            
            	Signal Fail Bit Error Rate handling options
            	**type**\: :py:class:`SignalFailBitErrorRate <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate>`
            
            .. attribute:: speed
            
            	Set the ethernet speed on an interface
            	**type**\: :py:class:`EthernetSpeedEnum <ydk.models.drivers.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetSpeedEnum>`
            
            

            """

            _prefix = 'drivers-media-eth-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.auto_negotiation = None
                self.carrier_delay = InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay()
                self.carrier_delay.parent = self
                self.duplex = None
                self.flow_control = None
                self.forward_error_correction = None
                self.inter_packet_gap = None
                self.loopback = None
                self.signal_degrade_bit_error_rate = InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate()
                self.signal_degrade_bit_error_rate.parent = self
                self.signal_fail_bit_error_rate = InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate()
                self.signal_fail_bit_error_rate.parent = self
                self.speed = None


            class SignalFailBitErrorRate(object):
                """
                Signal Fail Bit Error Rate handling options
                
                .. attribute:: signal_fail_report_disable
                
                	Disable generation of an alarm whenever the SF\-BER threshold is crossed for this interface
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: signal_fail_threshold
                
                	Set the Signal Fail bit error rate threshold on an interface to a value of 10e\-x, where x is the value passed in here
                	**type**\: int
                
                	**range:** 4..12
                
                .. attribute:: signal_remote_fault
                
                	Signal a remote fault to the peer device whenever the link is taken down due to crossing the SF\-BER threshold
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.signal_fail_report_disable = None
                    self.signal_fail_threshold = None
                    self.signal_remote_fault = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-drivers-media-eth-cfg:signal-fail-bit-error-rate'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.signal_fail_report_disable is not None:
                        return True

                    if self.signal_fail_threshold is not None:
                        return True

                    if self.signal_remote_fault is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate']['meta_info']


            class SignalDegradeBitErrorRate(object):
                """
                Signal Degrade Bit Error Rate handling options
                
                .. attribute:: signal_degrade_report
                
                	Generate an alarm whenever the SD\-BER threshold is crossed for this interface
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: signal_degrade_threshold
                
                	Set the Signal Degrade bit error rate threshold on an interface to a value of 10e\-x, where x is the value passed in here
                	**type**\: int
                
                	**range:** 3..12
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.signal_degrade_report = None
                    self.signal_degrade_threshold = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-drivers-media-eth-cfg:signal-degrade-bit-error-rate'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.signal_degrade_report is not None:
                        return True

                    if self.signal_degrade_threshold is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate']['meta_info']


            class CarrierDelay(object):
                """
                Set the carrier transition delay on an
                interface in msecs
                
                .. attribute:: carrier_delay_down
                
                	Carrier Delay (down) in msecs
                	**type**\: int
                
                	**range:** 0..2147483647
                
                .. attribute:: carrier_delay_up
                
                	Carrier Delay (up) in msecs
                	**type**\: int
                
                	**range:** 0..2147483647
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.carrier_delay_down = None
                    self.carrier_delay_up = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-drivers-media-eth-cfg:carrier-delay'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.carrier_delay_down is not None:
                        return True

                    if self.carrier_delay_up is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-drivers-media-eth-cfg:ethernet'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.auto_negotiation is not None:
                    return True

                if self.carrier_delay is not None and self.carrier_delay._has_data():
                    return True

                if self.duplex is not None:
                    return True

                if self.flow_control is not None:
                    return True

                if self.forward_error_correction is not None:
                    return True

                if self.inter_packet_gap is not None:
                    return True

                if self.loopback is not None:
                    return True

                if self.signal_degrade_bit_error_rate is not None and self.signal_degrade_bit_error_rate._has_data():
                    return True

                if self.signal_fail_bit_error_rate is not None and self.signal_fail_bit_error_rate._has_data():
                    return True

                if self.speed is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ethernet']['meta_info']


        class VlanSubConfiguration(object):
            """
            IEEE 802.1Q VLAN subinterface configuration
            
            .. attribute:: vlan_identifier
            
            	The VLAN tag stack associated with this sub\-interface
            	**type**\: :py:class:`VlanIdentifier <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.vlan_identifier = None


            class VlanIdentifier(object):
                """
                The VLAN tag stack associated with this
                sub\-interface.
                
                .. attribute:: first_tag
                
                	First (outermost) VLAN tag value
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: second_tag
                
                	Second VLAN tag value. The any value may only be used for Layer 2 subinterfaces
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrNullEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNullEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 0..4094
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: vlan_type
                
                	Whether this sub\-interface is dot1ad or dot1Q
                	**type**\: :py:class:`VlanEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.first_tag = None
                    self.second_tag = None
                    self.vlan_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-identifier'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.first_tag is not None:
                        return True

                    if self.second_tag is not None:
                        return True

                    if self.vlan_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.vlan_identifier is not None and self.vlan_identifier._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration']['meta_info']


        class EthernetService(object):
            """
            Ethernet service configuration
            
            .. attribute:: encapsulation
            
            	The encapsulation of this Ethernet service
            	**type**\: :py:class:`Encapsulation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation>`
            
            .. attribute:: local_traffic_default_encapsulation
            
            	The default encapsulation to be used for locally\-sourced packets
            	**type**\: :py:class:`LocalTrafficDefaultEncapsulation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation>`
            
            .. attribute:: rewrite
            
            	The rewrite operation for the Ethernet service
            	**type**\: :py:class:`Rewrite <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.encapsulation = None
                self.local_traffic_default_encapsulation = None
                self.rewrite = None


            class LocalTrafficDefaultEncapsulation(object):
                """
                The default encapsulation to be used for
                locally\-sourced packets
                
                .. attribute:: inner_vlan_id
                
                	Optional VLAN Id for inner Dot1Q tag
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_tag_type
                
                	Type of outer tag
                	**type**\: :py:class:`VlanEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_vlan_id
                
                	VLAN id for outer tag
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.inner_vlan_id = None
                    self.outer_tag_type = None
                    self.outer_vlan_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:local-traffic-default-encapsulation'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.inner_vlan_id is not None:
                        return True

                    if self.outer_tag_type is not None:
                        return True

                    if self.outer_vlan_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation']['meta_info']


            class Encapsulation(object):
                """
                The encapsulation of this Ethernet service
                
                .. attribute:: additional_range1_high
                
                	High value of first additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range1_low
                
                	Low value of first additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range2_high
                
                	High value of second additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range2_low
                
                	Low value of second additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range3_high
                
                	High value of third additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range3_low
                
                	Low value of third additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range4_high
                
                	High value of forth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range4_low
                
                	Low value of forth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range5_high
                
                	High value of fifth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range5_low
                
                	Low value of fifth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range6_high
                
                	High value of sixth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range6_low
                
                	Low value of sixth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range7_high
                
                	High value of seventh additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range7_low
                
                	Low value of seventh additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range8_high
                
                	High value of eighth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range8_low
                
                	Low value of eighth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: exact
                
                	Only match packets with no more tags than explicitly matched
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: ingress_destination_mac
                
                	Destination MAC address to match on egress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: ingress_source_mac
                
                	Source MAC address to match on ingress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_class_of_service
                
                	Value to match against Class Of Service bits for inner tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_range1_high
                
                	High value of first range for inner tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_range1_low
                
                	Low value of first range for inner tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrAnyEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAnyEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..4096
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_tag_type
                
                	Type of tag for inner match (if present)
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_class_of_service
                
                	Value to match against Class Of Service bits for outer tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_range1_high
                
                	High value of first range for outer tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrNativeEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNativeEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65535
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_range1_low
                
                	Low value of first range for outer tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrAnyEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAnyEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..4096
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_tag_type
                
                	Whether to match all unmatched packets, untagged packets or tagged packets, and if matching tagged packets, the outer tag type to match
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: payload_ethertype_match
                
                	Which payload ethertype values to match
                	**type**\: :py:class:`EthertypeMatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.EthertypeMatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.additional_range1_high = None
                    self.additional_range1_low = None
                    self.additional_range2_high = None
                    self.additional_range2_low = None
                    self.additional_range3_high = None
                    self.additional_range3_low = None
                    self.additional_range4_high = None
                    self.additional_range4_low = None
                    self.additional_range5_high = None
                    self.additional_range5_low = None
                    self.additional_range6_high = None
                    self.additional_range6_low = None
                    self.additional_range7_high = None
                    self.additional_range7_low = None
                    self.additional_range8_high = None
                    self.additional_range8_low = None
                    self.exact = None
                    self.ingress_destination_mac = None
                    self.ingress_source_mac = None
                    self.inner_class_of_service = None
                    self.inner_range1_high = None
                    self.inner_range1_low = None
                    self.inner_tag_type = None
                    self.outer_class_of_service = None
                    self.outer_range1_high = None
                    self.outer_range1_low = None
                    self.outer_tag_type = None
                    self.payload_ethertype_match = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:encapsulation'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.additional_range1_high is not None:
                        return True

                    if self.additional_range1_low is not None:
                        return True

                    if self.additional_range2_high is not None:
                        return True

                    if self.additional_range2_low is not None:
                        return True

                    if self.additional_range3_high is not None:
                        return True

                    if self.additional_range3_low is not None:
                        return True

                    if self.additional_range4_high is not None:
                        return True

                    if self.additional_range4_low is not None:
                        return True

                    if self.additional_range5_high is not None:
                        return True

                    if self.additional_range5_low is not None:
                        return True

                    if self.additional_range6_high is not None:
                        return True

                    if self.additional_range6_low is not None:
                        return True

                    if self.additional_range7_high is not None:
                        return True

                    if self.additional_range7_low is not None:
                        return True

                    if self.additional_range8_high is not None:
                        return True

                    if self.additional_range8_low is not None:
                        return True

                    if self.exact is not None:
                        return True

                    if self.ingress_destination_mac is not None:
                        return True

                    if self.ingress_source_mac is not None:
                        return True

                    if self.inner_class_of_service is not None:
                        return True

                    if self.inner_range1_high is not None:
                        return True

                    if self.inner_range1_low is not None:
                        return True

                    if self.inner_tag_type is not None:
                        return True

                    if self.outer_class_of_service is not None:
                        return True

                    if self.outer_range1_high is not None:
                        return True

                    if self.outer_range1_low is not None:
                        return True

                    if self.outer_tag_type is not None:
                        return True

                    if self.payload_ethertype_match is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation']['meta_info']


            class Rewrite(object):
                """
                The rewrite operation for the Ethernet service
                
                .. attribute:: inner_tag_type
                
                	Type of innermost tag to be pushed
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_tag_value
                
                	VLAN Id of innermost tag to be pushed
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_tag_type
                
                	Type of outermost tag to be pushed
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_tag_value
                
                	VLAN Id of outermost tag to be pushed
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: rewrite_type
                
                	The type of rewrite to perform
                	**type**\: :py:class:`RewriteEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.RewriteEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.inner_tag_type = None
                    self.inner_tag_value = None
                    self.outer_tag_type = None
                    self.outer_tag_value = None
                    self.rewrite_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:rewrite'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.inner_tag_type is not None:
                        return True

                    if self.inner_tag_value is not None:
                        return True

                    if self.outer_tag_type is not None:
                        return True

                    if self.outer_tag_value is not None:
                        return True

                    if self.rewrite_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.encapsulation is not None and self.encapsulation._has_data():
                    return True

                if self.local_traffic_default_encapsulation is not None and self.local_traffic_default_encapsulation._has_data():
                    return True

                if self.rewrite is not None and self.rewrite._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetService']['meta_info']


        class EthernetBng(object):
            """
            Ethernet Infra BNG specific configuration
            
            .. attribute:: ambiguous_encapsulation
            
            	L3 Ambiguous encapsulation
            	**type**\: :py:class:`AmbiguousEncapsulation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ambiguous_encapsulation = None


            class AmbiguousEncapsulation(object):
                """
                L3 Ambiguous encapsulation
                
                .. attribute:: additional_range1_high
                
                	High value of first additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range1_low
                
                	Low value of first additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range2_high
                
                	High value of second additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range2_low
                
                	Low value of second additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range3_high
                
                	High value of third additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range3_low
                
                	Low value of third additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range4_high
                
                	High value of forth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range4_low
                
                	Low value of forth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range5_high
                
                	High value of fifth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range5_low
                
                	Low value of fifth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range6_high
                
                	High value of sixth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range6_low
                
                	Low value of sixth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range7_high
                
                	High value of seventh additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range7_low
                
                	Low value of seventh additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range8_high
                
                	High value of eighth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: additional_range8_low
                
                	Low value of eighth additional range for tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrCvpEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvpEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65534
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: exact
                
                	Only match packets with no more tags than explicitly matched
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: ingress_destination_mac
                
                	Destination MAC address to match on egress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: ingress_source_mac
                
                	Source MAC address to match on ingress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_class_of_service
                
                	Value to match against Class Of Service bits for inner tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_range1_high
                
                	High value of first range for inner tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_range1_low
                
                	Low value of first range for inner tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrAnyEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAnyEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..4096
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: inner_tag_type
                
                	Type of tag for inner match (if present)
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_class_of_service
                
                	Value to match against Class Of Service bits for outer tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_range1_high
                
                	High value of first range for outer tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrNativeEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNativeEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..65535
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_range1_low
                
                	Low value of first range for outer tag match
                	**type**\: one of the below types:
                
                	**type**\: :py:class:`VlanTagOrAnyEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAnyEnum>`
                
                
                ----
                	**type**\: int
                
                	**range:** 1..4096
                
                
                ----
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: outer_tag_type
                
                	Whether to match all unmatched packets, untagged packets or tagged packets, and if matching tagged packets, the outer tag type to match
                	**type**\: :py:class:`MatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.MatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: payload_ethertype_match
                
                	Which payload ethertype values to match
                	**type**\: :py:class:`EthertypeMatchEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.EthertypeMatchEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.additional_range1_high = None
                    self.additional_range1_low = None
                    self.additional_range2_high = None
                    self.additional_range2_low = None
                    self.additional_range3_high = None
                    self.additional_range3_low = None
                    self.additional_range4_high = None
                    self.additional_range4_low = None
                    self.additional_range5_high = None
                    self.additional_range5_low = None
                    self.additional_range6_high = None
                    self.additional_range6_low = None
                    self.additional_range7_high = None
                    self.additional_range7_low = None
                    self.additional_range8_high = None
                    self.additional_range8_low = None
                    self.exact = None
                    self.ingress_destination_mac = None
                    self.ingress_source_mac = None
                    self.inner_class_of_service = None
                    self.inner_range1_high = None
                    self.inner_range1_low = None
                    self.inner_tag_type = None
                    self.outer_class_of_service = None
                    self.outer_range1_high = None
                    self.outer_range1_low = None
                    self.outer_tag_type = None
                    self.payload_ethertype_match = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:ambiguous-encapsulation'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.additional_range1_high is not None:
                        return True

                    if self.additional_range1_low is not None:
                        return True

                    if self.additional_range2_high is not None:
                        return True

                    if self.additional_range2_low is not None:
                        return True

                    if self.additional_range3_high is not None:
                        return True

                    if self.additional_range3_low is not None:
                        return True

                    if self.additional_range4_high is not None:
                        return True

                    if self.additional_range4_low is not None:
                        return True

                    if self.additional_range5_high is not None:
                        return True

                    if self.additional_range5_low is not None:
                        return True

                    if self.additional_range6_high is not None:
                        return True

                    if self.additional_range6_low is not None:
                        return True

                    if self.additional_range7_high is not None:
                        return True

                    if self.additional_range7_low is not None:
                        return True

                    if self.additional_range8_high is not None:
                        return True

                    if self.additional_range8_low is not None:
                        return True

                    if self.exact is not None:
                        return True

                    if self.ingress_destination_mac is not None:
                        return True

                    if self.ingress_source_mac is not None:
                        return True

                    if self.inner_class_of_service is not None:
                        return True

                    if self.inner_range1_high is not None:
                        return True

                    if self.inner_range1_low is not None:
                        return True

                    if self.inner_tag_type is not None:
                        return True

                    if self.outer_class_of_service is not None:
                        return True

                    if self.outer_range1_high is not None:
                        return True

                    if self.outer_range1_low is not None:
                        return True

                    if self.outer_tag_type is not None:
                        return True

                    if self.payload_ethertype_match is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ambiguous_encapsulation is not None and self.ambiguous_encapsulation._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetBng']['meta_info']


        class MacAccounting(object):
            """
            MAC Accounting Configuration
            
            .. attribute:: egress
            
            	Per MAC address accounting statistics
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ingress
            
            	Per MAC address accounting statistics
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.egress = None
                self.ingress = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.egress is not None:
                    return True

                if self.ingress is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MacAccounting']['meta_info']


        class EthernetFeatures(object):
            """
            Ethernet Features Configuration
            
            .. attribute:: cfm
            
            	CFM interface configuration
            	**type**\: :py:class:`Cfm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm>`
            
            .. attribute:: ether_link_oam
            
            	Ethernet Link OAM Interface Configuration
            	**type**\: :py:class:`EtherLinkOam <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam>`
            
            .. attribute:: ether_link_oam_enable
            
            	Enable Ethernet Link OAM on the interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: filtering
            
            	Ingress Ethernet frame filtering
            	**type**\: :py:class:`FilteringEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_cfg.FilteringEnum>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.cfm = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm()
                self.cfm.parent = self
                self.ether_link_oam = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam()
                self.ether_link_oam.parent = self
                self.ether_link_oam_enable = None
                self.filtering = None


            class Cfm(object):
                """
                CFM interface configuration
                
                .. attribute:: ais_up
                
                	Interface specific AIS configuration
                	**type**\: :py:class:`AisUp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp>`
                
                .. attribute:: domains
                
                	Domain\-specific interface configuration
                	**type**\: :py:class:`Domains <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains>`
                
                

                """

                _prefix = 'ethernet-cfm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ais_up = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp()
                    self.ais_up.parent = self
                    self.domains = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains()
                    self.domains.parent = self


                class Domains(object):
                    """
                    Domain\-specific interface configuration
                    
                    .. attribute:: domain
                    
                    	Configuration for a particular Maintenance Domain
                    	**type**\: list of :py:class:`Domain <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain>`
                    
                    

                    """

                    _prefix = 'ethernet-cfm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.domain = YList()
                        self.domain.parent = self
                        self.domain.name = 'domain'


                    class Domain(object):
                        """
                        Configuration for a particular Maintenance
                        Domain
                        
                        .. attribute:: domain  <key>
                        
                        	Maintenance Domain
                        	**type**\: str
                        
                        .. attribute:: mep
                        
                        	MEP Configuration
                        	**type**\: :py:class:`Mep <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep>`
                        
                        

                        """

                        _prefix = 'ethernet-cfm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.domain = None
                            self.mep = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep()
                            self.mep.parent = self


                        class Mep(object):
                            """
                            MEP Configuration
                            
                            .. attribute:: cos
                            
                            	The Class of Service bits for this MEP
                            	**type**\: int
                            
                            	**range:** 0..7
                            
                            .. attribute:: loss_measurement_counters
                            
                            	Loss\-measurement specific configuration
                            	**type**\: :py:class:`LossMeasurementCounters <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters>`
                            
                            .. attribute:: mep_properties
                            
                            	Properties for this MEP
                            	**type**\: :py:class:`MepProperties <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties>`
                            
                            .. attribute:: sla_profile_target_mep_ids
                            
                            	SLA specific configuration
                            	**type**\: :py:class:`SlaProfileTargetMepIds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds>`
                            
                            

                            """

                            _prefix = 'ethernet-cfm-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.cos = None
                                self.loss_measurement_counters = None
                                self.mep_properties = None
                                self.sla_profile_target_mep_ids = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds()
                                self.sla_profile_target_mep_ids.parent = self


                            class SlaProfileTargetMepIds(object):
                                """
                                SLA specific configuration
                                
                                .. attribute:: sla_profile_target_mac_address
                                
                                	Configuration for a particular SLA operation
                                	**type**\: list of :py:class:`SlaProfileTargetMacAddress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress>`
                                
                                .. attribute:: sla_profile_target_mep_id
                                
                                	Configuration for a particular SLA operation
                                	**type**\: list of :py:class:`SlaProfileTargetMepId <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId>`
                                
                                

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.sla_profile_target_mac_address = YList()
                                    self.sla_profile_target_mac_address.parent = self
                                    self.sla_profile_target_mac_address.name = 'sla_profile_target_mac_address'
                                    self.sla_profile_target_mep_id = YList()
                                    self.sla_profile_target_mep_id.parent = self
                                    self.sla_profile_target_mep_id.name = 'sla_profile_target_mep_id'


                                class SlaProfileTargetMepId(object):
                                    """
                                    Configuration for a particular SLA
                                    operation
                                    
                                    .. attribute:: profile  <key>
                                    
                                    	SLA profile name
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: target_mep_id  <key>
                                    
                                    	Target MEP\-ID
                                    	**type**\: int
                                    
                                    	**range:** 1..8191
                                    
                                    

                                    """

                                    _prefix = 'ethernet-cfm-cfg'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.profile = None
                                        self.target_mep_id = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.profile is None:
                                            raise YPYModelError('Key property profile is None')
                                        if self.target_mep_id is None:
                                            raise YPYModelError('Key property target_mep_id is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:sla-profile-target-mep-id[Cisco-IOS-XR-ethernet-cfm-cfg:profile = ' + str(self.profile) + '][Cisco-IOS-XR-ethernet-cfm-cfg:target-mep-id = ' + str(self.target_mep_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.profile is not None:
                                            return True

                                        if self.target_mep_id is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId']['meta_info']


                                class SlaProfileTargetMacAddress(object):
                                    """
                                    Configuration for a particular SLA
                                    operation
                                    
                                    .. attribute:: profile  <key>
                                    
                                    	SLA profile name
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: target_mac_address  <key>
                                    
                                    	Target MAC address
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                    
                                    

                                    """

                                    _prefix = 'ethernet-cfm-cfg'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.profile = None
                                        self.target_mac_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.profile is None:
                                            raise YPYModelError('Key property profile is None')
                                        if self.target_mac_address is None:
                                            raise YPYModelError('Key property target_mac_address is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:sla-profile-target-mac-address[Cisco-IOS-XR-ethernet-cfm-cfg:profile = ' + str(self.profile) + '][Cisco-IOS-XR-ethernet-cfm-cfg:target-mac-address = ' + str(self.target_mac_address) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.profile is not None:
                                            return True

                                        if self.target_mac_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:sla-profile-target-mep-ids'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.sla_profile_target_mac_address is not None:
                                        for child_ref in self.sla_profile_target_mac_address:
                                            if child_ref._has_data():
                                                return True

                                    if self.sla_profile_target_mep_id is not None:
                                        for child_ref in self.sla_profile_target_mep_id:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds']['meta_info']


                            class MepProperties(object):
                                """
                                Properties for this MEP
                                
                                .. attribute:: mep_id
                                
                                	MEP ID
                                	**type**\: int
                                
                                	**range:** 1..8191
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: service
                                
                                	Service (Maintenance Association)
                                	**type**\: str
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.mep_id = None
                                    self.service = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:mep-properties'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.mep_id is not None:
                                        return True

                                    if self.service is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties']['meta_info']


                            class LossMeasurementCounters(object):
                                """
                                Loss\-measurement specific configuration
                                
                                .. attribute:: cfg_type
                                
                                	Aggregate, List, or Range
                                	**type**\: :py:class:`CfmLmCountersCfgEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_cfg.CfmLmCountersCfgEnum>`
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos0
                                
                                	CoS bits for per\-CoS counters \- start of range or list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos1
                                
                                	CoS bits for per\-CoS counters \- end of range or list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos2
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos3
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos4
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos5
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos6
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                .. attribute:: cos7
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: _is_presence
                                
                                	Is present if this instance represents presence container else not
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.cfg_type = None
                                    self.cos0 = None
                                    self.cos1 = None
                                    self.cos2 = None
                                    self.cos3 = None
                                    self.cos4 = None
                                    self.cos5 = None
                                    self.cos6 = None
                                    self.cos7 = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:loss-measurement-counters'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.cfg_type is not None:
                                        return True

                                    if self.cos0 is not None:
                                        return True

                                    if self.cos1 is not None:
                                        return True

                                    if self.cos2 is not None:
                                        return True

                                    if self.cos3 is not None:
                                        return True

                                    if self.cos4 is not None:
                                        return True

                                    if self.cos5 is not None:
                                        return True

                                    if self.cos6 is not None:
                                        return True

                                    if self.cos7 is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:mep'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.cos is not None:
                                    return True

                                if self.loss_measurement_counters is not None and self.loss_measurement_counters._has_data():
                                    return True

                                if self.mep_properties is not None and self.mep_properties._has_data():
                                    return True

                                if self.sla_profile_target_mep_ids is not None and self.sla_profile_target_mep_ids._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.domain is None:
                                raise YPYModelError('Key property domain is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:domain[Cisco-IOS-XR-ethernet-cfm-cfg:domain = ' + str(self.domain) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.domain is not None:
                                return True

                            if self.mep is not None and self.mep._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:domains'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.domain is not None:
                            for child_ref in self.domain:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains']['meta_info']


                class AisUp(object):
                    """
                    Interface specific AIS configuration
                    
                    .. attribute:: transmission
                    
                    	AIS transmission configuration
                    	**type**\: :py:class:`Transmission <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission>`
                    
                    

                    """

                    _prefix = 'ethernet-cfm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.transmission = None


                    class Transmission(object):
                        """
                        AIS transmission configuration
                        
                        .. attribute:: ais_interval
                        
                        	AIS Interval
                        	**type**\: :py:class:`CfmAisIntervalEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_datatypes.CfmAisIntervalEnum>`
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        .. attribute:: cos
                        
                        	Class of Service bits
                        	**type**\: int
                        
                        	**range:** 0..7
                        
                        .. attribute:: _is_presence
                        
                        	Is present if this instance represents presence container else not
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ethernet-cfm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ais_interval = None
                            self.cos = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:transmission'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ais_interval is not None:
                                return True

                            if self.cos is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:ais-up'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.transmission is not None and self.transmission._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:cfm'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ais_up is not None and self.ais_up._has_data():
                        return True

                    if self.domains is not None and self.domains._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm']['meta_info']


            class EtherLinkOam(object):
                """
                Ethernet Link OAM Interface Configuration
                
                .. attribute:: action
                
                	Configure action parameters
                	**type**\: :py:class:`Action <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action>`
                
                .. attribute:: hello_interval
                
                	Possible Ethernet Link OAM hello intervals
                	**type**\: :py:class:`EtherLinkOamInterfaceHelloIntervalEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamInterfaceHelloIntervalEnumEnum>`
                
                .. attribute:: link_monitor
                
                	Configure link monitor parameters
                	**type**\: :py:class:`LinkMonitor <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor>`
                
                .. attribute:: mib_retrieval
                
                	Enable or disable MIB retrieval
                	**type**\: bool
                
                .. attribute:: mode
                
                	Possible Ethernet Link OAM modes
                	**type**\: :py:class:`EtherLinkOamInterfaceModeEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamInterfaceModeEnumEnum>`
                
                .. attribute:: profile_name
                
                	Set the profile to use on the interface
                	**type**\: str
                
                .. attribute:: remote_loopback
                
                	Enable or disable remote loopback
                	**type**\: bool
                
                .. attribute:: require_remote
                
                	Configure remote requirement parameters
                	**type**\: :py:class:`RequireRemote <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote>`
                
                .. attribute:: timeout
                
                	Connection timeout period in number of lost heartbeats
                	**type**\: int
                
                	**range:** 2..30
                
                .. attribute:: udlf
                
                	Enable or disable uni\-directional link\-fault detection
                	**type**\: bool
                
                

                """

                _prefix = 'ethernet-link-oam-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.action = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action()
                    self.action.parent = self
                    self.hello_interval = None
                    self.link_monitor = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor()
                    self.link_monitor.parent = self
                    self.mib_retrieval = None
                    self.mode = None
                    self.profile_name = None
                    self.remote_loopback = None
                    self.require_remote = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote()
                    self.require_remote.parent = self
                    self.timeout = None
                    self.udlf = None


                class LinkMonitor(object):
                    """
                    Configure link monitor parameters
                    
                    .. attribute:: frame
                    
                    	Frame event configuration
                    	**type**\: :py:class:`Frame <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.Frame>`
                    
                    .. attribute:: frame_period
                    
                    	Frame\-period event configuration
                    	**type**\: :py:class:`FramePeriod <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FramePeriod>`
                    
                    .. attribute:: frame_seconds
                    
                    	Frame\-seconds event configuration
                    	**type**\: :py:class:`FrameSeconds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FrameSeconds>`
                    
                    .. attribute:: monitoring
                    
                    	Enable or disable monitoring
                    	**type**\: bool
                    
                    .. attribute:: symbol_period
                    
                    	Symbol\-period event configuration
                    	**type**\: :py:class:`SymbolPeriod <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.SymbolPeriod>`
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.frame = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.Frame()
                        self.frame.parent = self
                        self.frame_period = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FramePeriod()
                        self.frame_period.parent = self
                        self.frame_seconds = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FrameSeconds()
                        self.frame_seconds.parent = self
                        self.monitoring = None
                        self.symbol_period = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.SymbolPeriod()
                        self.symbol_period.parent = self


                    class FramePeriod(object):
                        """
                        Frame\-period event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold for frame\-period events
                        	**type**\: :py:class:`Threshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FramePeriod.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame\-period events
                        	**type**\: int
                        
                        	**range:** 100..60000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.threshold = None
                            self.window = None


                        class Threshold(object):
                            """
                            Threshold for frame\-period events
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame\-period events
                            	**type**\: int
                            
                            	**range:** 1..1000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame\-period events
                            	**type**\: int
                            
                            	**range:** 1..1000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.threshold_high = None
                                self.threshold_low = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:threshold'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.threshold_high is not None:
                                    return True

                                if self.threshold_low is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FramePeriod.Threshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:frame-period'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.threshold is not None and self.threshold._has_data():
                                return True

                            if self.window is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FramePeriod']['meta_info']


                    class SymbolPeriod(object):
                        """
                        Symbol\-period event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for symbol\-period events
                        	**type**\: :py:class:`Threshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.SymbolPeriod.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for symbol\-period events
                        	**type**\: int
                        
                        	**range:** 1000..60000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.threshold = None
                            self.window = None


                        class Threshold(object):
                            """
                            Threshold configuration for symbol\-period
                            events
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for symbol\-period
                            	**type**\: int
                            
                            	**range:** 1..60000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for symbol\-period
                            	**type**\: int
                            
                            	**range:** 1..60000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.threshold_high = None
                                self.threshold_low = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:threshold'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.threshold_high is not None:
                                    return True

                                if self.threshold_low is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.SymbolPeriod.Threshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:symbol-period'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.threshold is not None and self.threshold._has_data():
                                return True

                            if self.window is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.SymbolPeriod']['meta_info']


                    class Frame(object):
                        """
                        Frame event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for frame events
                        	**type**\: :py:class:`Threshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.Frame.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame events
                        	**type**\: int
                        
                        	**range:** 1000..60000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.threshold = None
                            self.window = None


                        class Threshold(object):
                            """
                            Threshold configuration for frame events
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame events
                            	**type**\: int
                            
                            	**range:** 1..12000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame events
                            	**type**\: int
                            
                            	**range:** 1..12000000
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.threshold_high = None
                                self.threshold_low = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:threshold'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.threshold_high is not None:
                                    return True

                                if self.threshold_low is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.Frame.Threshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:frame'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.threshold is not None and self.threshold._has_data():
                                return True

                            if self.window is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.Frame']['meta_info']


                    class FrameSeconds(object):
                        """
                        Frame\-seconds event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold for frame\-seconds events
                        	**type**\: :py:class:`Threshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FrameSeconds.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame\-seconds events
                        	**type**\: int
                        
                        	**range:** 10000..900000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.threshold = None
                            self.window = None


                        class Threshold(object):
                            """
                            Threshold for frame\-seconds events
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame\-seconds
                            	**type**\: int
                            
                            	**range:** 1..900
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame\-seconds
                            	**type**\: int
                            
                            	**range:** 1..900
                            
                            .. attribute:: _is_presence
                            
                            	Is present if this instance represents presence container else not
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.threshold_high = None
                                self.threshold_low = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:threshold'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.threshold_high is not None:
                                    return True

                                if self.threshold_low is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FrameSeconds.Threshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:frame-seconds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.threshold is not None and self.threshold._has_data():
                                return True

                            if self.window is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor.FrameSeconds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:link-monitor'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.frame is not None and self.frame._has_data():
                            return True

                        if self.frame_period is not None and self.frame_period._has_data():
                            return True

                        if self.frame_seconds is not None and self.frame_seconds._has_data():
                            return True

                        if self.monitoring is not None:
                            return True

                        if self.symbol_period is not None and self.symbol_period._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitor']['meta_info']


                class Action(object):
                    """
                    Configure action parameters
                    
                    .. attribute:: capabilities_conflict
                    
                    	Action to perform when a capabilities conflict occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEfdEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfdEnum>`
                    
                    .. attribute:: critical_event
                    
                    	Action to perform when a critical event occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEnum>`
                    
                    .. attribute:: discovery_timeout
                    
                    	Action to perform when discovery timeout occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEfdEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfdEnum>`
                    
                    .. attribute:: dying_gasp
                    
                    	Action to perform when a dying gasp occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEnum>`
                    
                    .. attribute:: high_threshold
                    
                    	Action to perform when a high\-threshold event occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEnum>`
                    
                    .. attribute:: link_fault
                    
                    	Action to perform when a link fault occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEfdEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfdEnum>`
                    
                    .. attribute:: remote_loopback
                    
                    	Action to perform when remote loopback is entered or exited
                    	**type**\: :py:class:`EtherLinkOamEventActionPrimEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionPrimEnumEnum>`
                    
                    .. attribute:: session_down
                    
                    	Action to perform when a session comes down
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEfdEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfdEnum>`
                    
                    .. attribute:: session_up
                    
                    	Action to perform when a session comes up
                    	**type**\: :py:class:`EtherLinkOamEventActionPrimEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionPrimEnumEnum>`
                    
                    .. attribute:: wiring_conflict
                    
                    	Action to perform when a wiring conflict occurs
                    	**type**\: :py:class:`EtherLinkOamEventActionEnumEfdEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfdEnum>`
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.capabilities_conflict = None
                        self.critical_event = None
                        self.discovery_timeout = None
                        self.dying_gasp = None
                        self.high_threshold = None
                        self.link_fault = None
                        self.remote_loopback = None
                        self.session_down = None
                        self.session_up = None
                        self.wiring_conflict = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:action'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.capabilities_conflict is not None:
                            return True

                        if self.critical_event is not None:
                            return True

                        if self.discovery_timeout is not None:
                            return True

                        if self.dying_gasp is not None:
                            return True

                        if self.high_threshold is not None:
                            return True

                        if self.link_fault is not None:
                            return True

                        if self.remote_loopback is not None:
                            return True

                        if self.session_down is not None:
                            return True

                        if self.session_up is not None:
                            return True

                        if self.wiring_conflict is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action']['meta_info']


                class RequireRemote(object):
                    """
                    Configure remote requirement parameters
                    
                    .. attribute:: link_monitoring
                    
                    	Enable or disable link monitoring peer requirement
                    	**type**\: bool
                    
                    .. attribute:: mib_retrieval
                    
                    	Enable or disable MIB retrieval peer requirement
                    	**type**\: bool
                    
                    .. attribute:: mode
                    
                    	Possible required peer modes
                    	**type**\: :py:class:`EtherLinkOamInterfaceRequireModeEnumEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamInterfaceRequireModeEnumEnum>`
                    
                    .. attribute:: remote_loopback
                    
                    	Enable or disable remote loopback peer requirement
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.link_monitoring = None
                        self.mib_retrieval = None
                        self.mode = None
                        self.remote_loopback = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:require-remote'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.link_monitoring is not None:
                            return True

                        if self.mib_retrieval is not None:
                            return True

                        if self.mode is not None:
                            return True

                        if self.remote_loopback is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.action is not None and self.action._has_data():
                        return True

                    if self.hello_interval is not None:
                        return True

                    if self.link_monitor is not None and self.link_monitor._has_data():
                        return True

                    if self.mib_retrieval is not None:
                        return True

                    if self.mode is not None:
                        return True

                    if self.profile_name is not None:
                        return True

                    if self.remote_loopback is not None:
                        return True

                    if self.require_remote is not None and self.require_remote._has_data():
                        return True

                    if self.timeout is not None:
                        return True

                    if self.udlf is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.cfm is not None and self.cfm._has_data():
                    return True

                if self.ether_link_oam is not None and self.ether_link_oam._has_data():
                    return True

                if self.ether_link_oam_enable is not None:
                    return True

                if self.filtering is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures']['meta_info']


        class VlanTrunkConfiguration(object):
            """
            IEEE 802.1Q VLAN trunk interface configuration
            
            .. attribute:: native_vlan_identifier
            
            	The Native VLAN identifier associated with this trunk interface
            	**type**\: :py:class:`NativeVlanIdentifier <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier>`
            
            .. attribute:: tunneling_ethertype
            
            	The outer ethertype used in Q\-in\-Q frames. The default value is 0x8100
            	**type**\: :py:class:`TunnelingEthertypeEnum <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.TunnelingEthertypeEnum>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.native_vlan_identifier = None
                self.tunneling_ethertype = None

            class TunnelingEthertypeEnum(Enum):
                """
                TunnelingEthertypeEnum

                The outer ethertype used in Q\-in\-Q frames. The

                default value is 0x8100

                .. data:: Y_0X9100 = 37120

                	0x9100

                .. data:: Y_0X9200 = 37376

                	0x9200

                """

                Y_0X9100 = 37120

                Y_0X9200 = 37376


                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.TunnelingEthertypeEnum']



            class NativeVlanIdentifier(object):
                """
                The Native VLAN identifier associated with this
                trunk interface
                
                .. attribute:: vlan_identifier
                
                	VLAN identifier
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: vlan_type
                
                	Whether this interface is dot1ad or dot1Q
                	**type**\: :py:class:`VlanEnum <ydk.models.l2.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.vlan_identifier = None
                    self.vlan_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:native-vlan-identifier'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.vlan_identifier is not None:
                        return True

                    if self.vlan_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.native_vlan_identifier is not None and self.native_vlan_identifier._has_data():
                    return True

                if self.tunneling_ethertype is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration']['meta_info']


        class NvSatelliteAccess(object):
            """
            nV Satellite Access Link Configuration
            
            

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess']['meta_info']


        class NvSatelliteFabricLink(object):
            """
            nV Satellite Fabric Link Configuration
            
            .. attribute:: ethernet_features
            
            	Ethernet Satellite configuration
            	**type**\: :py:class:`EthernetFeatures <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures>`
            
            .. attribute:: redundancy
            
            	Redundancy submode
            	**type**\: :py:class:`Redundancy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy>`
            
            .. attribute:: remote_ports
            
            	Remote Ports table
            	**type**\: :py:class:`RemotePorts <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts>`
            
            .. attribute:: satellite
            
            	Hub & Spoke connection to a single Satellite
            	**type**\: int
            
            	**range:** 100..65534
            
            

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ethernet_features = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures()
                self.ethernet_features.parent = self
                self.redundancy = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy()
                self.redundancy.parent = self
                self.remote_ports = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts()
                self.remote_ports.parent = self
                self.satellite = None


            class Redundancy(object):
                """
                Redundancy submode
                
                .. attribute:: iccp_group
                
                	Links the satellite fabric to the given ICCP group
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: minimum_preferred_links
                
                	Mininum number of active links preferred
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.iccp_group = None
                    self.minimum_preferred_links = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:redundancy'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.iccp_group is not None:
                        return True

                    if self.minimum_preferred_links is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy']['meta_info']


            class RemotePorts(object):
                """
                Remote Ports table
                
                .. attribute:: remote_port
                
                	Remote Ports
                	**type**\: list of :py:class:`RemotePort <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort>`
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.remote_port = YList()
                    self.remote_port.parent = self
                    self.remote_port.name = 'remote_port'


                class RemotePort(object):
                    """
                    Remote Ports
                    
                    .. attribute:: port_type  <key>
                    
                    	Port type
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: slot  <key>
                    
                    	Slot
                    	**type**\: int
                    
                    	**range:** 0..8
                    
                    .. attribute:: sub_slot  <key>
                    
                    	Sub slot
                    	**type**\: int
                    
                    	**range:** 0..8
                    
                    .. attribute:: port_range
                    
                    	Port range
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'icpe-infra-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.port_type = None
                        self.slot = None
                        self.sub_slot = None
                        self.port_range = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.port_type is None:
                            raise YPYModelError('Key property port_type is None')
                        if self.slot is None:
                            raise YPYModelError('Key property slot is None')
                        if self.sub_slot is None:
                            raise YPYModelError('Key property sub_slot is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:remote-port[Cisco-IOS-XR-icpe-infra-cfg:port-type = ' + str(self.port_type) + '][Cisco-IOS-XR-icpe-infra-cfg:slot = ' + str(self.slot) + '][Cisco-IOS-XR-icpe-infra-cfg:sub-slot = ' + str(self.sub_slot) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.port_type is not None:
                            return True

                        if self.slot is not None:
                            return True

                        if self.sub_slot is not None:
                            return True

                        if self.port_range is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:remote-ports'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.remote_port is not None:
                        for child_ref in self.remote_port:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts']['meta_info']


            class EthernetFeatures(object):
                """
                Ethernet Satellite configuration
                
                .. attribute:: cfm
                
                	CFM Satellite configuration
                	**type**\: :py:class:`Cfm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm>`
                
                

                """

                _prefix = 'ethernet-cfm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.cfm = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm()
                    self.cfm.parent = self


                class Cfm(object):
                    """
                    CFM Satellite configuration
                    
                    .. attribute:: continuity_check_interval
                    
                    	Continuity\-Check Interval
                    	**type**\: :py:class:`CfmCcmIntervalEnum <ydk.models.ethernet.Cisco_IOS_XR_ethernet_cfm_datatypes.CfmCcmIntervalEnum>`
                    
                    .. attribute:: enable
                    
                    	Enable CFM on Satellite
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: level
                    
                    	Maintenance Domain Level
                    	**type**\: int
                    
                    	**range:** 0..7
                    
                    

                    """

                    _prefix = 'ethernet-cfm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.continuity_check_interval = None
                        self.enable = None
                        self.level = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:cfm'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.continuity_check_interval is not None:
                            return True

                        if self.enable is not None:
                            return True

                        if self.level is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-cfm-cfg:ethernet-features'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.cfm is not None and self.cfm._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ethernet_features is not None and self.ethernet_features._has_data():
                    return True

                if self.redundancy is not None and self.redundancy._has_data():
                    return True

                if self.remote_ports is not None and self.remote_ports._has_data():
                    return True

                if self.satellite is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink']['meta_info']


        class NvSatelliteFabricNetwork(object):
            """
            Complex Network connection to one or more
            Satellites
            
            .. attribute:: enable
            
            	Enable
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: redundancy
            
            	Redundancy submode
            	**type**\: :py:class:`Redundancy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy>`
            
            .. attribute:: satellites
            
            	Connected Satellite table
            	**type**\: :py:class:`Satellites <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites>`
            
            

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.enable = None
                self.redundancy = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy()
                self.redundancy.parent = self
                self.satellites = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites()
                self.satellites.parent = self


            class Satellites(object):
                """
                Connected Satellite table
                
                .. attribute:: satellite
                
                	Connected Satellite
                	**type**\: list of :py:class:`Satellite <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite>`
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.satellite = YList()
                    self.satellite.parent = self
                    self.satellite.name = 'satellite'


                class Satellite(object):
                    """
                    Connected Satellite
                    
                    .. attribute:: satellite_id  <key>
                    
                    	Satellite ID
                    	**type**\: int
                    
                    	**range:** 100..65534
                    
                    .. attribute:: enable
                    
                    	Enable
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: remote_ports
                    
                    	Remote Ports table
                    	**type**\: :py:class:`RemotePorts <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts>`
                    
                    

                    """

                    _prefix = 'icpe-infra-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.satellite_id = None
                        self.enable = None
                        self.remote_ports = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts()
                        self.remote_ports.parent = self


                    class RemotePorts(object):
                        """
                        Remote Ports table
                        
                        .. attribute:: remote_port
                        
                        	Remote Ports
                        	**type**\: list of :py:class:`RemotePort <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort>`
                        
                        

                        """

                        _prefix = 'icpe-infra-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.remote_port = YList()
                            self.remote_port.parent = self
                            self.remote_port.name = 'remote_port'


                        class RemotePort(object):
                            """
                            Remote Ports
                            
                            .. attribute:: port_type  <key>
                            
                            	Port type
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: slot  <key>
                            
                            	Slot
                            	**type**\: int
                            
                            	**range:** 0..8
                            
                            .. attribute:: sub_slot  <key>
                            
                            	Sub slot
                            	**type**\: int
                            
                            	**range:** 0..8
                            
                            .. attribute:: port_range
                            
                            	Port range
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'icpe-infra-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.port_type = None
                                self.slot = None
                                self.sub_slot = None
                                self.port_range = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.port_type is None:
                                    raise YPYModelError('Key property port_type is None')
                                if self.slot is None:
                                    raise YPYModelError('Key property slot is None')
                                if self.sub_slot is None:
                                    raise YPYModelError('Key property sub_slot is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:remote-port[Cisco-IOS-XR-icpe-infra-cfg:port-type = ' + str(self.port_type) + '][Cisco-IOS-XR-icpe-infra-cfg:slot = ' + str(self.slot) + '][Cisco-IOS-XR-icpe-infra-cfg:sub-slot = ' + str(self.sub_slot) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.port_type is not None:
                                    return True

                                if self.slot is not None:
                                    return True

                                if self.sub_slot is not None:
                                    return True

                                if self.port_range is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:remote-ports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.remote_port is not None:
                                for child_ref in self.remote_port:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.satellite_id is None:
                            raise YPYModelError('Key property satellite_id is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:satellite[Cisco-IOS-XR-icpe-infra-cfg:satellite-id = ' + str(self.satellite_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.satellite_id is not None:
                            return True

                        if self.enable is not None:
                            return True

                        if self.remote_ports is not None and self.remote_ports._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:satellites'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.satellite is not None:
                        for child_ref in self.satellite:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites']['meta_info']


            class Redundancy(object):
                """
                Redundancy submode
                
                .. attribute:: iccp_group
                
                	Links the satellite fabric to the given ICCP group
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: minimum_preferred_links
                
                	Mininum number of active links preferred
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.iccp_group = None
                    self.minimum_preferred_links = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:redundancy'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.iccp_group is not None:
                        return True

                    if self.minimum_preferred_links is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.enable is not None:
                    return True

                if self.redundancy is not None and self.redundancy._has_data():
                    return True

                if self.satellites is not None and self.satellites._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork']['meta_info']


        class Lldp(object):
            """
            Disable LLDP TX or RX
            
            .. attribute:: lldp_intf_enter
            
            	enter LLDP interface submode
            	**type**\: bool
            
            .. attribute:: _is_presence
            
            	Is present if this instance represents presence container else not
            	**type**\: bool
            
            .. attribute:: receive
            
            	Disable LLDP RX
            	**type**\: :py:class:`Receive <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive>`
            
            .. attribute:: _is_presence
            
            	Is present if this instance represents presence container else not
            	**type**\: bool
            
            .. attribute:: transmit
            
            	Disable LLDP TX
            	**type**\: :py:class:`Transmit <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit>`
            
            .. attribute:: _is_presence
            
            	Is present if this instance represents presence container else not
            	**type**\: bool
            
            

            This class is a :ref:`presence class<presence-class>`

            """

            _prefix = 'ethernet-lldp-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.lldp_intf_enter = None
                self.receive = InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive()
                self.receive.parent = self
                self.transmit = InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit()
                self.transmit.parent = self


            class Transmit(object):
                """
                Disable LLDP TX
                
                .. attribute:: disable
                
                	disable LLDP TX
                	**type**\: bool
                
                

                """

                _prefix = 'ethernet-lldp-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.disable = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-lldp-cfg:transmit'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.disable is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit']['meta_info']


            class Receive(object):
                """
                Disable LLDP RX
                
                .. attribute:: disable
                
                	disable LLDP RX
                	**type**\: bool
                
                

                """

                _prefix = 'ethernet-lldp-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.disable = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ethernet-lldp-cfg:receive'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.disable is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ethernet-lldp-cfg:lldp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.lldp_intf_enter is not None:
                    return True

                if self.receive is not None and self.receive._has_data():
                    return True

                if self.transmit is not None and self.transmit._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Lldp']['meta_info']


        class SpanMonitorSessions(object):
            """
            Monitor Session container for this source
            interface
            
            .. attribute:: span_monitor_session
            
            	Configuration for a particular class of Monitor Session
            	**type**\: list of :py:class:`SpanMonitorSession <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession>`
            
            

            """

            _prefix = 'ethernet-span-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.span_monitor_session = YList()
                self.span_monitor_session.parent = self
                self.span_monitor_session.name = 'span_monitor_session'


            class SpanMonitorSession(object):
                """
                Configuration for a particular class of Monitor
                Session
                
                .. attribute:: session_class  <key>
                
                	Session Class
                	**type**\: :py:class:`SpanSessionClassEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_datatypes.SpanSessionClassEnum>`
                
                .. attribute:: acl
                
                	Enable ACL matching for traffic mirroring
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: attachment
                
                	Attach the interface to a Monitor Session
                	**type**\: :py:class:`Attachment <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment>`
                
                .. attribute:: mirror_first
                
                	Mirror a specified number of bytes from start of packet
                	**type**\: int
                
                	**range:** 1..10000
                
                .. attribute:: mirror_interval
                
                	Specify the mirror interval
                	**type**\: :py:class:`SpanMirrorIntervalEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanMirrorIntervalEnum>`
                
                

                """

                _prefix = 'ethernet-span-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.session_class = None
                    self.acl = None
                    self.attachment = None
                    self.mirror_first = None
                    self.mirror_interval = None


                class Attachment(object):
                    """
                    Attach the interface to a Monitor Session
                    
                    .. attribute:: direction
                    
                    	Specify the direction of traffic to replicate (optional)
                    	**type**\: :py:class:`SpanTrafficDirectionEnum <ydk.models.ethernet.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanTrafficDirectionEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: port_level_enable
                    
                    	Enable port level traffic mirroring
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: session_name
                    
                    	Session Name
                    	**type**\: str
                    
                    	**range:** 0..79
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ethernet-span-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.direction = None
                        self.port_level_enable = None
                        self.session_name = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:attachment'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.direction is not None:
                            return True

                        if self.port_level_enable is not None:
                            return True

                        if self.session_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.session_class is None:
                        raise YPYModelError('Key property session_class is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-session[Cisco-IOS-XR-Ethernet-SPAN-cfg:session-class = ' + str(self.session_class) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.session_class is not None:
                        return True

                    if self.acl is not None:
                        return True

                    if self.attachment is not None and self.attachment._has_data():
                        return True

                    if self.mirror_first is not None:
                        return True

                    if self.mirror_interval is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.span_monitor_session is not None:
                    for child_ref in self.span_monitor_session:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions']['meta_info']


        class Afs(object):
            """
            Per\-address\-family and topology configuration
            
            .. attribute:: af
            
            	The presence of this object enables the givenaddress\-family and topology on the interface
            	**type**\: list of :py:class:`Af <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs.Af>`
            
            .. attribute:: af_topology_name
            
            	The presence of this object enables the givenaddress\-family and topology on the interface
            	**type**\: list of :py:class:`AfTopologyName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName>`
            
            

            """

            _prefix = 'infra-rsi-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.af = YList()
                self.af.parent = self
                self.af.name = 'af'
                self.af_topology_name = YList()
                self.af_topology_name.parent = self
                self.af_topology_name.name = 'af_topology_name'


            class Af(object):
                """
                The presence of this object enables the
                givenaddress\-family and topology on the
                interface.
                
                .. attribute:: af_name  <key>
                
                	Address\-family
                	**type**\: :py:class:`VrfAddressFamilyEnum <ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg.VrfAddressFamilyEnum>`
                
                .. attribute:: saf_name  <key>
                
                	Sub\-address\-family
                	**type**\: :py:class:`VrfSubAddressFamilyEnum <ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg.VrfSubAddressFamilyEnum>`
                
                

                """

                _prefix = 'infra-rsi-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.af_name = None
                    self.saf_name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.af_name is None:
                        raise YPYModelError('Key property af_name is None')
                    if self.saf_name is None:
                        raise YPYModelError('Key property saf_name is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rsi-cfg:af[Cisco-IOS-XR-infra-rsi-cfg:af-name = ' + str(self.af_name) + '][Cisco-IOS-XR-infra-rsi-cfg:saf-name = ' + str(self.saf_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.af_name is not None:
                        return True

                    if self.saf_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Afs.Af']['meta_info']


            class AfTopologyName(object):
                """
                The presence of this object enables the
                givenaddress\-family and topology on the
                interface.
                
                .. attribute:: af_name  <key>
                
                	Address\-family
                	**type**\: :py:class:`VrfAddressFamilyEnum <ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg.VrfAddressFamilyEnum>`
                
                .. attribute:: saf_name  <key>
                
                	Sub\-address\-family
                	**type**\: :py:class:`VrfSubAddressFamilyEnum <ydk.models.infra.Cisco_IOS_XR_infra_rsi_cfg.VrfSubAddressFamilyEnum>`
                
                .. attribute:: topology_name  <key>
                
                	Topology name
                	**type**\: str
                
                	**range:** 0..32
                
                

                """

                _prefix = 'infra-rsi-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.af_name = None
                    self.saf_name = None
                    self.topology_name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.af_name is None:
                        raise YPYModelError('Key property af_name is None')
                    if self.saf_name is None:
                        raise YPYModelError('Key property saf_name is None')
                    if self.topology_name is None:
                        raise YPYModelError('Key property topology_name is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rsi-cfg:af-topology-name[Cisco-IOS-XR-infra-rsi-cfg:af-name = ' + str(self.af_name) + '][Cisco-IOS-XR-infra-rsi-cfg:saf-name = ' + str(self.saf_name) + '][Cisco-IOS-XR-infra-rsi-cfg:topology-name = ' + str(self.topology_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.af_name is not None:
                        return True

                    if self.saf_name is not None:
                        return True

                    if self.topology_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-infra-rsi-cfg:afs'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.af is not None:
                    for child_ref in self.af:
                        if child_ref._has_data():
                            return True

                if self.af_topology_name is not None:
                    for child_ref in self.af_topology_name:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Afs']['meta_info']


        class Statistics(object):
            """
            Per\-interface statistics configuration
            
            .. attribute:: load_interval
            
            	Specify interval for load calculation for an interface
            	**type**\: int
            
            	**range:** 0..600
            
            

            """

            _prefix = 'infra-statsd-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.load_interval = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-infra-statsd-cfg:statistics'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.load_interval is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Statistics']['meta_info']


        class Ipv6PacketFilter(object):
            """
            IPv6 Packet Filtering configuration for the
            interface
            
            .. attribute:: inbound
            
            	IPv6 Packet filter to be applied to inbound packets
            	**type**\: :py:class:`Inbound <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound>`
            
            .. attribute:: outbound
            
            	IPv6 Packet filter to be applied to outbound packets
            	**type**\: :py:class:`Outbound <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound>`
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.inbound = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound()
                self.inbound.parent = self
                self.outbound = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound()
                self.outbound.parent = self


            class Inbound(object):
                """
                IPv6 Packet filter to be applied to inbound
                packets
                
                .. attribute:: acl_name_array
                
                	Array of IPv6 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**range:** 0..65
                
                .. attribute:: common_acl_name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Inbound packets, ACL providing HW optimization when applied on multiple interfaces. NOTE\: This parameter is mandatory if 'Name' is not specified
                	**type**\: str
                
                	**range:** 0..65
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them. NOTE\: InterfaceStatistics is allowed only if Name is specified
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Inbound  NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**range:** 0..65
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.acl_name_array = YLeafList()
                    self.acl_name_array.parent = self
                    self.acl_name_array.name = 'acl_name_array'
                    self.common_acl_name = None
                    self.compression_level = None
                    self.interface_statistics = None
                    self.is_common_array = YLeafList()
                    self.is_common_array.parent = self
                    self.is_common_array.name = 'is_common_array'
                    self.name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:inbound'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.acl_name_array is not None:
                        for child in self.acl_name_array:
                            if child is not None:
                                return True

                    if self.common_acl_name is not None:
                        return True

                    if self.compression_level is not None:
                        return True

                    if self.interface_statistics is not None:
                        return True

                    if self.is_common_array is not None:
                        for child in self.is_common_array:
                            if child is not None:
                                return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound']['meta_info']


            class Outbound(object):
                """
                IPv6 Packet filter to be applied to outbound
                packets
                
                .. attribute:: acl_name_array
                
                	Array of IPv6 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**range:** 0..65
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: do_not_use
                
                	Reserved.  Error if specified
                	**type**\: str
                
                	**range:** 0..65
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Outbound  packets
                	**type**\: str
                
                	**range:** 0..65
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.acl_name_array = YLeafList()
                    self.acl_name_array.parent = self
                    self.acl_name_array.name = 'acl_name_array'
                    self.compression_level = None
                    self.do_not_use = None
                    self.interface_statistics = None
                    self.is_common_array = YLeafList()
                    self.is_common_array.parent = self
                    self.is_common_array.name = 'is_common_array'
                    self.name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:outbound'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.acl_name_array is not None:
                        for child in self.acl_name_array:
                            if child is not None:
                                return True

                    if self.compression_level is not None:
                        return True

                    if self.do_not_use is not None:
                        return True

                    if self.interface_statistics is not None:
                        return True

                    if self.is_common_array is not None:
                        for child in self.is_common_array:
                            if child is not None:
                                return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.inbound is not None and self.inbound._has_data():
                    return True

                if self.outbound is not None and self.outbound._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter']['meta_info']


        class EsPacketFilter(object):
            """
            ES Packet Filtering configuration for the
            interface
            
            .. attribute:: inbound
            
            	Name of filter to be applied to inbound packets
            	**type**\: str
            
            	**range:** 0..65
            
            .. attribute:: outbound
            
            	Name of filter to be applied to outbound packets
            	**type**\: str
            
            	**range:** 0..65
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.inbound = None
                self.outbound = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.inbound is not None:
                    return True

                if self.outbound is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter']['meta_info']


        class Ipv4PacketFilter(object):
            """
            IPv4 Packet Filtering configuration for the
            interface
            
            .. attribute:: inbound
            
            	IPv4 Packet filter to be applied to inbound packets
            	**type**\: :py:class:`Inbound <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound>`
            
            .. attribute:: outbound
            
            	IPv4 Packet filter to be applied to outbound packets
            	**type**\: :py:class:`Outbound <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound>`
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.inbound = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound()
                self.inbound.parent = self
                self.outbound = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound()
                self.outbound.parent = self


            class Outbound(object):
                """
                IPv4 Packet filter to be applied to outbound
                packets
                
                .. attribute:: acl_name_array
                
                	Array of IPv4 Packet Filter Names to be applied to Outbound packets
                	**type**\: list of str
                
                	**range:** 0..65
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: do_not_use
                
                	Reserved.  Error if specified
                	**type**\: str
                
                	**range:** 0..65
                
                .. attribute:: hardware_count
                
                	True if packets hitting the ACL should be counted in the hardware.  The default is not to count them
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Outbound packets NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**range:** 0..65
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.acl_name_array = YLeafList()
                    self.acl_name_array.parent = self
                    self.acl_name_array.name = 'acl_name_array'
                    self.compression_level = None
                    self.do_not_use = None
                    self.hardware_count = None
                    self.interface_statistics = None
                    self.is_common_array = YLeafList()
                    self.is_common_array.parent = self
                    self.is_common_array.name = 'is_common_array'
                    self.name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:outbound'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.acl_name_array is not None:
                        for child in self.acl_name_array:
                            if child is not None:
                                return True

                    if self.compression_level is not None:
                        return True

                    if self.do_not_use is not None:
                        return True

                    if self.hardware_count is not None:
                        return True

                    if self.interface_statistics is not None:
                        return True

                    if self.is_common_array is not None:
                        for child in self.is_common_array:
                            if child is not None:
                                return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound']['meta_info']


            class Inbound(object):
                """
                IPv4 Packet filter to be applied to inbound
                packets
                
                .. attribute:: acl_name_array
                
                	Array of IPv4 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**range:** 0..65
                
                .. attribute:: common_acl_name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Inbound packets, ACL providing HW optimization when applied on multiple interfaces. NOTE\: This parameter is mandatory if 'Name' is not specified
                	**type**\: str
                
                	**range:** 0..65
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: hardware_count
                
                	True if packets hitting the ACL should be counted in the hardware.  The default is not to count them. NOTE\: HardwareCount is allowed only if Name is specified
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them. NOTE\: InterfaceStatistics is allowed only if Name is specified
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Inbound packets NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**range:** 0..65
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.acl_name_array = YLeafList()
                    self.acl_name_array.parent = self
                    self.acl_name_array.name = 'acl_name_array'
                    self.common_acl_name = None
                    self.compression_level = None
                    self.hardware_count = None
                    self.interface_statistics = None
                    self.is_common_array = YLeafList()
                    self.is_common_array.parent = self
                    self.is_common_array.name = 'is_common_array'
                    self.name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:inbound'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.acl_name_array is not None:
                        for child in self.acl_name_array:
                            if child is not None:
                                return True

                    if self.common_acl_name is not None:
                        return True

                    if self.compression_level is not None:
                        return True

                    if self.hardware_count is not None:
                        return True

                    if self.interface_statistics is not None:
                        return True

                    if self.is_common_array is not None:
                        for child in self.is_common_array:
                            if child is not None:
                                return True

                    if self.name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.inbound is not None and self.inbound._has_data():
                    return True

                if self.outbound is not None and self.outbound._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter']['meta_info']


        class Dagrs(object):
            """
            Direct\-Attached Gateway Redundancy configuration
            
            .. attribute:: dagr
            
            	The DAGR entry being configured
            	**type**\: list of :py:class:`Dagr <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr>`
            
            

            """

            _prefix = 'ipv4-arp-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.dagr = YList()
                self.dagr.parent = self
                self.dagr.name = 'dagr'


            class Dagr(object):
                """
                The DAGR entry being configured
                
                .. attribute:: ip_addr  <key>
                
                	DAGR Peer IPv4 address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: enter
                
                	DAGR Group Enter item
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: sub
                
                	DAGR Submode configuration
                	**type**\: :py:class:`Sub <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub>`
                
                

                """

                _prefix = 'ipv4-arp-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_addr = None
                    self.enter = None
                    self.sub = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub()
                    self.sub.parent = self


                class Sub(object):
                    """
                    DAGR Submode configuration
                    
                    .. attribute:: distance
                    
                    	Set Route Distance
                    	**type**\: :py:class:`Distance <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance>`
                    
                    .. attribute:: metric
                    
                    	Set Route Metric
                    	**type**\: :py:class:`Metric <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric>`
                    
                    .. attribute:: priority_timeout
                    
                    	Priority Timeout value
                    	**type**\: int
                    
                    	**range:** 1..10000
                    
                    .. attribute:: timers
                    
                    	Set Query Timers
                    	**type**\: :py:class:`Timers <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers>`
                    
                    

                    """

                    _prefix = 'ipv4-arp-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.distance = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance()
                        self.distance.parent = self
                        self.metric = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric()
                        self.metric.parent = self
                        self.priority_timeout = None
                        self.timers = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers()
                        self.timers.parent = self


                    class Metric(object):
                        """
                        Set Route Metric
                        
                        .. attribute:: metric_norm
                        
                        	Normal Route Metric
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        .. attribute:: metric_prio
                        
                        	Priority Route Metric
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.metric_norm = None
                            self.metric_prio = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:metric'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.metric_norm is not None:
                                return True

                            if self.metric_prio is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric']['meta_info']


                    class Timers(object):
                        """
                        Set Query Timers
                        
                        .. attribute:: query_time
                        
                        	Query Timeout
                        	**type**\: int
                        
                        	**range:** 1..10000
                        
                        .. attribute:: sby_time
                        
                        	Standby Query Timeout
                        	**type**\: int
                        
                        	**range:** 1..10000
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.query_time = None
                            self.sby_time = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:timers'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.query_time is not None:
                                return True

                            if self.sby_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers']['meta_info']


                    class Distance(object):
                        """
                        Set Route Distance
                        
                        .. attribute:: dist_norm
                        
                        	Normal Route Distance
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        .. attribute:: dist_prio
                        
                        	Priority Route Distance
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.dist_norm = None
                            self.dist_prio = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:distance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dist_norm is not None:
                                return True

                            if self.dist_prio is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:sub'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.distance is not None and self.distance._has_data():
                            return True

                        if self.metric is not None and self.metric._has_data():
                            return True

                        if self.priority_timeout is not None:
                            return True

                        if self.timers is not None and self.timers._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.ip_addr is None:
                        raise YPYModelError('Key property ip_addr is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:dagr[Cisco-IOS-XR-ipv4-arp-cfg:ip-addr = ' + str(self.ip_addr) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_addr is not None:
                        return True

                    if self.enter is not None:
                        return True

                    if self.sub is not None and self.sub._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:dagrs'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.dagr is not None:
                    for child_ref in self.dagr:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Dagrs']['meta_info']


        class Ipv4Arp(object):
            """
            Configure Address Resolution Protocol
            
            .. attribute:: gratuitous_ignore
            
            	Ignore the receipt of Gratuitous ARP packets on the interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: learning_disable
            
            	Disable the dynamic learning of ARP entries on the interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: learning_local
            
            	Enable the dynamic learning of ARP entries(for local subnet) on the interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: local_proxy_arp
            
            	Local Proxy ARP configuration
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: proxy_arp
            
            	Proxy ARP configuration
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: purge_delay
            
            	Time to delay purging arp entries when the interface goes down
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: timeout
            
            	Number of seconds for ARP cache timeout
            	**type**\: int
            
            	**range:** 30..2144448000
            
            

            """

            _prefix = 'ipv4-arp-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.gratuitous_ignore = None
                self.learning_disable = None
                self.learning_local = None
                self.local_proxy_arp = None
                self.proxy_arp = None
                self.purge_delay = None
                self.timeout = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.gratuitous_ignore is not None:
                    return True

                if self.learning_disable is not None:
                    return True

                if self.learning_local is not None:
                    return True

                if self.local_proxy_arp is not None:
                    return True

                if self.proxy_arp is not None:
                    return True

                if self.purge_delay is not None:
                    return True

                if self.timeout is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Arp']['meta_info']


        class Ipv4Network(object):
            """
            Interface IPv4 Network configuration data
            
            .. attribute:: addresses
            
            	Set the IP address of an interface
            	**type**\: :py:class:`Addresses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses>`
            
            .. attribute:: bgp
            
            	Interface ipv4 bgp configuration
            	**type**\: :py:class:`Bgp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp>`
            
            .. attribute:: bgp_pa
            
            	Interface ipv4 bgp configuration
            	**type**\: :py:class:`BgpPa <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa>`
            
            .. attribute:: helper_addresses
            
            	The set of IP destination addresses for UDP broadcasts
            	**type**\: :py:class:`HelperAddresses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses>`
            
            .. attribute:: icmp_mask_reply
            
            	The flag for enabling sending of ICMP mask reply messages
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: mtu
            
            	The IP Maximum Transmission Unit
            	**type**\: int
            
            	**range:** 68..65535
            
            .. attribute:: point_to_point
            
            	Enable point\-to\-point handling for this interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: tcp_mss_adjust_enable
            
            	Enable TCP MSS Adjust on an interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ttl_propagate_disable
            
            	Disable TTL propagate on an interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: verify
            
            	Enable Verify handling for this interface
            	**type**\: :py:class:`Verify <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify>`
            
            

            """

            _prefix = 'ipv4-io-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses()
                self.addresses.parent = self
                self.bgp = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp()
                self.bgp.parent = self
                self.bgp_pa = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa()
                self.bgp_pa.parent = self
                self.helper_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses()
                self.helper_addresses.parent = self
                self.icmp_mask_reply = None
                self.mtu = None
                self.point_to_point = None
                self.tcp_mss_adjust_enable = None
                self.ttl_propagate_disable = None
                self.verify = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify()
                self.verify.parent = self


            class BgpPa(object):
                """
                Interface ipv4 bgp configuration
                
                .. attribute:: input
                
                	Input
                	**type**\: :py:class:`Input <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input>`
                
                .. attribute:: output
                
                	Output
                	**type**\: :py:class:`Output <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input()
                    self.input.parent = self
                    self.output = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output()
                    self.output.parent = self


                class Input(object):
                    """
                    Input
                    
                    .. attribute:: destination_accounting
                    
                    	BGP PA configuration on destination
                    	**type**\: bool
                    
                    .. attribute:: source_accounting
                    
                    	BGP PA configuration on source
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.destination_accounting = None
                        self.source_accounting = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:input'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_accounting is not None:
                            return True

                        if self.source_accounting is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input']['meta_info']


                class Output(object):
                    """
                    Output
                    
                    .. attribute:: destination_accounting
                    
                    	BGP PA configuration on destination
                    	**type**\: bool
                    
                    .. attribute:: source_accounting
                    
                    	BGP PA configuration on source
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.destination_accounting = None
                        self.source_accounting = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:output'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination_accounting is not None:
                            return True

                        if self.source_accounting is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:bgp-pa'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.input is not None and self.input._has_data():
                        return True

                    if self.output is not None and self.output._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa']['meta_info']


            class Verify(object):
                """
                Enable Verify handling for this interface
                
                .. attribute:: default_ping
                
                	Allow default route to match when checking source address
                	**type**\: :py:class:`Ipv4DefaultPingEnum <ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg.Ipv4DefaultPingEnum>`
                
                .. attribute:: reachable
                
                	Source is reachable via any interface or interface on which packet was received
                	**type**\: :py:class:`Ipv4ReachableEnum <ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg.Ipv4ReachableEnum>`
                
                .. attribute:: self_ping
                
                	Allow router to ping itself (opens vulnerability in verification)
                	**type**\: :py:class:`Ipv4SelfPingEnum <ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg.Ipv4SelfPingEnum>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.default_ping = None
                    self.reachable = None
                    self.self_ping = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:verify'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.default_ping is not None:
                        return True

                    if self.reachable is not None:
                        return True

                    if self.self_ping is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify']['meta_info']


            class Bgp(object):
                """
                Interface ipv4 bgp configuration
                
                .. attribute:: flow_tag
                
                	Interface ipv4 bgp policy propagation flow tag configuration
                	**type**\: :py:class:`FlowTag <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag>`
                
                .. attribute:: qppb
                
                	Interface ipv4 bgp policy propagation configuration
                	**type**\: :py:class:`Qppb <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.flow_tag = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag()
                    self.flow_tag.parent = self
                    self.qppb = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb()
                    self.qppb.parent = self


                class Qppb(object):
                    """
                    Interface ipv4 bgp policy propagation
                    configuration
                    
                    .. attribute:: input
                    
                    	Input
                    	**type**\: :py:class:`Input <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input()
                        self.input.parent = self


                    class Input(object):
                        """
                        Input
                        
                        .. attribute:: destination
                        
                        	QPPB configuration on destination
                        	**type**\: :py:class:`Ipv4InterfaceQppbEnum <ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg.Ipv4InterfaceQppbEnum>`
                        
                        .. attribute:: source
                        
                        	QPPB configuration on source
                        	**type**\: :py:class:`Ipv4InterfaceQppbEnum <ydk.models.ipv4.Cisco_IOS_XR_ipv4_io_cfg.Ipv4InterfaceQppbEnum>`
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.destination = None
                            self.source = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:input'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination is not None:
                                return True

                            if self.source is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:qppb'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.input is not None and self.input._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb']['meta_info']


                class FlowTag(object):
                    """
                    Interface ipv4 bgp policy propagation flow tag
                    configuration
                    
                    .. attribute:: flow_tag_input
                    
                    	Input
                    	**type**\: :py:class:`FlowTagInput <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.flow_tag_input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput()
                        self.flow_tag_input.parent = self


                    class FlowTagInput(object):
                        """
                        Input
                        
                        .. attribute:: destination
                        
                        	FlowTag configuration on destination
                        	**type**\: bool
                        
                        .. attribute:: source
                        
                        	FlowTag configuration on source
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.destination = None
                            self.source = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:flow-tag-input'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination is not None:
                                return True

                            if self.source is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:flow-tag'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_tag_input is not None and self.flow_tag_input._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:bgp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_tag is not None and self.flow_tag._has_data():
                        return True

                    if self.qppb is not None and self.qppb._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp']['meta_info']


            class Addresses(object):
                """
                Set the IP address of an interface
                
                .. attribute:: dhcp
                
                	IPv4 address and Mask negotiated via DHCP
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: primary
                
                	IP address and Mask
                	**type**\: :py:class:`Primary <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary>`
                
                .. attribute:: secondaries
                
                	Specify a secondary address
                	**type**\: :py:class:`Secondaries <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries>`
                
                .. attribute:: unnumbered
                
                	Enable IP processing without an explicit address
                	**type**\: str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.dhcp = None
                    self.primary = None
                    self.secondaries = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries()
                    self.secondaries.parent = self
                    self.unnumbered = None


                class Secondaries(object):
                    """
                    Specify a secondary address
                    
                    .. attribute:: secondary
                    
                    	IP address and Mask
                    	**type**\: list of :py:class:`Secondary <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.secondary = YList()
                        self.secondary.parent = self
                        self.secondary.name = 'secondary'


                    class Secondary(object):
                        """
                        IP address and Mask
                        
                        .. attribute:: address  <key>
                        
                        	Secondary IP address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: netmask
                        
                        	Netmask
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.address = None
                            self.netmask = None
                            self.route_tag = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.address is None:
                                raise YPYModelError('Key property address is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:secondary[Cisco-IOS-XR-ipv4-io-cfg:address = ' + str(self.address) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.address is not None:
                                return True

                            if self.netmask is not None:
                                return True

                            if self.route_tag is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:secondaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.secondary is not None:
                            for child_ref in self.secondary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries']['meta_info']


                class Primary(object):
                    """
                    IP address and Mask
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: netmask
                    
                    	Netmask
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: route_tag
                    
                    	RouteTag
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.address = None
                        self.netmask = None
                        self.route_tag = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:primary'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address is not None:
                            return True

                        if self.netmask is not None:
                            return True

                        if self.route_tag is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:addresses'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dhcp is not None:
                        return True

                    if self.primary is not None and self.primary._has_data():
                        return True

                    if self.secondaries is not None and self.secondaries._has_data():
                        return True

                    if self.unnumbered is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses']['meta_info']


            class HelperAddresses(object):
                """
                The set of IP destination addresses for UDP
                broadcasts
                
                .. attribute:: helper_address
                
                	An IP destination addresses for UDP broadcasts
                	**type**\: list of :py:class:`HelperAddress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.helper_address = YList()
                    self.helper_address.parent = self
                    self.helper_address.name = 'helper_address'


                class HelperAddress(object):
                    """
                    An IP destination addresses for UDP broadcasts
                    
                    .. attribute:: address  <key>
                    
                    	IP destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: vrf_name  <key>
                    
                    	VRF name
                    	**type**\: str
                    
                    	**range:** 0..32
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.address = None
                        self.vrf_name = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.address is None:
                            raise YPYModelError('Key property address is None')
                        if self.vrf_name is None:
                            raise YPYModelError('Key property vrf_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:helper-address[Cisco-IOS-XR-ipv4-io-cfg:address = ' + str(self.address) + '][Cisco-IOS-XR-ipv4-io-cfg:vrf-name = ' + str(self.vrf_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address is not None:
                            return True

                        if self.vrf_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:helper-addresses'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.helper_address is not None:
                        for child_ref in self.helper_address:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.addresses is not None and self.addresses._has_data():
                    return True

                if self.bgp is not None and self.bgp._has_data():
                    return True

                if self.bgp_pa is not None and self.bgp_pa._has_data():
                    return True

                if self.helper_addresses is not None and self.helper_addresses._has_data():
                    return True

                if self.icmp_mask_reply is not None:
                    return True

                if self.mtu is not None:
                    return True

                if self.point_to_point is not None:
                    return True

                if self.tcp_mss_adjust_enable is not None:
                    return True

                if self.ttl_propagate_disable is not None:
                    return True

                if self.verify is not None and self.verify._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4Network']['meta_info']


        class Ipv4NetworkForwarding(object):
            """
            Interface IPv4 Network configuration data also
            used for forwarding
            
            .. attribute:: directed_broadcast
            
            	Enable forwarding of directed broadcast
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: redirects
            
            	Enable sending ICMP Redirect messages
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: unreachables
            
            	Disable sending ICMP unreachables
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv4-io-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.directed_broadcast = None
                self.redirects = None
                self.unreachables = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.directed_broadcast is not None:
                    return True

                if self.redirects is not None:
                    return True

                if self.unreachables is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding']['meta_info']


        class Ipv6Network(object):
            """
            Interface IPv6 Network configuration data
            
            .. attribute:: addresses
            
            	Set the IPv6 address of an interface
            	**type**\: :py:class:`Addresses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses>`
            
            .. attribute:: bgp_flow_tag_policy_table
            
            	Interface ipv6 bgp policy propagation flowtag configuration
            	**type**\: :py:class:`BgpFlowTagPolicyTable <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable>`
            
            .. attribute:: bgp_policy_accountings
            
            	IPv6 BGP Policy Accounting
            	**type**\: :py:class:`BgpPolicyAccountings <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings>`
            
            .. attribute:: bgp_qos_policy_propagation
            
            	Configure BGP QoS policy propagation
            	**type**\: :py:class:`BgpQosPolicyPropagation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation>`
            
            .. attribute:: mac_address_filters
            
            	IPv6 Mac\-Filter for a multicast address
            	**type**\: :py:class:`MacAddressFilters <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.MacAddressFilters>`
            
            .. attribute:: mtu
            
            	MTU Setting of Interface
            	**type**\: int
            
            	**range:** 1280..65535
            
            .. attribute:: tcp_mss_adjust_enable
            
            	Enable TCP MSS adjust on an interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ttl_propagate_disable
            
            	Disabled TTL propagate on an interface
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: unnumbered
            
            	Enable IPv6 processing without an explicit address
            	**type**\: str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: unreachables
            
            	Override Sending of ICMP Unreachable Messages
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: verify
            
            	IPv6 Verify Unicast Souce Reachable
            	**type**\: :py:class:`Verify <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify>`
            
            

            """

            _prefix = 'ipv6-ma-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses()
                self.addresses.parent = self
                self.bgp_flow_tag_policy_table = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable()
                self.bgp_flow_tag_policy_table.parent = self
                self.bgp_policy_accountings = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings()
                self.bgp_policy_accountings.parent = self
                self.bgp_qos_policy_propagation = None
                self.mac_address_filters = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.MacAddressFilters()
                self.mac_address_filters.parent = self
                self.mtu = None
                self.tcp_mss_adjust_enable = None
                self.ttl_propagate_disable = None
                self.unnumbered = None
                self.unreachables = None
                self.verify = None


            class BgpQosPolicyPropagation(object):
                """
                Configure BGP QoS policy propagation
                
                .. attribute:: destination
                
                	QPPB configuration on destination
                	**type**\: :py:class:`Ipv6QppbEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6QppbEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: source
                
                	QPPB configuration on source
                	**type**\: :py:class:`Ipv6QppbEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6QppbEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.destination = None
                    self.source = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:bgp-qos-policy-propagation'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination is not None:
                        return True

                    if self.source is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation']['meta_info']


            class BgpPolicyAccountings(object):
                """
                IPv6 BGP Policy Accounting
                
                .. attribute:: bgp_policy_accounting
                
                	Accounting input or output
                	**type**\: list of :py:class:`BgpPolicyAccounting <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.bgp_policy_accounting = YList()
                    self.bgp_policy_accounting.parent = self
                    self.bgp_policy_accounting.name = 'bgp_policy_accounting'


                class BgpPolicyAccounting(object):
                    """
                    Accounting input or output
                    
                    .. attribute:: direction  <key>
                    
                    	Accouting on input or output
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: destination_accounting
                    
                    	Accounting on Destination IP Address
                    	**type**\: bool
                    
                    .. attribute:: source_accounting
                    
                    	Accounting on Source IP Address
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.direction = None
                        self.destination_accounting = None
                        self.source_accounting = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.direction is None:
                            raise YPYModelError('Key property direction is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:bgp-policy-accounting[Cisco-IOS-XR-ipv6-ma-cfg:direction = ' + str(self.direction) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.direction is not None:
                            return True

                        if self.destination_accounting is not None:
                            return True

                        if self.source_accounting is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:bgp-policy-accountings'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bgp_policy_accounting is not None:
                        for child_ref in self.bgp_policy_accounting:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings']['meta_info']


            class MacAddressFilters(object):
                """
                IPv6 Mac\-Filter for a multicast address
                
                .. attribute:: mac_address_filter
                
                	Allow IPv6 Mac\-Filter for a multicast address
                	**type**\: list of :py:class:`MacAddressFilter <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.MacAddressFilters.MacAddressFilter>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.mac_address_filter = YList()
                    self.mac_address_filter.parent = self
                    self.mac_address_filter.name = 'mac_address_filter'


                class MacAddressFilter(object):
                    """
                    Allow IPv6 Mac\-Filter for a multicast address
                    
                    .. attribute:: multicast_address  <key>
                    
                    	Multicast Address
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.multicast_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.multicast_address is None:
                            raise YPYModelError('Key property multicast_address is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:mac-address-filter[Cisco-IOS-XR-ipv6-ma-cfg:multicast-address = ' + str(self.multicast_address) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.multicast_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.MacAddressFilters.MacAddressFilter']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:mac-address-filters'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.mac_address_filter is not None:
                        for child_ref in self.mac_address_filter:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.MacAddressFilters']['meta_info']


            class Verify(object):
                """
                IPv6 Verify Unicast Souce Reachable
                
                .. attribute:: default_ping
                
                	Allow Default Route
                	**type**\: :py:class:`Ipv6DefaultPingEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6DefaultPingEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: reachable
                
                	Source Reachable Interface
                	**type**\: :py:class:`Ipv6ReachableEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6ReachableEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: self_ping
                
                	Allow Self Ping
                	**type**\: :py:class:`Ipv6SelfPingEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6SelfPingEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.default_ping = None
                    self.reachable = None
                    self.self_ping = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:verify'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.default_ping is not None:
                        return True

                    if self.reachable is not None:
                        return True

                    if self.self_ping is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify']['meta_info']


            class Addresses(object):
                """
                Set the IPv6 address of an interface
                
                .. attribute:: auto_configuration
                
                	Auto IPv6 Interface Configuration
                	**type**\: :py:class:`AutoConfiguration <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration>`
                
                .. attribute:: eui64_addresses
                
                	EUI\-64 IPv6 address Table
                	**type**\: :py:class:`Eui64Addresses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses>`
                
                .. attribute:: link_local_address
                
                	Link local IPv6 address
                	**type**\: :py:class:`LinkLocalAddress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress>`
                
                .. attribute:: regular_addresses
                
                	Regular IPv6 address Table
                	**type**\: :py:class:`RegularAddresses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.auto_configuration = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration()
                    self.auto_configuration.parent = self
                    self.eui64_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses()
                    self.eui64_addresses.parent = self
                    self.link_local_address = None
                    self.regular_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses()
                    self.regular_addresses.parent = self


                class LinkLocalAddress(object):
                    """
                    Link local IPv6 address
                    
                    .. attribute:: address
                    
                    	IPv6 address
                    	**type**\: one of the below types:
                    
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    
                    ----
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: route_tag
                    
                    	RouteTag
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: zone
                    
                    	IPv6 address zone
                    	**type**\: str
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.address = None
                        self.route_tag = None
                        self.zone = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:link-local-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address is not None:
                            return True

                        if self.route_tag is not None:
                            return True

                        if self.zone is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress']['meta_info']


                class Eui64Addresses(object):
                    """
                    EUI\-64 IPv6 address Table
                    
                    .. attribute:: eui64_address
                    
                    	EUI\-64 IPv6 address
                    	**type**\: list of :py:class:`Eui64Address <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.eui64_address = YList()
                        self.eui64_address.parent = self
                        self.eui64_address.name = 'eui64_address'


                    class Eui64Address(object):
                        """
                        EUI\-64 IPv6 address
                        
                        .. attribute:: address  <key>
                        
                        	IPv6 address
                        	**type**\: one of the below types:
                        
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: prefix_length
                        
                        	Prefix Length
                        	**type**\: int
                        
                        	**range:** 0..128
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: zone
                        
                        	IPv6 address zone
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv6-ma-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.address = None
                            self.prefix_length = None
                            self.route_tag = None
                            self.zone = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.address is None:
                                raise YPYModelError('Key property address is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:eui64-address[Cisco-IOS-XR-ipv6-ma-cfg:address = ' + str(self.address) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.address is not None:
                                return True

                            if self.prefix_length is not None:
                                return True

                            if self.route_tag is not None:
                                return True

                            if self.zone is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:eui64-addresses'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.eui64_address is not None:
                            for child_ref in self.eui64_address:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses']['meta_info']


                class RegularAddresses(object):
                    """
                    Regular IPv6 address Table
                    
                    .. attribute:: regular_address
                    
                    	Regular IPv6 address
                    	**type**\: list of :py:class:`RegularAddress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.regular_address = YList()
                        self.regular_address.parent = self
                        self.regular_address.name = 'regular_address'


                    class RegularAddress(object):
                        """
                        Regular IPv6 address
                        
                        .. attribute:: address  <key>
                        
                        	IPv6 address
                        	**type**\: one of the below types:
                        
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        
                        ----
                        .. attribute:: prefix_length
                        
                        	Prefix Length
                        	**type**\: int
                        
                        	**range:** 0..128
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: zone
                        
                        	IPv6 address zone
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv6-ma-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.address = None
                            self.prefix_length = None
                            self.route_tag = None
                            self.zone = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.address is None:
                                raise YPYModelError('Key property address is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:regular-address[Cisco-IOS-XR-ipv6-ma-cfg:address = ' + str(self.address) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.address is not None:
                                return True

                            if self.prefix_length is not None:
                                return True

                            if self.route_tag is not None:
                                return True

                            if self.zone is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:regular-addresses'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.regular_address is not None:
                            for child_ref in self.regular_address:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses']['meta_info']


                class AutoConfiguration(object):
                    """
                    Auto IPv6 Interface Configuration
                    
                    .. attribute:: enable
                    
                    	The flag to enable auto ipv6 interface configuration
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.enable = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:auto-configuration'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:addresses'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.auto_configuration is not None and self.auto_configuration._has_data():
                        return True

                    if self.eui64_addresses is not None and self.eui64_addresses._has_data():
                        return True

                    if self.link_local_address is not None and self.link_local_address._has_data():
                        return True

                    if self.regular_addresses is not None and self.regular_addresses._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses']['meta_info']


            class BgpFlowTagPolicyTable(object):
                """
                Interface ipv6 bgp policy propagation flowtag
                configuration
                
                .. attribute:: bgp_flow_tag_policy
                
                	Input
                	**type**\: :py:class:`BgpFlowTagPolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.bgp_flow_tag_policy = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy()
                    self.bgp_flow_tag_policy.parent = self


                class BgpFlowTagPolicy(object):
                    """
                    Input
                    
                    .. attribute:: destination
                    
                    	Flow Tag configuration on destination
                    	**type**\: bool
                    
                    .. attribute:: source
                    
                    	Flow Tag configuration on source
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.destination = None
                        self.source = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:bgp-flow-tag-policy'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination is not None:
                            return True

                        if self.source is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:bgp-flow-tag-policy-table'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bgp_flow_tag_policy is not None and self.bgp_flow_tag_policy._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.addresses is not None and self.addresses._has_data():
                    return True

                if self.bgp_flow_tag_policy_table is not None and self.bgp_flow_tag_policy_table._has_data():
                    return True

                if self.bgp_policy_accountings is not None and self.bgp_policy_accountings._has_data():
                    return True

                if self.bgp_qos_policy_propagation is not None and self.bgp_qos_policy_propagation._has_data():
                    return True

                if self.mac_address_filters is not None and self.mac_address_filters._has_data():
                    return True

                if self.mtu is not None:
                    return True

                if self.tcp_mss_adjust_enable is not None:
                    return True

                if self.ttl_propagate_disable is not None:
                    return True

                if self.unnumbered is not None:
                    return True

                if self.unreachables is not None:
                    return True

                if self.verify is not None and self.verify._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Network']['meta_info']


        class Ipv6Neighbor(object):
            """
            IPv6 interface neighbor or neighbor discovery
            configuration
            
            .. attribute:: cache_limit
            
            	Set the cache limit for neighbor entries
            	**type**\: int
            
            	**range:** 0..128000
            
            .. attribute:: duplicate_address_detection
            
            	Duplicate Address Detection (DAD)
            	**type**\: :py:class:`DuplicateAddressDetection <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.DuplicateAddressDetection>`
            
            .. attribute:: ipv6_prefixes
            
            	Prefixes 
            	**type**\: :py:class:`Ipv6Prefixes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes>`
            
            .. attribute:: managed_config
            
            	Host to use stateful protocol for address configuration
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ns_interval
            
            	Set advertised NS retransmission interval in milliseconds
            	**type**\: int
            
            	**range:** 1000..4294967295
            
            .. attribute:: other_config
            
            	Host to use stateful protocol for non\-address configuration
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ra_interval
            
            	Set IPv6 Router Advertisement (RA) interval in seconds
            	**type**\: :py:class:`RaInterval <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval>`
            
            .. attribute:: ra_lifetime
            
            	Set IPv6 Router Advertisement (RA) lifetime in seconds
            	**type**\: int
            
            	**range:** 0..9000
            
            .. attribute:: ra_suppress
            
            	Enable suppress IPv6 router advertisement
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ra_unspecify_hoplimit
            
            	Unspecify IPv6 Router Advertisement (RA) hop\-limit
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: ramtu_suppress
            
            	Enable suppress MTU in IPv6 router advertisement
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: reachable_time
            
            	Set advertised reachability time in milliseconds
            	**type**\: int
            
            	**range:** 0..3600000
            
            .. attribute:: redirect
            
            	Enable sending of ICMP Redirect messages
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: router_preference
            
            	RA Router Preference
            	**type**\: :py:class:`Ipv6NdRouterPrefEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6NdRouterPrefEnum>`
            
            .. attribute:: srp_multicast_encapsulation
            
            	Set SRP multicast prefer encapsulation
            	**type**\: :py:class:`Ipv6SrpEncapsulationEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6SrpEncapsulationEnum>`
            
            .. attribute:: srp_unicast_encapsulation
            
            	Set SRP unicast prefer encapsulation
            	**type**\: :py:class:`Ipv6SrpEncapsulationEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6SrpEncapsulationEnum>`
            
            

            """

            _prefix = 'ipv6-nd-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.cache_limit = None
                self.duplicate_address_detection = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.DuplicateAddressDetection()
                self.duplicate_address_detection.parent = self
                self.ipv6_prefixes = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes()
                self.ipv6_prefixes.parent = self
                self.managed_config = None
                self.ns_interval = None
                self.other_config = None
                self.ra_interval = None
                self.ra_lifetime = None
                self.ra_suppress = None
                self.ra_unspecify_hoplimit = None
                self.ramtu_suppress = None
                self.reachable_time = None
                self.redirect = None
                self.router_preference = None
                self.srp_multicast_encapsulation = None
                self.srp_unicast_encapsulation = None


            class DuplicateAddressDetection(object):
                """
                Duplicate Address Detection (DAD)
                
                .. attribute:: attempts
                
                	Set IPv6 duplicate address detection transmits
                	**type**\: int
                
                	**range:** 0..600
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.attempts = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-nd-cfg:duplicate-address-detection'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.attempts is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.DuplicateAddressDetection']['meta_info']


            class RaInterval(object):
                """
                Set IPv6 Router Advertisement (RA) interval in
                seconds
                
                .. attribute:: maximum
                
                	Maximum RA interval in seconds
                	**type**\: int
                
                	**range:** 4..1800
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: minimum
                
                	Minimum RA interval in seconds
                	**type**\: int
                
                	**range:** 3..1800
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.maximum = None
                    self.minimum = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-nd-cfg:ra-interval'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.maximum is not None:
                        return True

                    if self.minimum is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval']['meta_info']


            class Ipv6Prefixes(object):
                """
                Prefixes 
                
                .. attribute:: ipv6_prefix
                
                	Configure prefix with paramemters
                	**type**\: list of :py:class:`Ipv6Prefix <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix>`
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ipv6_prefix = YList()
                    self.ipv6_prefix.parent = self
                    self.ipv6_prefix.name = 'ipv6_prefix'


                class Ipv6Prefix(object):
                    """
                    Configure prefix with paramemters
                    
                    .. attribute:: prefix  <key>
                    
                    	IPv6 prefix
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: expiry_date
                    
                    	Date to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 1..31
                    
                    .. attribute:: expiry_hour
                    
                    	Hour to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 0..23
                    
                    .. attribute:: expiry_minute
                    
                    	Minute to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 0..59
                    
                    .. attribute:: expiry_month
                    
                    	Month to expire valid lifetime
                    	**type**\: :py:class:`Ipv6NdMonthEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6NdMonthEnum>`
                    
                    .. attribute:: expiry_year
                    
                    	Year to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 2003..2035
                    
                    .. attribute:: no_advertize
                    
                    	If set, prefix will not be advertized
                    	**type**\: bool
                    
                    .. attribute:: no_auto_config
                    
                    	If set, prefix will not be used for auto configuration
                    	**type**\: bool
                    
                    .. attribute:: off_link
                    
                    	If set, prefix will not be used for onlink determination
                    	**type**\: bool
                    
                    .. attribute:: pref_expiry_date
                    
                    	Date to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 1..31
                    
                    .. attribute:: pref_expiry_hour
                    
                    	Hour to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 0..23
                    
                    .. attribute:: pref_expiry_minute
                    
                    	Minute to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 0..59
                    
                    .. attribute:: pref_expiry_month
                    
                    	Month to expire preferred lifetime
                    	**type**\: :py:class:`Ipv6NdMonthEnum <ydk.models.ipv6.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6NdMonthEnum>`
                    
                    .. attribute:: pref_expiry_year
                    
                    	Year to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 2003..2035
                    
                    .. attribute:: preferred_lifetime
                    
                    	Preferred Lifetime (seconds) must be <= Valid Lifetime
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: prefix_length
                    
                    	Prefix mask length
                    	**type**\: int
                    
                    	**range:** 0..128
                    
                    .. attribute:: prefix_zone
                    
                    	Prefix zone
                    	**type**\: str
                    
                    	**range:** 0..9
                    
                    .. attribute:: valid_lifetime
                    
                    	Valid Lifetime (seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv6-nd-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix = None
                        self.expiry_date = None
                        self.expiry_hour = None
                        self.expiry_minute = None
                        self.expiry_month = None
                        self.expiry_year = None
                        self.no_advertize = None
                        self.no_auto_config = None
                        self.off_link = None
                        self.pref_expiry_date = None
                        self.pref_expiry_hour = None
                        self.pref_expiry_minute = None
                        self.pref_expiry_month = None
                        self.pref_expiry_year = None
                        self.preferred_lifetime = None
                        self.prefix_length = None
                        self.prefix_zone = None
                        self.valid_lifetime = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.prefix is None:
                            raise YPYModelError('Key property prefix is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-prefix[Cisco-IOS-XR-ipv6-nd-cfg:prefix = ' + str(self.prefix) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix is not None:
                            return True

                        if self.expiry_date is not None:
                            return True

                        if self.expiry_hour is not None:
                            return True

                        if self.expiry_minute is not None:
                            return True

                        if self.expiry_month is not None:
                            return True

                        if self.expiry_year is not None:
                            return True

                        if self.no_advertize is not None:
                            return True

                        if self.no_auto_config is not None:
                            return True

                        if self.off_link is not None:
                            return True

                        if self.pref_expiry_date is not None:
                            return True

                        if self.pref_expiry_hour is not None:
                            return True

                        if self.pref_expiry_minute is not None:
                            return True

                        if self.pref_expiry_month is not None:
                            return True

                        if self.pref_expiry_year is not None:
                            return True

                        if self.preferred_lifetime is not None:
                            return True

                        if self.prefix_length is not None:
                            return True

                        if self.prefix_zone is not None:
                            return True

                        if self.valid_lifetime is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-prefixes'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv6_prefix is not None:
                        for child_ref in self.ipv6_prefix:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.cache_limit is not None:
                    return True

                if self.duplicate_address_detection is not None and self.duplicate_address_detection._has_data():
                    return True

                if self.ipv6_prefixes is not None and self.ipv6_prefixes._has_data():
                    return True

                if self.managed_config is not None:
                    return True

                if self.ns_interval is not None:
                    return True

                if self.other_config is not None:
                    return True

                if self.ra_interval is not None and self.ra_interval._has_data():
                    return True

                if self.ra_lifetime is not None:
                    return True

                if self.ra_suppress is not None:
                    return True

                if self.ra_unspecify_hoplimit is not None:
                    return True

                if self.ramtu_suppress is not None:
                    return True

                if self.reachable_time is not None:
                    return True

                if self.redirect is not None:
                    return True

                if self.router_preference is not None:
                    return True

                if self.srp_multicast_encapsulation is not None:
                    return True

                if self.srp_unicast_encapsulation is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor']['meta_info']


        class TunnelTeAttributes(object):
            """
            MPLS tunnel attributes
            
            .. attribute:: admin_mode
            
            	Performs admin operations on the optical tunnel interface
            	**type**\: :py:class:`AdminMode <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode>`
            
            .. attribute:: affinity_mask
            
            	Set the affinity flags and mask
            	**type**\: :py:class:`AffinityMask <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask>`
            
            .. attribute:: auto_bandwidth
            
            	Tunnel Interface Auto\-bandwidth configuration data
            	**type**\: :py:class:`AutoBandwidth <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth>`
            
            .. attribute:: autoroute
            
            	Parameters for IGP routing over tunnel
            	**type**\: :py:class:`Autoroute <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute>`
            
            .. attribute:: backup_bandwidth
            
            	Tunnel backup bandwidth requirement
            	**type**\: :py:class:`BackupBandwidth <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth>`
            
            .. attribute:: bandwidth
            
            	Tunnel bandwidth requirement
            	**type**\: :py:class:`Bandwidth <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth>`
            
            .. attribute:: bfd_over_lsp
            
            	BFD over TE LSP
            	**type**\: :py:class:`BfdOverLsp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp>`
            
            .. attribute:: bidirectional
            
            	Tunnel Interface Bidirectional configuration data
            	**type**\: :py:class:`Bidirectional <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional>`
            
            .. attribute:: binding_segment_id_mpls
            
            	Allocate MPLS binding segment ID
            	**type**\: :py:class:`BindingSegmentIdMpls <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls>`
            
            .. attribute:: destination
            
            	Set the destination of the tunnel
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: fast_reroute
            
            	Specify MPLS tunnel can be fast\-rerouted
            	**type**\: :py:class:`FastReroute <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute>`
            
            .. attribute:: forward_class
            
            	Forward class value
            	**type**\: int
            
            	**range:** 1..7
            
            .. attribute:: forwarding_adjacency
            
            	Forwarding adjacency announcement to IGP
            	**type**\: :py:class:`ForwardingAdjacency <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency>`
            
            .. attribute:: load_share
            
            	Tunnel loadsharing metric
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: new_style_affinities
            
            	Tunnel new style affinity attributes table
            	**type**\: :py:class:`NewStyleAffinities <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinities>`
            
            .. attribute:: path_invalidation
            
            	Path invalidation configuration for this specific tunnel
            	**type**\: :py:class:`PathInvalidation <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathInvalidation>`
            
            .. attribute:: path_option_protects
            
            	Tunnel path protection state
            	**type**\: :py:class:`PathOptionProtects <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects>`
            
            .. attribute:: path_protection
            
            	Specify MPLS tunnel to be path protected
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: path_selection_cost_limit
            
            	Path selection cost limit configuration for this specific tunnel
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: path_selection_hop_limit
            
            	Path selection hop limit configuration for this specific tunnel
            	**type**\: int
            
            	**range:** 1..255
            
            .. attribute:: path_selection_metric
            
            	Path selection metric configuration for this specific tunnel
            	**type**\: :py:class:`MplsTePathSelectionMetricEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathSelectionMetricEnum>`
            
            .. attribute:: pce
            
            	PCE config
            	**type**\: :py:class:`Pce <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce>`
            
            .. attribute:: policy_classes
            
            	Policy classes for PBTS
            	**type**\: :py:class:`PolicyClasses <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses>`
            
            .. attribute:: priority
            
            	Tunnel Setup and Hold Priorities
            	**type**\: :py:class:`Priority <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority>`
            
            .. attribute:: record_route
            
            	Record the route used by the tunnel
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: signalled_name
            
            	The name of the tunnel to be included in signalling messages
            	**type**\: str
            
            	**range:** 0..254
            
            .. attribute:: soft_preemption
            
            	Enable the soft\-preemption feature on the tunnel
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: switching
            
            	Specify tunnel LSPs switching capability descriptor
            	**type**\: :py:class:`Switching <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching>`
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.admin_mode = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode()
                self.admin_mode.parent = self
                self.affinity_mask = None
                self.auto_bandwidth = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth()
                self.auto_bandwidth.parent = self
                self.autoroute = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute()
                self.autoroute.parent = self
                self.backup_bandwidth = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth()
                self.backup_bandwidth.parent = self
                self.bandwidth = None
                self.bfd_over_lsp = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp()
                self.bfd_over_lsp.parent = self
                self.bidirectional = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional()
                self.bidirectional.parent = self
                self.binding_segment_id_mpls = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls()
                self.binding_segment_id_mpls.parent = self
                self.destination = None
                self.fast_reroute = None
                self.forward_class = None
                self.forwarding_adjacency = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency()
                self.forwarding_adjacency.parent = self
                self.load_share = None
                self.new_style_affinities = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinities()
                self.new_style_affinities.parent = self
                self.path_invalidation = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathInvalidation()
                self.path_invalidation.parent = self
                self.path_option_protects = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects()
                self.path_option_protects.parent = self
                self.path_protection = None
                self.path_selection_cost_limit = None
                self.path_selection_hop_limit = None
                self.path_selection_metric = None
                self.pce = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce()
                self.pce.parent = self
                self.policy_classes = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses()
                self.policy_classes.parent = self
                self.priority = None
                self.record_route = None
                self.signalled_name = None
                self.soft_preemption = None
                self.switching = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching()
                self.switching.parent = self


            class BackupBandwidth(object):
                """
                Tunnel backup bandwidth requirement
                
                .. attribute:: backup_bandwidth
                
                	Backup bandwidth requested by this tunnel in kbps. Ignored if bandwidth limit type is unlimited
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: class_type
                
                	Backup bandwidth class type, relevant only if DSTEType is StandardDSTE
                	**type**\: :py:class:`MplsTeBackupBandwidthClassEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBackupBandwidthClassEnum>`
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\: :py:class:`MplsTeBandwidthDsteEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDsteEnum>`
                
                .. attribute:: limit_type
                
                	Backup bandwidth limit type
                	**type**\: :py:class:`MplsTeBandwidthLimitEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthLimitEnum>`
                
                .. attribute:: pool_type
                
                	Backup bandwidth pool type, relevant only if DSTEType is PreStandardDSTE
                	**type**\: :py:class:`MplsTeBackupBandwidthPoolEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBackupBandwidthPoolEnum>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.backup_bandwidth = None
                    self.class_type = None
                    self.dste_type = None
                    self.limit_type = None
                    self.pool_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:backup-bandwidth'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.backup_bandwidth is not None:
                        return True

                    if self.class_type is not None:
                        return True

                    if self.dste_type is not None:
                        return True

                    if self.limit_type is not None:
                        return True

                    if self.pool_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth']['meta_info']


            class BfdOverLsp(object):
                """
                BFD over TE LSP
                
                .. attribute:: bringup_timeout
                
                	Wait for session to come up in seconds (default 60)
                	**type**\: int
                
                	**range:** 60..3600
                
                .. attribute:: dampening_initial_wait
                
                	Initial delay in milliseconds (default 16000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: dampening_maximum_wait
                
                	Maximum delay in milliseconds (default 600000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: dampening_secondary_wait
                
                	Secondary delay in milliseconds (default 20000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: enable
                
                	Always set to true
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: encap_mode
                
                	Specify BFD Encap Mode on the tunnel
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: fast_detect
                
                	Enable BFD Fast Detect On the tunnel
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: minimum_interval
                
                	Specify the minimum interval for BFD failure detection
                	**type**\: int
                
                	**range:** 3..30000
                
                .. attribute:: multiplier
                
                	Specify the multiplier for BFD failure detection
                	**type**\: int
                
                	**range:** 3..10
                
                .. attribute:: periodic_ping_disable
                
                	Disable Periodic LSP Ping for BFD over LSP
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: periodic_ping_interval
                
                	Periodic LSP Ping Interval in seconds (default 120)
                	**type**\: int
                
                	**range:** 60..3600
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bringup_timeout = None
                    self.dampening_initial_wait = None
                    self.dampening_maximum_wait = None
                    self.dampening_secondary_wait = None
                    self.enable = None
                    self.encap_mode = None
                    self.fast_detect = None
                    self.minimum_interval = None
                    self.multiplier = None
                    self.periodic_ping_disable = None
                    self.periodic_ping_interval = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bfd-over-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bringup_timeout is not None:
                        return True

                    if self.dampening_initial_wait is not None:
                        return True

                    if self.dampening_maximum_wait is not None:
                        return True

                    if self.dampening_secondary_wait is not None:
                        return True

                    if self.enable is not None:
                        return True

                    if self.encap_mode is not None:
                        return True

                    if self.fast_detect is not None:
                        return True

                    if self.minimum_interval is not None:
                        return True

                    if self.multiplier is not None:
                        return True

                    if self.periodic_ping_disable is not None:
                        return True

                    if self.periodic_ping_interval is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp']['meta_info']


            class BindingSegmentIdMpls(object):
                """
                Allocate MPLS binding segment ID
                
                .. attribute:: label_value
                
                	MPLS label
                	**type**\: int
                
                	**range:** 16..4015
                
                .. attribute:: segment_id_type
                
                	MPLS label value type
                	**type**\: :py:class:`BindingSegmentIdEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.BindingSegmentIdEnum>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.label_value = None
                    self.segment_id_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:binding-segment-id-mpls'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.label_value is not None:
                        return True

                    if self.segment_id_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls']['meta_info']


            class AutoBandwidth(object):
                """
                Tunnel Interface Auto\-bandwidth configuration
                data
                
                .. attribute:: adjustment_threshold
                
                	Set the bandwidth change threshold to trigger adjustment
                	**type**\: :py:class:`AdjustmentThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold>`
                
                .. attribute:: application_frequency
                
                	Set the tunnel auto\-bw application frequency in minutes
                	**type**\: int
                
                	**range:** 5..10080
                
                .. attribute:: bandwidth_limits
                
                	Set min/max bandwidth auto\-bw can apply on a tunnel
                	**type**\: :py:class:`BandwidthLimits <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits>`
                
                .. attribute:: collection_only
                
                	Enable bandwidth collection only, no auto\-bw adjustment
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: enabled
                
                	This object is only valid for tunnel interfaces and it controls whether that interface has auto\-bw enabled on it or not.The object must be set before any other auto\-bw configuration is supplied for the interface, and must be the last auto\-bw configuration object to be removed
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: overflow
                
                	Configuring the tunnel overflow detection
                	**type**\: :py:class:`Overflow <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow>`
                
                .. attribute:: underflow
                
                	Configuring the tunnel underflow detection
                	**type**\: :py:class:`Underflow <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.adjustment_threshold = None
                    self.application_frequency = None
                    self.bandwidth_limits = None
                    self.collection_only = None
                    self.enabled = None
                    self.overflow = None
                    self.underflow = None


                class Underflow(object):
                    """
                    Configuring the tunnel underflow detection
                    
                    .. attribute:: underflow_threshold_limit
                    
                    	Number of consecutive collections exceeding threshold
                    	**type**\: int
                    
                    	**range:** 1..10
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: underflow_threshold_percent
                    
                    	Bandwidth change percent to trigger an underflow
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: underflow_threshold_value
                    
                    	Bandwidth change value to trigger an underflow (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.underflow_threshold_limit = None
                        self.underflow_threshold_percent = None
                        self.underflow_threshold_value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:underflow'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.underflow_threshold_limit is not None:
                            return True

                        if self.underflow_threshold_percent is not None:
                            return True

                        if self.underflow_threshold_value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow']['meta_info']


                class Overflow(object):
                    """
                    Configuring the tunnel overflow detection
                    
                    .. attribute:: overflow_threshold_limit
                    
                    	Number of consecutive collections exceeding threshold
                    	**type**\: int
                    
                    	**range:** 1..10
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: overflow_threshold_percent
                    
                    	Bandwidth change percent to trigger an overflow
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: overflow_threshold_value
                    
                    	Bandwidth change value to trigger an overflow (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.overflow_threshold_limit = None
                        self.overflow_threshold_percent = None
                        self.overflow_threshold_value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:overflow'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.overflow_threshold_limit is not None:
                            return True

                        if self.overflow_threshold_percent is not None:
                            return True

                        if self.overflow_threshold_value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow']['meta_info']


                class BandwidthLimits(object):
                    """
                    Set min/max bandwidth auto\-bw can apply on a
                    tunnel
                    
                    .. attribute:: bandwidth_max_limit
                    
                    	Set maximum bandwidth auto\-bw can apply on a tunnel
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: bandwidth_min_limit
                    
                    	Set minimum bandwidth auto\-bw can apply on a tunnel
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.bandwidth_max_limit = None
                        self.bandwidth_min_limit = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bandwidth-limits'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bandwidth_max_limit is not None:
                            return True

                        if self.bandwidth_min_limit is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits']['meta_info']


                class AdjustmentThreshold(object):
                    """
                    Set the bandwidth change threshold to trigger
                    adjustment
                    
                    .. attribute:: adjustment_threshold_percent
                    
                    	Bandwidth change percent to trigger adjustment
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: adjustment_threshold_value
                    
                    	Bandwidth change value to trigger adjustment (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.adjustment_threshold_percent = None
                        self.adjustment_threshold_value = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:adjustment-threshold'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.adjustment_threshold_percent is not None:
                            return True

                        if self.adjustment_threshold_value is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:auto-bandwidth'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.adjustment_threshold is not None and self.adjustment_threshold._has_data():
                        return True

                    if self.application_frequency is not None:
                        return True

                    if self.bandwidth_limits is not None and self.bandwidth_limits._has_data():
                        return True

                    if self.collection_only is not None:
                        return True

                    if self.enabled is not None:
                        return True

                    if self.overflow is not None and self.overflow._has_data():
                        return True

                    if self.underflow is not None and self.underflow._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth']['meta_info']


            class ForwardingAdjacency(object):
                """
                Forwarding adjacency announcement to IGP
                
                .. attribute:: enable
                
                	Enable forwarding adjacency
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: hold_time
                
                	Specify the holdtime for the tunnel as forwarding adjacency
                	**type**\: int
                
                	**range:** 0..20000
                
                .. attribute:: include_ipv6
                
                	Specify that the tunnel should be an IPv6 forwarding adjacency also
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.enable = None
                    self.hold_time = None
                    self.include_ipv6 = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:forwarding-adjacency'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.enable is not None:
                        return True

                    if self.hold_time is not None:
                        return True

                    if self.include_ipv6 is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency']['meta_info']


            class Autoroute(object):
                """
                Parameters for IGP routing over tunnel
                
                .. attribute:: autoroute_announce
                
                	Announce tunnel to IGP
                	**type**\: :py:class:`AutorouteAnnounce <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce>`
                
                .. attribute:: destination
                
                	Adds tunnel's destination in RIB
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: destination_xr
                
                	Tunnel Autoroute Destination(s)
                	**type**\: :py:class:`DestinationXr <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.DestinationXr>`
                
                .. attribute:: metric
                
                	Specify MPLS tunnel metric
                	**type**\: :py:class:`Metric <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Metric>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.autoroute_announce = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce()
                    self.autoroute_announce.parent = self
                    self.destination = None
                    self.destination_xr = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.DestinationXr()
                    self.destination_xr.parent = self
                    self.metric = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Metric()
                    self.metric.parent = self


                class Metric(object):
                    """
                    Specify MPLS tunnel metric
                    
                    .. attribute:: absolute_metric
                    
                    	The absolute metric value
                    	**type**\: int
                    
                    	**range:** 1..2147483647
                    
                    .. attribute:: constant_metric
                    
                    	The constant metric value
                    	**type**\: int
                    
                    	**range:** 1..2147483647
                    
                    .. attribute:: metric_type
                    
                    	Autoroute tunnel metric type
                    	**type**\: :py:class:`MplsTeAutorouteMetricEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeAutorouteMetricEnum>`
                    
                    .. attribute:: relative_metric
                    
                    	The value of the adjustment
                    	**type**\: int
                    
                    	**range:** \-10..10
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.absolute_metric = None
                        self.constant_metric = None
                        self.metric_type = None
                        self.relative_metric = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:metric'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.absolute_metric is not None:
                            return True

                        if self.constant_metric is not None:
                            return True

                        if self.metric_type is not None:
                            return True

                        if self.relative_metric is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Metric']['meta_info']


                class AutorouteAnnounce(object):
                    """
                    Announce tunnel to IGP
                    
                    .. attribute:: enable
                    
                    	Enable autoroute announce
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: include_ipv6
                    
                    	Specify that the tunnel should be an IPv6 autoroute announce also
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: metric
                    
                    	Specify MPLS tunnel metric
                    	**type**\: :py:class:`Metric <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.enable = None
                        self.include_ipv6 = None
                        self.metric = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric()
                        self.metric.parent = self


                    class Metric(object):
                        """
                        Specify MPLS tunnel metric
                        
                        .. attribute:: absolute_metric
                        
                        	The absolute metric value
                        	**type**\: int
                        
                        	**range:** 1..2147483647
                        
                        .. attribute:: constant_metric
                        
                        	The constant metric value
                        	**type**\: int
                        
                        	**range:** 1..2147483647
                        
                        .. attribute:: metric_type
                        
                        	Autoroute tunnel metric type
                        	**type**\: :py:class:`MplsTeAutorouteMetricEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeAutorouteMetricEnum>`
                        
                        .. attribute:: relative_metric
                        
                        	The value of the adjustment
                        	**type**\: int
                        
                        	**range:** \-10..10
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.absolute_metric = None
                            self.constant_metric = None
                            self.metric_type = None
                            self.relative_metric = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:metric'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.absolute_metric is not None:
                                return True

                            if self.constant_metric is not None:
                                return True

                            if self.metric_type is not None:
                                return True

                            if self.relative_metric is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:autoroute-announce'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        if self.include_ipv6 is not None:
                            return True

                        if self.metric is not None and self.metric._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce']['meta_info']


                class DestinationXr(object):
                    """
                    Tunnel Autoroute Destination(s)
                    
                    .. attribute:: destination
                    
                    	Destination address to add in RIB
                    	**type**\: list of :py:class:`Destination <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.DestinationXr.Destination>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.destination = YList()
                        self.destination.parent = self
                        self.destination.name = 'destination'


                    class Destination(object):
                        """
                        Destination address to add in RIB
                        
                        .. attribute:: destination_address  <key>
                        
                        	IP address of destination
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.destination_address is None:
                                raise YPYModelError('Key property destination_address is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:destination[Cisco-IOS-XR-mpls-te-cfg:destination-address = ' + str(self.destination_address) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.DestinationXr.Destination']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:destination-xr'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.destination is not None:
                            for child_ref in self.destination:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.DestinationXr']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:autoroute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.autoroute_announce is not None and self.autoroute_announce._has_data():
                        return True

                    if self.destination is not None:
                        return True

                    if self.destination_xr is not None and self.destination_xr._has_data():
                        return True

                    if self.metric is not None and self.metric._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute']['meta_info']


            class PathOptionProtects(object):
                """
                Tunnel path protection state
                
                .. attribute:: path_option_protect
                
                	Tunnel path protection
                	**type**\: list of :py:class:`PathOptionProtect <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.path_option_protect = YList()
                    self.path_option_protect.parent = self
                    self.path_option_protect.name = 'path_option_protect'


                class PathOptionProtect(object):
                    """
                    Tunnel path protection
                    
                    .. attribute:: protection  <key>
                    
                    	Protection type for this path
                    	**type**\: :py:class:`MplsTePathOptionProtectionEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProtectionEnum>`
                    
                    .. attribute:: path_options
                    
                    	Tunnel path options
                    	**type**\: :py:class:`PathOptions <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.protection = None
                        self.path_options = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions()
                        self.path_options.parent = self


                    class PathOptions(object):
                        """
                        Tunnel path options
                        
                        .. attribute:: path_option
                        
                        	A tunnel path option
                        	**type**\: list of :py:class:`PathOption <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path_option = YList()
                            self.path_option.parent = self
                            self.path_option.name = 'path_option'


                        class PathOption(object):
                            """
                            A tunnel path option
                            
                            .. attribute:: preference_level  <key>
                            
                            	Preference level for this path option
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            .. attribute:: destination
                            
                            	Deprecated
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: igp_area
                            
                            	IGP area ID in integer format
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: igp_area_ip_address_id
                            
                            	IGP area ID in IP address format
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: igp_instance
                            
                            	IGP instance name
                            	**type**\: str
                            
                            	**range:** 0..40
                            
                            .. attribute:: igp_type
                            
                            	IGP type
                            	**type**\: :py:class:`MplsTeIgpProtocolEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeIgpProtocolEnum>`
                            
                            .. attribute:: interface
                            
                            	Deprecated
                            	**type**\: str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: lockdown
                            
                            	Lockdown properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            .. attribute:: output_label
                            
                            	Deprecated
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: path_id
                            
                            	The ID of the IP explicit path associated with this option
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: path_name
                            
                            	The name of the IP explicit path associated with this option
                            	**type**\: str
                            
                            .. attribute:: path_option_attribute_set_name
                            
                            	Path option attribute set name
                            	**type**\: str
                            
                            .. attribute:: path_property
                            
                            	Deprecated
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: path_type
                            
                            	The type of the path option
                            	**type**\: :py:class:`MplsTePathOptionEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionEnum>`
                            
                            .. attribute:: pce
                            
                            	PCE properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            .. attribute:: pce_address
                            
                            	PCE address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: protected_by_preference_level
                            
                            	Preference level of the protecting explicit path. Leave unset in order to not use an explicit protecting path
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            .. attribute:: segment_routing
                            
                            	SegmentRouting properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            .. attribute:: verbatim
                            
                            	Verbatim properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            

                            """

                            _prefix = 'mpls-te-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.preference_level = None
                                self.destination = None
                                self.igp_area = None
                                self.igp_area_ip_address_id = None
                                self.igp_instance = None
                                self.igp_type = None
                                self.interface = None
                                self.lockdown = None
                                self.output_label = None
                                self.path_id = None
                                self.path_name = None
                                self.path_option_attribute_set_name = None
                                self.path_property = None
                                self.path_type = None
                                self.pce = None
                                self.pce_address = None
                                self.protected_by_preference_level = None
                                self.segment_routing = None
                                self.verbatim = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.preference_level is None:
                                    raise YPYModelError('Key property preference_level is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-option[Cisco-IOS-XR-mpls-te-cfg:preference-level = ' + str(self.preference_level) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.preference_level is not None:
                                    return True

                                if self.destination is not None:
                                    return True

                                if self.igp_area is not None:
                                    return True

                                if self.igp_area_ip_address_id is not None:
                                    return True

                                if self.igp_instance is not None:
                                    return True

                                if self.igp_type is not None:
                                    return True

                                if self.interface is not None:
                                    return True

                                if self.lockdown is not None:
                                    return True

                                if self.output_label is not None:
                                    return True

                                if self.path_id is not None:
                                    return True

                                if self.path_name is not None:
                                    return True

                                if self.path_option_attribute_set_name is not None:
                                    return True

                                if self.path_property is not None:
                                    return True

                                if self.path_type is not None:
                                    return True

                                if self.pce is not None:
                                    return True

                                if self.pce_address is not None:
                                    return True

                                if self.protected_by_preference_level is not None:
                                    return True

                                if self.segment_routing is not None:
                                    return True

                                if self.verbatim is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-options'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path_option is not None:
                                for child_ref in self.path_option:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.protection is None:
                            raise YPYModelError('Key property protection is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-option-protect[Cisco-IOS-XR-mpls-te-cfg:protection = ' + str(self.protection) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.protection is not None:
                            return True

                        if self.path_options is not None and self.path_options._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-option-protects'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.path_option_protect is not None:
                        for child_ref in self.path_option_protect:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects']['meta_info']


            class Bidirectional(object):
                """
                Tunnel Interface Bidirectional configuration
                data
                
                .. attribute:: association_corouted_type
                
                	Association Corouted Type
                	**type**\: :py:class:`AssociationCoroutedType <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType>`
                
                .. attribute:: association_parameters
                
                	Association ID, Source IP Address, and Global ID
                	**type**\: :py:class:`AssociationParameters <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters>`
                
                .. attribute:: enabled
                
                	This object is only valid for tunnel interfaces and it controls whether that interface has bidirectional enabled on it or not
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.association_corouted_type = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType()
                    self.association_corouted_type.parent = self
                    self.association_parameters = None
                    self.enabled = None


                class AssociationCoroutedType(object):
                    """
                    Association Corouted Type
                    
                    .. attribute:: enable
                    
                    	Controls whether association type is co\-routed
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: fault_oam
                    
                    	Tunnel Fault OAM
                    	**type**\: :py:class:`FaultOam <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.enable = None
                        self.fault_oam = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam()
                        self.fault_oam.parent = self


                    class FaultOam(object):
                        """
                        Tunnel Fault OAM
                        
                        .. attribute:: enable
                        
                        	This object is only valid for bidirectional tunnel interfaces and it controls whether that interface has fault OAM enabled on it or not
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.enable = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:fault-oam'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.enable is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:association-corouted-type'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.enable is not None:
                            return True

                        if self.fault_oam is not None and self.fault_oam._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType']['meta_info']


                class AssociationParameters(object):
                    """
                    Association ID, Source IP Address, and Global
                    ID
                    
                    .. attribute:: association_global_id
                    
                    	Association Global ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: association_id
                    
                    	Association ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: association_is_global_id_configured
                    
                    	Is Association Global ID Configured
                    	**type**\: bool
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: association_source_address
                    
                    	Association Source IP Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.association_global_id = None
                        self.association_id = None
                        self.association_is_global_id_configured = None
                        self.association_source_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:association-parameters'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.association_global_id is not None:
                            return True

                        if self.association_id is not None:
                            return True

                        if self.association_is_global_id_configured is not None:
                            return True

                        if self.association_source_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bidirectional'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.association_corouted_type is not None and self.association_corouted_type._has_data():
                        return True

                    if self.association_parameters is not None and self.association_parameters._has_data():
                        return True

                    if self.enabled is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional']['meta_info']


            class AdminMode(object):
                """
                Performs admin operations on the optical tunnel
                interface
                
                .. attribute:: deactivate_tunnel
                
                	Performs signalling operation to deactivate optical tunnel
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.deactivate_tunnel = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:admin-mode'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.deactivate_tunnel is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode']['meta_info']


            class Switching(object):
                """
                Specify tunnel LSPs switching capability
                descriptor
                
                .. attribute:: endpoint
                
                	Specify end point switching descriptor parameters
                	**type**\: :py:class:`Endpoint <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint>`
                
                .. attribute:: transit
                
                	Specify transit switching descriptor parameters
                	**type**\: :py:class:`Transit <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.endpoint = None
                    self.transit = None


                class Transit(object):
                    """
                    Specify transit switching descriptor
                    parameters
                    
                    .. attribute:: capability
                    
                    	Switching capability
                    	**type**\: :py:class:`MplsTeSwitchingCapEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingCapEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: encoding
                    
                    	LSP encoding
                    	**type**\: :py:class:`MplsTeSwitchingEncodeEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingEncodeEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.capability = None
                        self.encoding = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:transit'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.capability is not None:
                            return True

                        if self.encoding is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit']['meta_info']


                class Endpoint(object):
                    """
                    Specify end point switching descriptor
                    parameters
                    
                    .. attribute:: capability
                    
                    	Switching capability
                    	**type**\: :py:class:`MplsTeSwitchingCapEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingCapEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: encoding
                    
                    	LSP encoding
                    	**type**\: :py:class:`MplsTeSwitchingEncodeEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingEncodeEnum>`
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.capability = None
                        self.encoding = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:endpoint'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.capability is not None:
                            return True

                        if self.encoding is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:switching'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.endpoint is not None and self.endpoint._has_data():
                        return True

                    if self.transit is not None and self.transit._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching']['meta_info']


            class Pce(object):
                """
                PCE config
                
                .. attribute:: delegation
                
                	Enable PCE Delegation
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: enable
                
                	Always set to true
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.delegation = None
                    self.enable = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:pce'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.delegation is not None:
                        return True

                    if self.enable is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce']['meta_info']


            class Priority(object):
                """
                Tunnel Setup and Hold Priorities
                
                .. attribute:: hold_priority
                
                	Hold Priority
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hold_priority = None
                    self.setup_priority = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:priority'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hold_priority is not None:
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority']['meta_info']


            class AffinityMask(object):
                """
                Set the affinity flags and mask
                
                .. attribute:: affinity
                
                	Affinity flags
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: mask
                
                	Affinity mask
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.affinity = None
                    self.mask = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:affinity-mask'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.affinity is not None:
                        return True

                    if self.mask is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask']['meta_info']


            class Bandwidth(object):
                """
                Tunnel bandwidth requirement
                
                .. attribute:: bandwidth
                
                	The value of the bandwidth reserved by this tunnel in kbps
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: class_or_pool_type
                
                	Class type for the bandwith allocation
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\: :py:class:`MplsTeBandwidthDsteEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDsteEnum>`
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bandwidth = None
                    self.class_or_pool_type = None
                    self.dste_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bandwidth'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bandwidth is not None:
                        return True

                    if self.class_or_pool_type is not None:
                        return True

                    if self.dste_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth']['meta_info']


            class PolicyClasses(object):
                """
                Policy classes for PBTS
                
                .. attribute:: policy_class
                
                	Array of Policy class
                	**type**\: list of int
                
                	**range:** 1..8
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.policy_class = YLeafList()
                    self.policy_class.parent = self
                    self.policy_class.name = 'policy_class'

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:policy-classes'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.policy_class is not None:
                        for child in self.policy_class:
                            if child is not None:
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses']['meta_info']


            class NewStyleAffinities(object):
                """
                Tunnel new style affinity attributes table
                
                .. attribute:: new_style_affinity
                
                	Tunnel new style affinity attribute
                	**type**\: list of :py:class:`NewStyleAffinity <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinities.NewStyleAffinity>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.new_style_affinity = YList()
                    self.new_style_affinity.parent = self
                    self.new_style_affinity.name = 'new_style_affinity'


                class NewStyleAffinity(object):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity1  <key>
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity10  <key>
                    
                    	The name of the tenth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  <key>
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  <key>
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  <key>
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  <key>
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  <key>
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  <key>
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  <key>
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity9  <key>
                    
                    	The name of the nineth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity_type  <key>
                    
                    	The type of the affinity entry
                    	**type**\: :py:class:`MplsTeTunnelAffinityEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinityEnum>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.affinity1 = None
                        self.affinity10 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self.affinity9 = None
                        self.affinity_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.affinity1 is None:
                            raise YPYModelError('Key property affinity1 is None')
                        if self.affinity10 is None:
                            raise YPYModelError('Key property affinity10 is None')
                        if self.affinity2 is None:
                            raise YPYModelError('Key property affinity2 is None')
                        if self.affinity3 is None:
                            raise YPYModelError('Key property affinity3 is None')
                        if self.affinity4 is None:
                            raise YPYModelError('Key property affinity4 is None')
                        if self.affinity5 is None:
                            raise YPYModelError('Key property affinity5 is None')
                        if self.affinity6 is None:
                            raise YPYModelError('Key property affinity6 is None')
                        if self.affinity7 is None:
                            raise YPYModelError('Key property affinity7 is None')
                        if self.affinity8 is None:
                            raise YPYModelError('Key property affinity8 is None')
                        if self.affinity9 is None:
                            raise YPYModelError('Key property affinity9 is None')
                        if self.affinity_type is None:
                            raise YPYModelError('Key property affinity_type is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:new-style-affinity[Cisco-IOS-XR-mpls-te-cfg:affinity1 = ' + str(self.affinity1) + '][Cisco-IOS-XR-mpls-te-cfg:affinity10 = ' + str(self.affinity10) + '][Cisco-IOS-XR-mpls-te-cfg:affinity2 = ' + str(self.affinity2) + '][Cisco-IOS-XR-mpls-te-cfg:affinity3 = ' + str(self.affinity3) + '][Cisco-IOS-XR-mpls-te-cfg:affinity4 = ' + str(self.affinity4) + '][Cisco-IOS-XR-mpls-te-cfg:affinity5 = ' + str(self.affinity5) + '][Cisco-IOS-XR-mpls-te-cfg:affinity6 = ' + str(self.affinity6) + '][Cisco-IOS-XR-mpls-te-cfg:affinity7 = ' + str(self.affinity7) + '][Cisco-IOS-XR-mpls-te-cfg:affinity8 = ' + str(self.affinity8) + '][Cisco-IOS-XR-mpls-te-cfg:affinity9 = ' + str(self.affinity9) + '][Cisco-IOS-XR-mpls-te-cfg:affinity-type = ' + str(self.affinity_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.affinity1 is not None:
                            return True

                        if self.affinity10 is not None:
                            return True

                        if self.affinity2 is not None:
                            return True

                        if self.affinity3 is not None:
                            return True

                        if self.affinity4 is not None:
                            return True

                        if self.affinity5 is not None:
                            return True

                        if self.affinity6 is not None:
                            return True

                        if self.affinity7 is not None:
                            return True

                        if self.affinity8 is not None:
                            return True

                        if self.affinity9 is not None:
                            return True

                        if self.affinity_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinities.NewStyleAffinity']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:new-style-affinities'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.new_style_affinity is not None:
                        for child_ref in self.new_style_affinity:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinities']['meta_info']


            class FastReroute(object):
                """
                Specify MPLS tunnel can be fast\-rerouted
                
                .. attribute:: bandwidth_protection
                
                	Bandwidth Protection
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                .. attribute:: node_protection
                
                	Node Protection
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: _is_presence
                
                	Is present if this instance represents presence container else not
                	**type**\: bool
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bandwidth_protection = None
                    self.node_protection = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:fast-reroute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bandwidth_protection is not None:
                        return True

                    if self.node_protection is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute']['meta_info']


            class PathInvalidation(object):
                """
                Path invalidation configuration for this
                specific tunnel
                
                .. attribute:: path_invalidation_action
                
                	Path Invalidation Action
                	**type**\: :py:class:`PathInvalidationActionEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.PathInvalidationActionEnum>`
                
                .. attribute:: path_invalidation_timeout
                
                	Path Invalidation Timeout
                	**type**\: int
                
                	**range:** 0..60000
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.path_invalidation_action = None
                    self.path_invalidation_timeout = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-invalidation'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.path_invalidation_action is not None:
                        return True

                    if self.path_invalidation_timeout is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathInvalidation']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.admin_mode is not None and self.admin_mode._has_data():
                    return True

                if self.affinity_mask is not None and self.affinity_mask._has_data():
                    return True

                if self.auto_bandwidth is not None and self.auto_bandwidth._has_data():
                    return True

                if self.autoroute is not None and self.autoroute._has_data():
                    return True

                if self.backup_bandwidth is not None and self.backup_bandwidth._has_data():
                    return True

                if self.bandwidth is not None and self.bandwidth._has_data():
                    return True

                if self.bfd_over_lsp is not None and self.bfd_over_lsp._has_data():
                    return True

                if self.bidirectional is not None and self.bidirectional._has_data():
                    return True

                if self.binding_segment_id_mpls is not None and self.binding_segment_id_mpls._has_data():
                    return True

                if self.destination is not None:
                    return True

                if self.fast_reroute is not None and self.fast_reroute._has_data():
                    return True

                if self.forward_class is not None:
                    return True

                if self.forwarding_adjacency is not None and self.forwarding_adjacency._has_data():
                    return True

                if self.load_share is not None:
                    return True

                if self.new_style_affinities is not None and self.new_style_affinities._has_data():
                    return True

                if self.path_invalidation is not None and self.path_invalidation._has_data():
                    return True

                if self.path_option_protects is not None and self.path_option_protects._has_data():
                    return True

                if self.path_protection is not None:
                    return True

                if self.path_selection_cost_limit is not None:
                    return True

                if self.path_selection_hop_limit is not None:
                    return True

                if self.path_selection_metric is not None:
                    return True

                if self.pce is not None and self.pce._has_data():
                    return True

                if self.policy_classes is not None and self.policy_classes._has_data():
                    return True

                if self.priority is not None and self.priority._has_data():
                    return True

                if self.record_route is not None:
                    return True

                if self.signalled_name is not None:
                    return True

                if self.soft_preemption is not None:
                    return True

                if self.switching is not None and self.switching._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes']['meta_info']


        class TransportProfileTunnel(object):
            """
            MPLS\-TP tunnel attributes
            
            .. attribute:: bfd
            
            	Configure BFD parameters
            	**type**\: :py:class:`Bfd <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd>`
            
            .. attribute:: destination
            
            	Node identifier and optional global identifier and tunnel identifier at destination
            	**type**\: :py:class:`Destination <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination>`
            
            .. attribute:: fault
            
            	Fault management
            	**type**\: :py:class:`Fault <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault>`
            
            .. attribute:: protect_lsp
            
            	Protect LSP
            	**type**\: :py:class:`ProtectLsp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp>`
            
            .. attribute:: source
            
            	Transport profile node identifier in IPv4 address format
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: working_lsp
            
            	Working LSP
            	**type**\: :py:class:`WorkingLsp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp>`
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.bfd = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd()
                self.bfd.parent = self
                self.destination = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination()
                self.destination.parent = self
                self.fault = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault()
                self.fault.parent = self
                self.protect_lsp = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp()
                self.protect_lsp.parent = self
                self.source = None
                self.working_lsp = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp()
                self.working_lsp.parent = self


            class Bfd(object):
                """
                Configure BFD parameters
                
                .. attribute:: detection_multiplier
                
                	Detect multiplier
                	**type**\: int
                
                	**range:** 2..10
                
                .. attribute:: enable
                
                	Configure BFD parameters
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: min_interval
                
                	Hello interval, either in milli\-seconds or in micro\-seconds
                	**type**\: :py:class:`MinInterval <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval>`
                
                .. attribute:: min_interval_standby
                
                	Hello interval for standby transport profile LSP, either in milli\-seconds or in micro\-seconds
                	**type**\: :py:class:`MinIntervalStandby <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby>`
                
                .. attribute:: multiplier_standby
                
                	Detect multiplier for standby transport profile LSP
                	**type**\: int
                
                	**range:** 2..10
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.detection_multiplier = None
                    self.enable = None
                    self.min_interval = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval()
                    self.min_interval.parent = self
                    self.min_interval_standby = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby()
                    self.min_interval_standby.parent = self
                    self.multiplier_standby = None


                class MinInterval(object):
                    """
                    Hello interval, either in milli\-seconds or in
                    micro\-seconds
                    
                    .. attribute:: interval_ms
                    
                    	Hello interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 3..5000
                    
                    .. attribute:: interval_us
                    
                    	Hello interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 3000..5000000
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interval_ms = None
                        self.interval_us = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:min-interval'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interval_ms is not None:
                            return True

                        if self.interval_us is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval']['meta_info']


                class MinIntervalStandby(object):
                    """
                    Hello interval for standby transport profile
                    LSP, either in milli\-seconds or in
                    micro\-seconds
                    
                    .. attribute:: interval_standby_ms
                    
                    	Hello interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 3..5000
                    
                    .. attribute:: interval_standby_us
                    
                    	Hello interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 3000..5000000
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interval_standby_ms = None
                        self.interval_standby_us = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:min-interval-standby'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interval_standby_ms is not None:
                            return True

                        if self.interval_standby_us is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bfd'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.detection_multiplier is not None:
                        return True

                    if self.enable is not None:
                        return True

                    if self.min_interval is not None and self.min_interval._has_data():
                        return True

                    if self.min_interval_standby is not None and self.min_interval_standby._has_data():
                        return True

                    if self.multiplier_standby is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd']['meta_info']


            class WorkingLsp(object):
                """
                Working LSP
                
                .. attribute:: in_label
                
                	Incoming MPLS label of the working LSP
                	**type**\: int
                
                	**range:** 16..4015
                
                .. attribute:: lockout
                
                	Enable lockout of working LSP
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: lsp_id
                
                	LSP Identifier of the working LSP
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: out_label
                
                	Outgoing MPLS label of the working LSP
                	**type**\: :py:class:`OutLabel <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.in_label = None
                    self.lockout = None
                    self.lsp_id = None
                    self.out_label = None


                class OutLabel(object):
                    """
                    Outgoing MPLS label of the working LSP
                    
                    .. attribute:: label
                    
                    	MPLS label
                    	**type**\: int
                    
                    	**range:** 16..1048575
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: link
                    
                    	Transport profile identifier of outgoing link
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.label = None
                        self.link = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:out-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label is not None:
                            return True

                        if self.link is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:working-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.in_label is not None:
                        return True

                    if self.lockout is not None:
                        return True

                    if self.lsp_id is not None:
                        return True

                    if self.out_label is not None and self.out_label._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp']['meta_info']


            class Destination(object):
                """
                Node identifier and optional global identifier
                and tunnel identifier at destination
                
                .. attribute:: global_id
                
                	Numeric global identifier
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: node_id
                
                	Node identifier in IPv4 address format
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: tunnel_id
                
                	Numeric tunnel identifier
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.global_id = None
                    self.node_id = None
                    self.tunnel_id = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:destination'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.global_id is not None:
                        return True

                    if self.node_id is not None:
                        return True

                    if self.tunnel_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination']['meta_info']


            class Fault(object):
                """
                Fault management
                
                .. attribute:: enable
                
                	Enter transport profile tunnel fault configuration
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: protection_trigger
                
                	OAM events that trigger protection switching
                	**type**\: :py:class:`ProtectionTrigger <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.enable = None
                    self.protection_trigger = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger()
                    self.protection_trigger.parent = self


                class ProtectionTrigger(object):
                    """
                    OAM events that trigger protection switching
                    
                    .. attribute:: ais
                    
                    	Enable protection switching due to AIS event
                    	**type**\: bool
                    
                    .. attribute:: ldi
                    
                    	Enable protection switching due to LDI event
                    	**type**\: bool
                    
                    .. attribute:: lkr
                    
                    	Enable protection switching due to LKR event
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ais = None
                        self.ldi = None
                        self.lkr = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:protection-trigger'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ais is not None:
                            return True

                        if self.ldi is not None:
                            return True

                        if self.lkr is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:fault'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.enable is not None:
                        return True

                    if self.protection_trigger is not None and self.protection_trigger._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault']['meta_info']


            class ProtectLsp(object):
                """
                Protect LSP
                
                .. attribute:: in_label
                
                	Incoming MPLS label of the protect LSP
                	**type**\: int
                
                	**range:** 16..4015
                
                .. attribute:: lockout
                
                	Enable lockout of protect LSP
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: lsp_id
                
                	LSP Identifier of the protect LSP
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: out_label
                
                	Outgoing MPLS label of the protect LSP
                	**type**\: :py:class:`OutLabel <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.in_label = None
                    self.lockout = None
                    self.lsp_id = None
                    self.out_label = None


                class OutLabel(object):
                    """
                    Outgoing MPLS label of the protect LSP
                    
                    .. attribute:: label
                    
                    	MPLS label
                    	**type**\: int
                    
                    	**range:** 16..1048575
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    .. attribute:: link
                    
                    	Transport profile identifier of outgoing link
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: _is_presence
                    
                    	Is present if this instance represents presence container else not
                    	**type**\: bool
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.label = None
                        self.link = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:out-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label is not None:
                            return True

                        if self.link is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:protect-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.in_label is not None:
                        return True

                    if self.lockout is not None:
                        return True

                    if self.lsp_id is not None:
                        return True

                    if self.out_label is not None and self.out_label._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.bfd is not None and self.bfd._has_data():
                    return True

                if self.destination is not None and self.destination._has_data():
                    return True

                if self.fault is not None and self.fault._has_data():
                    return True

                if self.protect_lsp is not None and self.protect_lsp._has_data():
                    return True

                if self.source is not None:
                    return True

                if self.working_lsp is not None and self.working_lsp._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel']['meta_info']


        class MteTunnelAttributes(object):
            """
            MPLS P2MP tunnel attributes
            
            .. attribute:: affinity_mask
            
            	P2MP tunnel affinity and mask
            	**type**\: :py:class:`AffinityMask <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask>`
            
            .. attribute:: bandwidth
            
            	P2MP tunnel bandwidth requirement
            	**type**\: :py:class:`Bandwidth <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth>`
            
            .. attribute:: destination_leafs
            
            	P2MP destination table
            	**type**\: :py:class:`DestinationLeafs <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs>`
            
            .. attribute:: fast_reroute
            
            	Specify P2MP tunnel can be fast\-rerouted
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: impose_explicit_null
            
            	Impose an explicit null bellow the TE label
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: logging
            
            	Log tunnel LSP messages
            	**type**\: :py:class:`Logging <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging>`
            
            .. attribute:: new_style_affinities
            
            	P2MP tunnel new style affinity attributes table
            	**type**\: :py:class:`NewStyleAffinities <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities>`
            
            .. attribute:: path_selection_metric
            
            	Path selection configuration for this specific tunnel
            	**type**\: :py:class:`MplsTePathSelectionMetricEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathSelectionMetricEnum>`
            
            .. attribute:: priority
            
            	P2MP tunnel setup and hold priorities
            	**type**\: :py:class:`Priority <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority>`
            
            .. attribute:: record_route
            
            	Record route used by individual P2MP S2L(s)
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: signalled_name
            
            	The name of the P2MP tunnel to be included in signalling messages
            	**type**\: str
            
            	**range:** 0..254
            
            .. attribute:: signalled_payload
            
            	P2MP tunnel ipv6 signalled payload
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{1,8}
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.affinity_mask = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask()
                self.affinity_mask.parent = self
                self.bandwidth = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth()
                self.bandwidth.parent = self
                self.destination_leafs = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs()
                self.destination_leafs.parent = self
                self.fast_reroute = None
                self.impose_explicit_null = None
                self.logging = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging()
                self.logging.parent = self
                self.new_style_affinities = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities()
                self.new_style_affinities.parent = self
                self.path_selection_metric = None
                self.priority = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority()
                self.priority.parent = self
                self.record_route = None
                self.signalled_name = None
                self.signalled_payload = None


            class DestinationLeafs(object):
                """
                P2MP destination table
                
                .. attribute:: destination_leaf
                
                	P2MP destination leaf
                	**type**\: list of :py:class:`DestinationLeaf <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_leaf = YList()
                    self.destination_leaf.parent = self
                    self.destination_leaf.name = 'destination_leaf'


                class DestinationLeaf(object):
                    """
                    P2MP destination leaf
                    
                    .. attribute:: address  <key>
                    
                    	Address of P2MP destination
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: destination
                    
                    	Always set to true
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: destination_disable
                    
                    	Disables P2MP destination
                    	**type**\: :py:class:`Empty <ydk.types.Empty>`
                    
                    .. attribute:: path_options
                    
                    	P2MP destination path\-options attributes table
                    	**type**\: :py:class:`PathOptions <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions>`
                    
                    .. attribute:: s2l_logging
                    
                    	Log tunnel destination s2l messages
                    	**type**\: :py:class:`S2LLogging <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2LLogging>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.address = None
                        self.destination = None
                        self.destination_disable = None
                        self.path_options = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions()
                        self.path_options.parent = self
                        self.s2l_logging = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2LLogging()
                        self.s2l_logging.parent = self


                    class S2LLogging(object):
                        """
                        Log tunnel destination s2l messages
                        
                        .. attribute:: s2l_insufficient_bw_messsage
                        
                        	Log tunnel destination s2l insufficient BW messages
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        .. attribute:: s2l_pcalc_failure_message
                        
                        	Enable logging for destination s2l path\-calculation failures
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        .. attribute:: s2l_reroute_messsage
                        
                        	Log tunnel destination s2l rereoute messages
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        .. attribute:: s2l_state_message
                        
                        	Log tunnel destination s2l state messages
                        	**type**\: :py:class:`Empty <ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.s2l_insufficient_bw_messsage = None
                            self.s2l_pcalc_failure_message = None
                            self.s2l_reroute_messsage = None
                            self.s2l_state_message = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:s2l-logging'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.s2l_insufficient_bw_messsage is not None:
                                return True

                            if self.s2l_pcalc_failure_message is not None:
                                return True

                            if self.s2l_reroute_messsage is not None:
                                return True

                            if self.s2l_state_message is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2LLogging']['meta_info']


                    class PathOptions(object):
                        """
                        P2MP destination path\-options attributes
                        table
                        
                        .. attribute:: path_option
                        
                        	P2MP destination path option
                        	**type**\: list of :py:class:`PathOption <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path_option = YList()
                            self.path_option.parent = self
                            self.path_option.name = 'path_option'


                        class PathOption(object):
                            """
                            P2MP destination path option
                            
                            .. attribute:: preference_level  <key>
                            
                            	Preference level for this path option
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            .. attribute:: lockdown
                            
                            	Path option properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            .. attribute:: path_id
                            
                            	The ID of the IP explicit path associated with this option
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: path_name
                            
                            	The name of the IP explicit path associated with this option
                            	**type**\: str
                            
                            .. attribute:: path_type
                            
                            	The type of the path option
                            	**type**\: :py:class:`MplsTePathOptionEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionEnum>`
                            
                            .. attribute:: verbatim
                            
                            	Path option properties
                            	**type**\: :py:class:`MplsTePathOptionPropertyEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionPropertyEnum>`
                            
                            

                            """

                            _prefix = 'mpls-te-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.preference_level = None
                                self.lockdown = None
                                self.path_id = None
                                self.path_name = None
                                self.path_type = None
                                self.verbatim = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.preference_level is None:
                                    raise YPYModelError('Key property preference_level is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-option[Cisco-IOS-XR-mpls-te-cfg:preference-level = ' + str(self.preference_level) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.preference_level is not None:
                                    return True

                                if self.lockdown is not None:
                                    return True

                                if self.path_id is not None:
                                    return True

                                if self.path_name is not None:
                                    return True

                                if self.path_type is not None:
                                    return True

                                if self.verbatim is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:path-options'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path_option is not None:
                                for child_ref in self.path_option:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.address is None:
                            raise YPYModelError('Key property address is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:destination-leaf[Cisco-IOS-XR-mpls-te-cfg:address = ' + str(self.address) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address is not None:
                            return True

                        if self.destination is not None:
                            return True

                        if self.destination_disable is not None:
                            return True

                        if self.path_options is not None and self.path_options._has_data():
                            return True

                        if self.s2l_logging is not None and self.s2l_logging._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:destination-leafs'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_leaf is not None:
                        for child_ref in self.destination_leaf:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs']['meta_info']


            class Priority(object):
                """
                P2MP tunnel setup and hold priorities
                
                .. attribute:: hold_priority
                
                	Hold Priority
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..7
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hold_priority = None
                    self.setup_priority = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:priority'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hold_priority is not None:
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority']['meta_info']


            class NewStyleAffinities(object):
                """
                P2MP tunnel new style affinity attributes table
                
                .. attribute:: new_style_affinity
                
                	Tunnel new style affinity attribute
                	**type**\: list of :py:class:`NewStyleAffinity <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.new_style_affinity = YList()
                    self.new_style_affinity.parent = self
                    self.new_style_affinity.name = 'new_style_affinity'


                class NewStyleAffinity(object):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity1  <key>
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity10  <key>
                    
                    	The name of the tenth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  <key>
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  <key>
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  <key>
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  <key>
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  <key>
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  <key>
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  <key>
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity9  <key>
                    
                    	The name of the nineth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity_type  <key>
                    
                    	The type of the affinity entry
                    	**type**\: :py:class:`MplsTeTunnelAffinityEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinityEnum>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.affinity1 = None
                        self.affinity10 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self.affinity9 = None
                        self.affinity_type = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.affinity1 is None:
                            raise YPYModelError('Key property affinity1 is None')
                        if self.affinity10 is None:
                            raise YPYModelError('Key property affinity10 is None')
                        if self.affinity2 is None:
                            raise YPYModelError('Key property affinity2 is None')
                        if self.affinity3 is None:
                            raise YPYModelError('Key property affinity3 is None')
                        if self.affinity4 is None:
                            raise YPYModelError('Key property affinity4 is None')
                        if self.affinity5 is None:
                            raise YPYModelError('Key property affinity5 is None')
                        if self.affinity6 is None:
                            raise YPYModelError('Key property affinity6 is None')
                        if self.affinity7 is None:
                            raise YPYModelError('Key property affinity7 is None')
                        if self.affinity8 is None:
                            raise YPYModelError('Key property affinity8 is None')
                        if self.affinity9 is None:
                            raise YPYModelError('Key property affinity9 is None')
                        if self.affinity_type is None:
                            raise YPYModelError('Key property affinity_type is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:new-style-affinity[Cisco-IOS-XR-mpls-te-cfg:affinity1 = ' + str(self.affinity1) + '][Cisco-IOS-XR-mpls-te-cfg:affinity10 = ' + str(self.affinity10) + '][Cisco-IOS-XR-mpls-te-cfg:affinity2 = ' + str(self.affinity2) + '][Cisco-IOS-XR-mpls-te-cfg:affinity3 = ' + str(self.affinity3) + '][Cisco-IOS-XR-mpls-te-cfg:affinity4 = ' + str(self.affinity4) + '][Cisco-IOS-XR-mpls-te-cfg:affinity5 = ' + str(self.affinity5) + '][Cisco-IOS-XR-mpls-te-cfg:affinity6 = ' + str(self.affinity6) + '][Cisco-IOS-XR-mpls-te-cfg:affinity7 = ' + str(self.affinity7) + '][Cisco-IOS-XR-mpls-te-cfg:affinity8 = ' + str(self.affinity8) + '][Cisco-IOS-XR-mpls-te-cfg:affinity9 = ' + str(self.affinity9) + '][Cisco-IOS-XR-mpls-te-cfg:affinity-type = ' + str(self.affinity_type) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.affinity1 is not None:
                            return True

                        if self.affinity10 is not None:
                            return True

                        if self.affinity2 is not None:
                            return True

                        if self.affinity3 is not None:
                            return True

                        if self.affinity4 is not None:
                            return True

                        if self.affinity5 is not None:
                            return True

                        if self.affinity6 is not None:
                            return True

                        if self.affinity7 is not None:
                            return True

                        if self.affinity8 is not None:
                            return True

                        if self.affinity9 is not None:
                            return True

                        if self.affinity_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:new-style-affinities'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.new_style_affinity is not None:
                        for child_ref in self.new_style_affinity:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities']['meta_info']


            class Bandwidth(object):
                """
                P2MP tunnel bandwidth requirement
                
                .. attribute:: bandwidth
                
                	The value of the bandwidth reserved by this tunnel in kbps
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: class_or_pool_type
                
                	Class type for the bandwith allocation
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\: :py:class:`MplsTeBandwidthDsteEnum <ydk.models.mpls.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDsteEnum>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.bandwidth = None
                    self.class_or_pool_type = None
                    self.dste_type = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:bandwidth'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.bandwidth is not None:
                        return True

                    if self.class_or_pool_type is not None:
                        return True

                    if self.dste_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth']['meta_info']


            class AffinityMask(object):
                """
                P2MP tunnel affinity and mask
                
                .. attribute:: affinity
                
                	Affinity flags
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                .. attribute:: mask
                
                	Affinity mask
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.affinity = None
                    self.mask = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:affinity-mask'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.affinity is not None:
                        return True

                    if self.mask is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask']['meta_info']


            class Logging(object):
                """
                Log tunnel LSP messages
                
                .. attribute:: all
                
                	Log all events for a tunnel
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: bandwidth_change_message
                
                	Log tunnel bandwidth change messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: insufficient_bw_message
                
                	Log tunnel messages for insufficient bandwidth
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: pcalc_failure_message
                
                	Enable logging for path\-calculation failures
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: reoptimize_attempts_message
                
                	Log tunnel reoptimization attempts messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: reoptimized_message
                
                	Log tunnel reoptimized messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: reroute_messsage
                
                	Log tunnel rereoute messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: state_message
                
                	Log tunnel state messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                .. attribute:: sub_lsp_state_message
                
                	Log all tunnel sub\-LSP state messages
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.all = None
                    self.bandwidth_change_message = None
                    self.insufficient_bw_message = None
                    self.pcalc_failure_message = None
                    self.reoptimize_attempts_message = None
                    self.reoptimized_message = None
                    self.reroute_messsage = None
                    self.state_message = None
                    self.sub_lsp_state_message = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:logging'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.all is not None:
                        return True

                    if self.bandwidth_change_message is not None:
                        return True

                    if self.insufficient_bw_message is not None:
                        return True

                    if self.pcalc_failure_message is not None:
                        return True

                    if self.reoptimize_attempts_message is not None:
                        return True

                    if self.reoptimized_message is not None:
                        return True

                    if self.reroute_messsage is not None:
                        return True

                    if self.state_message is not None:
                        return True

                    if self.sub_lsp_state_message is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.affinity_mask is not None and self.affinity_mask._has_data():
                    return True

                if self.bandwidth is not None and self.bandwidth._has_data():
                    return True

                if self.destination_leafs is not None and self.destination_leafs._has_data():
                    return True

                if self.fast_reroute is not None:
                    return True

                if self.impose_explicit_null is not None:
                    return True

                if self.logging is not None and self.logging._has_data():
                    return True

                if self.new_style_affinities is not None and self.new_style_affinities._has_data():
                    return True

                if self.path_selection_metric is not None:
                    return True

                if self.priority is not None and self.priority._has_data():
                    return True

                if self.record_route is not None:
                    return True

                if self.signalled_name is not None:
                    return True

                if self.signalled_payload is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes']['meta_info']


        class CiscoIosXrNcs5500QosCfg_Qos(object):
            """
            Interface QOS configuration
            
            .. attribute:: actual_rate_down
            
            	Minimum bandwidth guaranteed for a subscriber
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: actual_rate_up
            
            	Minimum bandwidth guaranteed for a subscriber
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: input
            
            	Ingress service policy
            	**type**\: :py:class:`Input <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Input>`
            
            .. attribute:: output
            
            	Egress service policy
            	**type**\: :py:class:`Output <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Output>`
            
            

            """

            _prefix = 'ncs5500-qos-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.actual_rate_down = None
                self.actual_rate_up = None
                self.input = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Input()
                self.input.parent = self
                self.output = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Output()
                self.output.parent = self


            class Input(object):
                """
                Ingress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of :py:class:`ServicePolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Input.ServicePolicy>`
                
                

                """

                _prefix = 'ncs5500-qos-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.service_policy = YList()
                    self.service_policy.parent = self
                    self.service_policy.name = 'service_policy'


                class ServicePolicy(object):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  <key>
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**range:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\: :py:class:`QosPolicyAccountEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosPolicyAccountEnum>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: policy_merge
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: resource_id
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: spi_name
                    
                    	Not supported (Leave unspecified)
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    

                    """

                    _prefix = 'ncs5500-qos-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.policy_merge = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.service_policy_name is None:
                            raise YPYModelError('Key property service_policy_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ncs5500-qos-cfg:service-policy[Cisco-IOS-XR-ncs5500-qos-cfg:service-policy-name = ' + str(self.service_policy_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.service_policy_name is not None:
                            return True

                        if self.account_type is not None:
                            return True

                        if self.l1_user_defined is not None:
                            return True

                        if self.policy_merge is not None:
                            return True

                        if self.resource_id is not None:
                            return True

                        if self.service_fragment_parent_policy is not None:
                            return True

                        if self.spi_name is not None:
                            return True

                        if self.subscriber_parent_policy is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Input.ServicePolicy']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ncs5500-qos-cfg:input'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.service_policy is not None:
                        for child_ref in self.service_policy:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Input']['meta_info']


            class Output(object):
                """
                Egress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of :py:class:`ServicePolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Output.ServicePolicy>`
                
                

                """

                _prefix = 'ncs5500-qos-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.service_policy = YList()
                    self.service_policy.parent = self
                    self.service_policy.name = 'service_policy'


                class ServicePolicy(object):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  <key>
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**range:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\: :py:class:`QosPolicyAccountEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosPolicyAccountEnum>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: policy_merge
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: resource_id
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: spi_name
                    
                    	Not supported (Leave unspecified)
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.ncs5500.Cisco_IOS_XR_ncs5500_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    

                    """

                    _prefix = 'ncs5500-qos-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.policy_merge = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.service_policy_name is None:
                            raise YPYModelError('Key property service_policy_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-ncs5500-qos-cfg:service-policy[Cisco-IOS-XR-ncs5500-qos-cfg:service-policy-name = ' + str(self.service_policy_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.service_policy_name is not None:
                            return True

                        if self.account_type is not None:
                            return True

                        if self.l1_user_defined is not None:
                            return True

                        if self.policy_merge is not None:
                            return True

                        if self.resource_id is not None:
                            return True

                        if self.service_fragment_parent_policy is not None:
                            return True

                        if self.spi_name is not None:
                            return True

                        if self.subscriber_parent_policy is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Output.ServicePolicy']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ncs5500-qos-cfg:output'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.service_policy is not None:
                        for child_ref in self.service_policy:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos.Output']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ncs5500-qos-cfg:Cisco-IOS-XR-ncs5500-qos-cfg_qos'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.actual_rate_down is not None:
                    return True

                if self.actual_rate_up is not None:
                    return True

                if self.input is not None and self.input._has_data():
                    return True

                if self.output is not None and self.output._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrNcs5500QosCfg_Qos']['meta_info']


        class Pbr(object):
            """
            Dynamic Template PBR configuration
            
            .. attribute:: service_policy
            
            	PBR service policy configuration
            	**type**\: :py:class:`ServicePolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy>`
            
            .. attribute:: service_policy_in
            
            	Class for subscriber ingress policy
            	**type**\: str
            
            

            """

            _prefix = 'pbr-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.service_policy = InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy()
                self.service_policy.parent = self
                self.service_policy_in = None


            class ServicePolicy(object):
                """
                PBR service policy configuration
                
                .. attribute:: input
                
                	Ingress service policy
                	**type**\: str
                
                

                """

                _prefix = 'pbr-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.input = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pbr-cfg:service-policy'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.input is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-pbr-cfg:pbr'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.service_policy is not None and self.service_policy._has_data():
                    return True

                if self.service_policy_in is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Pbr']['meta_info']


        class PerformanceManagement(object):
            """
            Configure pm parameters
            
            .. attribute:: ethernet_hour24
            
            	Configure pm parameters of 24 hour interval
            	**type**\: :py:class:`EthernetHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24>`
            
            .. attribute:: ethernet_minute15
            
            	set opr min threshold
            	**type**\: :py:class:`EthernetMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15>`
            
            .. attribute:: ho_vc_hour24
            
            	set HO\_VC threshold
            	**type**\: :py:class:`HoVcHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24>`
            
            .. attribute:: ho_vc_minute15
            
            	set HO\_VC threshold
            	**type**\: :py:class:`HoVcMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15>`
            
            .. attribute:: hour24
            
            	Configure pm parameters of 24 hour interval
            	**type**\: :py:class:`Hour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24>`
            
            .. attribute:: hour24_gfp
            
            	Configure pm parameters of gfp 24 hour interval
            	**type**\: :py:class:`Hour24Gfp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp>`
            
            .. attribute:: hour24_path
            
            	Configure pm parameters of pathmonitor 24 hour interval
            	**type**\: :py:class:`Hour24Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path>`
            
            .. attribute:: hour24otn_tcms
            
            	Configure pm parameters of tcm's 24 hour interval
            	**type**\: :py:class:`Hour24OtnTcms <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms>`
            
            .. attribute:: minute15
            
            	set opr min threshold
            	**type**\: :py:class:`Minute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15>`
            
            .. attribute:: minute15_gfp
            
            	set opr min threshold
            	**type**\: :py:class:`Minute15Gfp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp>`
            
            .. attribute:: minute15_path
            
            	set opr min threshold
            	**type**\: :py:class:`Minute15Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path>`
            
            .. attribute:: minute15otn_tcms
            
            	set opr min threshold
            	**type**\: :py:class:`Minute15OtnTcms <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms>`
            
            .. attribute:: oc_hour24
            
            	set Oc threshold
            	**type**\: :py:class:`OcHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24>`
            
            .. attribute:: oc_minute15
            
            	set OC threshold
            	**type**\: :py:class:`OcMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15>`
            
            .. attribute:: sonet_hour24
            
            	set Sonet threshold
            	**type**\: :py:class:`SonetHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24>`
            
            .. attribute:: sonet_minute15
            
            	set Sonet threshold
            	**type**\: :py:class:`SonetMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15>`
            
            .. attribute:: stm_hour24
            
            	set STM threshold
            	**type**\: :py:class:`StmHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24>`
            
            .. attribute:: stm_minute15
            
            	set STM threshold
            	**type**\: :py:class:`StmMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15>`
            
            .. attribute:: sts_hour24
            
            	set STS threshold
            	**type**\: :py:class:`StsHour24 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24>`
            
            .. attribute:: sts_minute15
            
            	set STS threshold
            	**type**\: :py:class:`StsMinute15 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15>`
            
            

            """

            _prefix = 'pmengine-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ethernet_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24()
                self.ethernet_hour24.parent = self
                self.ethernet_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15()
                self.ethernet_minute15.parent = self
                self.ho_vc_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24()
                self.ho_vc_hour24.parent = self
                self.ho_vc_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15()
                self.ho_vc_minute15.parent = self
                self.hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24()
                self.hour24.parent = self
                self.hour24_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp()
                self.hour24_gfp.parent = self
                self.hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path()
                self.hour24_path.parent = self
                self.hour24otn_tcms = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms()
                self.hour24otn_tcms.parent = self
                self.minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15()
                self.minute15.parent = self
                self.minute15_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp()
                self.minute15_gfp.parent = self
                self.minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path()
                self.minute15_path.parent = self
                self.minute15otn_tcms = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms()
                self.minute15otn_tcms.parent = self
                self.oc_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24()
                self.oc_hour24.parent = self
                self.oc_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15()
                self.oc_minute15.parent = self
                self.sonet_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24()
                self.sonet_hour24.parent = self
                self.sonet_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15()
                self.sonet_minute15.parent = self
                self.stm_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24()
                self.stm_hour24.parent = self
                self.stm_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15()
                self.stm_minute15.parent = self
                self.sts_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24()
                self.sts_hour24.parent = self
                self.sts_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15()
                self.sts_minute15.parent = self


            class StmHour24(object):
                """
                set STM threshold
                
                .. attribute:: stm_hour24_stm
                
                	Configure stm performance monitoring
                	**type**\: :py:class:`StmHour24Stm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.stm_hour24_stm = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm()
                    self.stm_hour24_stm.parent = self


                class StmHour24Stm(object):
                    """
                    Configure stm performance monitoring
                    
                    .. attribute:: stm_hour24_stm_reports
                    
                    	set stm TCA reporting status
                    	**type**\: :py:class:`StmHour24StmReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports>`
                    
                    .. attribute:: stm_hour24_stm_thresholds
                    
                    	Configure threshold on stm parameters
                    	**type**\: :py:class:`StmHour24StmThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.stm_hour24_stm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports()
                        self.stm_hour24_stm_reports.parent = self
                        self.stm_hour24_stm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds()
                        self.stm_hour24_stm_thresholds.parent = self


                    class StmHour24StmReports(object):
                        """
                        set stm TCA reporting status
                        
                        .. attribute:: stm_hour24_stm_report
                        
                        	none
                        	**type**\: list of :py:class:`StmHour24StmReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.stm_hour24_stm_report = YList()
                            self.stm_hour24_stm_report.parent = self
                            self.stm_hour24_stm_report.name = 'stm_hour24_stm_report'


                        class StmHour24StmReport(object):
                            """
                            none
                            
                            .. attribute:: stm_report  <key>
                            
                            	Stm Report Type
                            	**type**\: :py:class:`StmReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StmReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Stm Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.stm_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.stm_report is None:
                                    raise YPYModelError('Key property stm_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24-stm-report[Cisco-IOS-XR-pmengine-cfg:stm-report = ' + str(self.stm_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.stm_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24-stm-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.stm_hour24_stm_report is not None:
                                for child_ref in self.stm_hour24_stm_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports']['meta_info']


                    class StmHour24StmThresholds(object):
                        """
                        Configure threshold on stm parameters
                        
                        .. attribute:: stm_hour24_stm_threshold
                        
                        	none
                        	**type**\: list of :py:class:`StmHour24StmThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.stm_hour24_stm_threshold = YList()
                            self.stm_hour24_stm_threshold.parent = self
                            self.stm_hour24_stm_threshold.name = 'stm_hour24_stm_threshold'


                        class StmHour24StmThreshold(object):
                            """
                            none
                            
                            .. attribute:: stm_threshold  <key>
                            
                            	Stm Threshold Type
                            	**type**\: :py:class:`StmThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StmThresholdEnum>`
                            
                            .. attribute:: stm_threshold_value
                            
                            	Stm Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.stm_threshold = None
                                self.stm_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.stm_threshold is None:
                                    raise YPYModelError('Key property stm_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24-stm-threshold[Cisco-IOS-XR-pmengine-cfg:stm-threshold = ' + str(self.stm_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.stm_threshold is not None:
                                    return True

                                if self.stm_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24-stm-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.stm_hour24_stm_threshold is not None:
                                for child_ref in self.stm_hour24_stm_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24-stm'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.stm_hour24_stm_reports is not None and self.stm_hour24_stm_reports._has_data():
                            return True

                        if self.stm_hour24_stm_thresholds is not None and self.stm_hour24_stm_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.stm_hour24_stm is not None and self.stm_hour24_stm._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24']['meta_info']


            class Minute15Gfp(object):
                """
                set opr min threshold
                
                .. attribute:: minute15_gfp
                
                	Configure gfp performance monitoring
                	**type**\: :py:class:`Minute15Gfp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.minute15_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp()
                    self.minute15_gfp.parent = self


                class Minute15Gfp(object):
                    """
                    Configure gfp performance monitoring
                    
                    .. attribute:: minute15_gfp_reports
                    
                    	set gfp TCA reporting status
                    	**type**\: :py:class:`Minute15GfpReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpReports>`
                    
                    .. attribute:: minute15_gfp_thresholds
                    
                    	Configure threshold on gfp parameters
                    	**type**\: :py:class:`Minute15GfpThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.minute15_gfp_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpReports()
                        self.minute15_gfp_reports.parent = self
                        self.minute15_gfp_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpThresholds()
                        self.minute15_gfp_thresholds.parent = self


                    class Minute15GfpReports(object):
                        """
                        set gfp TCA reporting status
                        
                        .. attribute:: minute15_gfp_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15GfpReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpReports.Minute15GfpReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_gfp_report = YList()
                            self.minute15_gfp_report.parent = self
                            self.minute15_gfp_report.name = 'minute15_gfp_report'


                        class Minute15GfpReport(object):
                            """
                            none
                            
                            .. attribute:: gfp_report  <key>
                            
                            	Gfp Report Type
                            	**type**\: :py:class:`GfpReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.GfpReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.gfp_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.gfp_report is None:
                                    raise YPYModelError('Key property gfp_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp-report[Cisco-IOS-XR-pmengine-cfg:gfp-report = ' + str(self.gfp_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gfp_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpReports.Minute15GfpReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_gfp_report is not None:
                                for child_ref in self.minute15_gfp_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpReports']['meta_info']


                    class Minute15GfpThresholds(object):
                        """
                        Configure threshold on gfp parameters
                        
                        .. attribute:: minute15_gfp_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Minute15GfpThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpThresholds.Minute15GfpThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_gfp_threshold = YList()
                            self.minute15_gfp_threshold.parent = self
                            self.minute15_gfp_threshold.name = 'minute15_gfp_threshold'


                        class Minute15GfpThreshold(object):
                            """
                            none
                            
                            .. attribute:: gfp_threshold  <key>
                            
                            	Gfp Threshold Type
                            	**type**\: :py:class:`GfpThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.GfpThresholdEnum>`
                            
                            .. attribute:: gfp_threshold_value
                            
                            	Gfp Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.gfp_threshold = None
                                self.gfp_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.gfp_threshold is None:
                                    raise YPYModelError('Key property gfp_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp-threshold[Cisco-IOS-XR-pmengine-cfg:gfp-threshold = ' + str(self.gfp_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gfp_threshold is not None:
                                    return True

                                if self.gfp_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpThresholds.Minute15GfpThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_gfp_threshold is not None:
                                for child_ref in self.minute15_gfp_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp.Minute15GfpThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.minute15_gfp_reports is not None and self.minute15_gfp_reports._has_data():
                            return True

                        if self.minute15_gfp_thresholds is not None and self.minute15_gfp_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-gfp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.minute15_gfp is not None and self.minute15_gfp._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp']['meta_info']


            class SonetMinute15(object):
                """
                set Sonet threshold
                
                .. attribute:: sonet_minute15_ocn
                
                	Configure ocn performance monitoring
                	**type**\: :py:class:`SonetMinute15Ocn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn>`
                
                .. attribute:: sonet_minute15_path
                
                	Configure Path performance monitoring
                	**type**\: :py:class:`SonetMinute15Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sonet_minute15_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn()
                    self.sonet_minute15_ocn.parent = self
                    self.sonet_minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path()
                    self.sonet_minute15_path.parent = self


                class SonetMinute15Path(object):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sonet_minute15_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\: :py:class:`SonetMinute15PathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports>`
                    
                    .. attribute:: sonet_minute15_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\: :py:class:`SonetMinute15PathThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sonet_minute15_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports()
                        self.sonet_minute15_path_reports.parent = self
                        self.sonet_minute15_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds()
                        self.sonet_minute15_path_thresholds.parent = self


                    class SonetMinute15PathReports(object):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sonet_minute15_path_report
                        
                        	none
                        	**type**\: list of :py:class:`SonetMinute15PathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_minute15_path_report = YList()
                            self.sonet_minute15_path_report.parent = self
                            self.sonet_minute15_path_report.name = 'sonet_minute15_path_report'


                        class SonetMinute15PathReport(object):
                            """
                            none
                            
                            .. attribute:: path_report  <key>
                            
                            	Path Report Type
                            	**type**\: :py:class:`PathReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.PathReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_report is None:
                                    raise YPYModelError('Key property path_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-path-report[Cisco-IOS-XR-pmengine-cfg:path-report = ' + str(self.path_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_minute15_path_report is not None:
                                for child_ref in self.sonet_minute15_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports']['meta_info']


                    class SonetMinute15PathThresholds(object):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sonet_minute15_path_threshold
                        
                        	none
                        	**type**\: list of :py:class:`SonetMinute15PathThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_minute15_path_threshold = YList()
                            self.sonet_minute15_path_threshold.parent = self
                            self.sonet_minute15_path_threshold.name = 'sonet_minute15_path_threshold'


                        class SonetMinute15PathThreshold(object):
                            """
                            none
                            
                            .. attribute:: path_threshold  <key>
                            
                            	Path Threshold Type
                            	**type**\: :py:class:`PathThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.PathThresholdEnum>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_threshold = None
                                self.path_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_threshold is None:
                                    raise YPYModelError('Key property path_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-path-threshold[Cisco-IOS-XR-pmengine-cfg:path-threshold = ' + str(self.path_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_threshold is not None:
                                    return True

                                if self.path_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-path-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_minute15_path_threshold is not None:
                                for child_ref in self.sonet_minute15_path_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sonet_minute15_path_reports is not None and self.sonet_minute15_path_reports._has_data():
                            return True

                        if self.sonet_minute15_path_thresholds is not None and self.sonet_minute15_path_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path']['meta_info']


                class SonetMinute15Ocn(object):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: sonet_minute15_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\: :py:class:`SonetMinute15OcnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports>`
                    
                    .. attribute:: sonet_minute15_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\: :py:class:`SonetMinute15OcnThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sonet_minute15_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports()
                        self.sonet_minute15_ocn_reports.parent = self
                        self.sonet_minute15_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds()
                        self.sonet_minute15_ocn_thresholds.parent = self


                    class SonetMinute15OcnReports(object):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: sonet_minute15_ocn_report
                        
                        	none
                        	**type**\: list of :py:class:`SonetMinute15OcnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_minute15_ocn_report = YList()
                            self.sonet_minute15_ocn_report.parent = self
                            self.sonet_minute15_ocn_report.name = 'sonet_minute15_ocn_report'


                        class SonetMinute15OcnReport(object):
                            """
                            none
                            
                            .. attribute:: ocn_report  <key>
                            
                            	Ocn Report Type
                            	**type**\: :py:class:`OcnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_report is None:
                                    raise YPYModelError('Key property ocn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-ocn-report[Cisco-IOS-XR-pmengine-cfg:ocn-report = ' + str(self.ocn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-ocn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_minute15_ocn_report is not None:
                                for child_ref in self.sonet_minute15_ocn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports']['meta_info']


                    class SonetMinute15OcnThresholds(object):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: sonet_minute15_ocn_threshold
                        
                        	none
                        	**type**\: list of :py:class:`SonetMinute15OcnThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_minute15_ocn_threshold = YList()
                            self.sonet_minute15_ocn_threshold.parent = self
                            self.sonet_minute15_ocn_threshold.name = 'sonet_minute15_ocn_threshold'


                        class SonetMinute15OcnThreshold(object):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  <key>
                            
                            	Ocn Threshold Type
                            	**type**\: :py:class:`OcnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnThresholdEnum>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_threshold is None:
                                    raise YPYModelError('Key property ocn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-ocn-threshold[Cisco-IOS-XR-pmengine-cfg:ocn-threshold = ' + str(self.ocn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_threshold is not None:
                                    return True

                                if self.ocn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-ocn-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_minute15_ocn_threshold is not None:
                                for child_ref in self.sonet_minute15_ocn_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15-ocn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sonet_minute15_ocn_reports is not None and self.sonet_minute15_ocn_reports._has_data():
                            return True

                        if self.sonet_minute15_ocn_thresholds is not None and self.sonet_minute15_ocn_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sonet_minute15_ocn is not None and self.sonet_minute15_ocn._has_data():
                        return True

                    if self.sonet_minute15_path is not None and self.sonet_minute15_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15']['meta_info']


            class Hour24Gfp(object):
                """
                Configure pm parameters of gfp 24 hour interval
                
                .. attribute:: hour24_gfp
                
                	Configure gfp performance monitoring
                	**type**\: :py:class:`Hour24Gfp <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hour24_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp()
                    self.hour24_gfp.parent = self


                class Hour24Gfp(object):
                    """
                    Configure gfp performance monitoring
                    
                    .. attribute:: hour24_gfp_reports
                    
                    	set gfp TCA reporting status
                    	**type**\: :py:class:`Hour24GfpReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpReports>`
                    
                    .. attribute:: hour24_gfp_thresholds
                    
                    	Configure threshold on gfp parameters
                    	**type**\: :py:class:`Hour24GfpThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24_gfp_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpReports()
                        self.hour24_gfp_reports.parent = self
                        self.hour24_gfp_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpThresholds()
                        self.hour24_gfp_thresholds.parent = self


                    class Hour24GfpReports(object):
                        """
                        set gfp TCA reporting status
                        
                        .. attribute:: hour24_gfp_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24GfpReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpReports.Hour24GfpReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_gfp_report = YList()
                            self.hour24_gfp_report.parent = self
                            self.hour24_gfp_report.name = 'hour24_gfp_report'


                        class Hour24GfpReport(object):
                            """
                            none
                            
                            .. attribute:: gfp_report  <key>
                            
                            	Gfp Report Type
                            	**type**\: :py:class:`GfpReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.GfpReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.gfp_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.gfp_report is None:
                                    raise YPYModelError('Key property gfp_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp-report[Cisco-IOS-XR-pmengine-cfg:gfp-report = ' + str(self.gfp_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gfp_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpReports.Hour24GfpReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_gfp_report is not None:
                                for child_ref in self.hour24_gfp_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpReports']['meta_info']


                    class Hour24GfpThresholds(object):
                        """
                        Configure threshold on gfp parameters
                        
                        .. attribute:: hour24_gfp_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24GfpThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpThresholds.Hour24GfpThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_gfp_threshold = YList()
                            self.hour24_gfp_threshold.parent = self
                            self.hour24_gfp_threshold.name = 'hour24_gfp_threshold'


                        class Hour24GfpThreshold(object):
                            """
                            none
                            
                            .. attribute:: gfp_threshold  <key>
                            
                            	Gfp Threshold Type
                            	**type**\: :py:class:`GfpThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.GfpThresholdEnum>`
                            
                            .. attribute:: gfp_threshold_value
                            
                            	Gfp Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.gfp_threshold = None
                                self.gfp_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.gfp_threshold is None:
                                    raise YPYModelError('Key property gfp_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp-threshold[Cisco-IOS-XR-pmengine-cfg:gfp-threshold = ' + str(self.gfp_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gfp_threshold is not None:
                                    return True

                                if self.gfp_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpThresholds.Hour24GfpThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_gfp_threshold is not None:
                                for child_ref in self.hour24_gfp_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp.Hour24GfpThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24_gfp_reports is not None and self.hour24_gfp_reports._has_data():
                            return True

                        if self.hour24_gfp_thresholds is not None and self.hour24_gfp_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-gfp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hour24_gfp is not None and self.hour24_gfp._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp']['meta_info']


            class EthernetHour24(object):
                """
                Configure pm parameters of 24 hour interval
                
                .. attribute:: hour24_ether
                
                	Configure ether performance monitoring
                	**type**\: :py:class:`Hour24Ether <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hour24_ether = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether()
                    self.hour24_ether.parent = self


                class Hour24Ether(object):
                    """
                    Configure ether performance monitoring
                    
                    .. attribute:: hour24_ether_reports
                    
                    	set ether TCA reporting status
                    	**type**\: :py:class:`Hour24EtherReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports>`
                    
                    .. attribute:: hour24_ether_thresholds
                    
                    	Configure threshold on ether parameters
                    	**type**\: :py:class:`Hour24EtherThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24_ether_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports()
                        self.hour24_ether_reports.parent = self
                        self.hour24_ether_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds()
                        self.hour24_ether_thresholds.parent = self


                    class Hour24EtherThresholds(object):
                        """
                        Configure threshold on ether parameters
                        
                        .. attribute:: hour24_ether_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24EtherThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_ether_threshold = YList()
                            self.hour24_ether_threshold.parent = self
                            self.hour24_ether_threshold.name = 'hour24_ether_threshold'


                        class Hour24EtherThreshold(object):
                            """
                            none
                            
                            .. attribute:: ether_threshold  <key>
                            
                            	Ether Threshold Type
                            	**type**\: :py:class:`EtherThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.EtherThresholdEnum>`
                            
                            .. attribute:: ether_threshold_value
                            
                            	Ether Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ether_threshold = None
                                self.ether_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ether_threshold is None:
                                    raise YPYModelError('Key property ether_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-ether-threshold[Cisco-IOS-XR-pmengine-cfg:ether-threshold = ' + str(self.ether_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_threshold is not None:
                                    return True

                                if self.ether_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-ether-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_ether_threshold is not None:
                                for child_ref in self.hour24_ether_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds']['meta_info']


                    class Hour24EtherReports(object):
                        """
                        set ether TCA reporting status
                        
                        .. attribute:: hour24_ether_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24EtherReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_ether_report = YList()
                            self.hour24_ether_report.parent = self
                            self.hour24_ether_report.name = 'hour24_ether_report'


                        class Hour24EtherReport(object):
                            """
                            none
                            
                            .. attribute:: ether_report  <key>
                            
                            	Ether Report Type
                            	**type**\: :py:class:`EtherReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.EtherReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ether_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ether_report is None:
                                    raise YPYModelError('Key property ether_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-ether-report[Cisco-IOS-XR-pmengine-cfg:ether-report = ' + str(self.ether_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-ether-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_ether_report is not None:
                                for child_ref in self.hour24_ether_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-ether'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24_ether_reports is not None and self.hour24_ether_reports._has_data():
                            return True

                        if self.hour24_ether_thresholds is not None and self.hour24_ether_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ethernet-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hour24_ether is not None and self.hour24_ether._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24']['meta_info']


            class Minute15OtnTcms(object):
                """
                set opr min threshold
                
                .. attribute:: minute15otn_tcm
                
                	configure otn g709 tcm's performance monitoring
                	**type**\: list of :py:class:`Minute15OtnTcm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.minute15otn_tcm = YList()
                    self.minute15otn_tcm.parent = self
                    self.minute15otn_tcm.name = 'minute15otn_tcm'


                class Minute15OtnTcm(object):
                    """
                    configure otn g709 tcm's performance
                    monitoring
                    
                    .. attribute:: tcm_number  <key>
                    
                    	TCM number
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: min15_otn_tcm_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Min15OtnTcmThreshes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Min15OtnTcmThreshes>`
                    
                    .. attribute:: minute15otn_tcm_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Minute15OtnTcmReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Minute15OtnTcmReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.tcm_number = None
                        self.min15_otn_tcm_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Min15OtnTcmThreshes()
                        self.min15_otn_tcm_threshes.parent = self
                        self.minute15otn_tcm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Minute15OtnTcmReports()
                        self.minute15otn_tcm_reports.parent = self


                    class Min15OtnTcmThreshes(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_tcm_thresh
                        
                        	none
                        	**type**\: list of :py:class:`Min15OtnTcmThresh <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.min15_otn_tcm_thresh = YList()
                            self.min15_otn_tcm_thresh.parent = self
                            self.min15_otn_tcm_thresh.name = 'min15_otn_tcm_thresh'


                        class Min15OtnTcmThresh(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnTcmThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnTcmThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-tcm-thresh[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-tcm-threshes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.min15_otn_tcm_thresh is not None:
                                for child_ref in self.min15_otn_tcm_thresh:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Min15OtnTcmThreshes']['meta_info']


                    class Minute15OtnTcmReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_tcm_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15OtnTcmReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Minute15OtnTcmReports.Minute15OtnTcmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15otn_tcm_report = YList()
                            self.minute15otn_tcm_report.parent = self
                            self.minute15otn_tcm_report.name = 'minute15otn_tcm_report'


                        class Minute15OtnTcmReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnTcmReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnTcmReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-tcm-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Minute15OtnTcmReports.Minute15OtnTcmReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-tcm-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15otn_tcm_report is not None:
                                for child_ref in self.minute15otn_tcm_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm.Minute15OtnTcmReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.tcm_number is None:
                            raise YPYModelError('Key property tcm_number is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-tcm[Cisco-IOS-XR-pmengine-cfg:tcm-number = ' + str(self.tcm_number) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.tcm_number is not None:
                            return True

                        if self.min15_otn_tcm_threshes is not None and self.min15_otn_tcm_threshes._has_data():
                            return True

                        if self.minute15otn_tcm_reports is not None and self.minute15otn_tcm_reports._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms.Minute15OtnTcm']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-tcms'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.minute15otn_tcm is not None:
                        for child_ref in self.minute15otn_tcm:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15OtnTcms']['meta_info']


            class OcHour24(object):
                """
                set Oc threshold
                
                .. attribute:: oc_hour24_ocn
                
                	Configure ocn performance monitoring
                	**type**\: :py:class:`OcHour24Ocn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.oc_hour24_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn()
                    self.oc_hour24_ocn.parent = self


                class OcHour24Ocn(object):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: oc_hour24_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\: :py:class:`OcHour24OcnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports>`
                    
                    .. attribute:: oc_hour24_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\: :py:class:`OcHour24OcnThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.oc_hour24_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports()
                        self.oc_hour24_ocn_reports.parent = self
                        self.oc_hour24_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds()
                        self.oc_hour24_ocn_thresholds.parent = self


                    class OcHour24OcnReports(object):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: oc_hour24_ocn_report
                        
                        	none
                        	**type**\: list of :py:class:`OcHour24OcnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.oc_hour24_ocn_report = YList()
                            self.oc_hour24_ocn_report.parent = self
                            self.oc_hour24_ocn_report.name = 'oc_hour24_ocn_report'


                        class OcHour24OcnReport(object):
                            """
                            none
                            
                            .. attribute:: ocn_report  <key>
                            
                            	Ocn Report Type
                            	**type**\: :py:class:`OcnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Ocn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_report is None:
                                    raise YPYModelError('Key property ocn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24-ocn-report[Cisco-IOS-XR-pmengine-cfg:ocn-report = ' + str(self.ocn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24-ocn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.oc_hour24_ocn_report is not None:
                                for child_ref in self.oc_hour24_ocn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports']['meta_info']


                    class OcHour24OcnThresholds(object):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: oc_hour24_ocn_threshold
                        
                        	none
                        	**type**\: list of :py:class:`OcHour24OcnThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.oc_hour24_ocn_threshold = YList()
                            self.oc_hour24_ocn_threshold.parent = self
                            self.oc_hour24_ocn_threshold.name = 'oc_hour24_ocn_threshold'


                        class OcHour24OcnThreshold(object):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  <key>
                            
                            	Ocn Threshold Type
                            	**type**\: :py:class:`OcnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnThresholdEnum>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_threshold is None:
                                    raise YPYModelError('Key property ocn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24-ocn-threshold[Cisco-IOS-XR-pmengine-cfg:ocn-threshold = ' + str(self.ocn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_threshold is not None:
                                    return True

                                if self.ocn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24-ocn-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.oc_hour24_ocn_threshold is not None:
                                for child_ref in self.oc_hour24_ocn_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24-ocn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.oc_hour24_ocn_reports is not None and self.oc_hour24_ocn_reports._has_data():
                            return True

                        if self.oc_hour24_ocn_thresholds is not None and self.oc_hour24_ocn_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.oc_hour24_ocn is not None and self.oc_hour24_ocn._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24']['meta_info']


            class EthernetMinute15(object):
                """
                set opr min threshold
                
                .. attribute:: minute15_ether
                
                	Configure ether performance monitoring
                	**type**\: :py:class:`Minute15Ether <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.minute15_ether = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether()
                    self.minute15_ether.parent = self


                class Minute15Ether(object):
                    """
                    Configure ether performance monitoring
                    
                    .. attribute:: minute15_ether_reports
                    
                    	set ether TCA reporting status
                    	**type**\: :py:class:`Minute15EtherReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports>`
                    
                    .. attribute:: minute15_ether_thresholds
                    
                    	Configure threshold on ether parameters
                    	**type**\: :py:class:`Minute15EtherThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.minute15_ether_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports()
                        self.minute15_ether_reports.parent = self
                        self.minute15_ether_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds()
                        self.minute15_ether_thresholds.parent = self


                    class Minute15EtherThresholds(object):
                        """
                        Configure threshold on ether parameters
                        
                        .. attribute:: minute15_ether_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Minute15EtherThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_ether_threshold = YList()
                            self.minute15_ether_threshold.parent = self
                            self.minute15_ether_threshold.name = 'minute15_ether_threshold'


                        class Minute15EtherThreshold(object):
                            """
                            none
                            
                            .. attribute:: ether_threshold  <key>
                            
                            	Ether Threshold Type
                            	**type**\: :py:class:`EtherThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.EtherThresholdEnum>`
                            
                            .. attribute:: ether_threshold_value
                            
                            	Ether Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ether_threshold = None
                                self.ether_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ether_threshold is None:
                                    raise YPYModelError('Key property ether_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-ether-threshold[Cisco-IOS-XR-pmengine-cfg:ether-threshold = ' + str(self.ether_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_threshold is not None:
                                    return True

                                if self.ether_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-ether-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_ether_threshold is not None:
                                for child_ref in self.minute15_ether_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds']['meta_info']


                    class Minute15EtherReports(object):
                        """
                        set ether TCA reporting status
                        
                        .. attribute:: minute15_ether_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15EtherReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_ether_report = YList()
                            self.minute15_ether_report.parent = self
                            self.minute15_ether_report.name = 'minute15_ether_report'


                        class Minute15EtherReport(object):
                            """
                            none
                            
                            .. attribute:: ether_report  <key>
                            
                            	Ether Report Type
                            	**type**\: :py:class:`EtherReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.EtherReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ether_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ether_report is None:
                                    raise YPYModelError('Key property ether_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-ether-report[Cisco-IOS-XR-pmengine-cfg:ether-report = ' + str(self.ether_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ether_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-ether-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_ether_report is not None:
                                for child_ref in self.minute15_ether_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-ether'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.minute15_ether_reports is not None and self.minute15_ether_reports._has_data():
                            return True

                        if self.minute15_ether_thresholds is not None and self.minute15_ether_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ethernet-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.minute15_ether is not None and self.minute15_ether._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15']['meta_info']


            class HoVcHour24(object):
                """
                set HO\_VC threshold
                
                .. attribute:: ho_vc_hour24ho_vc
                
                	Configure ho\_vc performance monitoring
                	**type**\: :py:class:`HoVcHour24HoVc <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ho_vc_hour24ho_vc = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc()
                    self.ho_vc_hour24ho_vc.parent = self


                class HoVcHour24HoVc(object):
                    """
                    Configure ho\_vc performance monitoring
                    
                    .. attribute:: ho_vc_hour24ho_vc_reports
                    
                    	set ho\_vc TCA reporting status
                    	**type**\: :py:class:`HoVcHour24HoVcReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcReports>`
                    
                    .. attribute:: ho_vc_hour24ho_vc_thresholds
                    
                    	Configure threshold on ho\_vc parameters
                    	**type**\: :py:class:`HoVcHour24HoVcThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ho_vc_hour24ho_vc_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcReports()
                        self.ho_vc_hour24ho_vc_reports.parent = self
                        self.ho_vc_hour24ho_vc_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcThresholds()
                        self.ho_vc_hour24ho_vc_thresholds.parent = self


                    class HoVcHour24HoVcReports(object):
                        """
                        set ho\_vc TCA reporting status
                        
                        .. attribute:: ho_vc_hour24ho_vc_report
                        
                        	none
                        	**type**\: list of :py:class:`HoVcHour24HoVcReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcReports.HoVcHour24HoVcReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ho_vc_hour24ho_vc_report = YList()
                            self.ho_vc_hour24ho_vc_report.parent = self
                            self.ho_vc_hour24ho_vc_report.name = 'ho_vc_hour24ho_vc_report'


                        class HoVcHour24HoVcReport(object):
                            """
                            none
                            
                            .. attribute:: ho_vc_report  <key>
                            
                            	ho\_vc Report Type
                            	**type**\: :py:class:`HoVcReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.HoVcReportEnum>`
                            
                            .. attribute:: enable
                            
                            	ho\_vc Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ho_vc_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ho_vc_report is None:
                                    raise YPYModelError('Key property ho_vc_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24ho-vc-report[Cisco-IOS-XR-pmengine-cfg:ho-vc-report = ' + str(self.ho_vc_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ho_vc_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcReports.HoVcHour24HoVcReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24ho-vc-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ho_vc_hour24ho_vc_report is not None:
                                for child_ref in self.ho_vc_hour24ho_vc_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcReports']['meta_info']


                    class HoVcHour24HoVcThresholds(object):
                        """
                        Configure threshold on ho\_vc parameters
                        
                        .. attribute:: ho_vc_hour24ho_vc_threshold
                        
                        	none
                        	**type**\: list of :py:class:`HoVcHour24HoVcThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ho_vc_hour24ho_vc_threshold = YList()
                            self.ho_vc_hour24ho_vc_threshold.parent = self
                            self.ho_vc_hour24ho_vc_threshold.name = 'ho_vc_hour24ho_vc_threshold'


                        class HoVcHour24HoVcThreshold(object):
                            """
                            none
                            
                            .. attribute:: ho_vc_threshold  <key>
                            
                            	ho\_vc Threshold Type
                            	**type**\: :py:class:`HoVcThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.HoVcThresholdEnum>`
                            
                            .. attribute:: ho_vc_threshold_value
                            
                            	ho\_vc Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ho_vc_threshold = None
                                self.ho_vc_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ho_vc_threshold is None:
                                    raise YPYModelError('Key property ho_vc_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24ho-vc-threshold[Cisco-IOS-XR-pmengine-cfg:ho-vc-threshold = ' + str(self.ho_vc_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ho_vc_threshold is not None:
                                    return True

                                if self.ho_vc_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcThresholds.HoVcHour24HoVcThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24ho-vc-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ho_vc_hour24ho_vc_threshold is not None:
                                for child_ref in self.ho_vc_hour24ho_vc_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc.HoVcHour24HoVcThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24ho-vc'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ho_vc_hour24ho_vc_reports is not None and self.ho_vc_hour24ho_vc_reports._has_data():
                            return True

                        if self.ho_vc_hour24ho_vc_thresholds is not None and self.ho_vc_hour24ho_vc_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24HoVc']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ho_vc_hour24ho_vc is not None and self.ho_vc_hour24ho_vc._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24']['meta_info']


            class Hour24OtnTcms(object):
                """
                Configure pm parameters of tcm's 24 hour
                interval
                
                .. attribute:: hour24otn_tcm
                
                	configure otn g709 tcm's performance monitoring
                	**type**\: list of :py:class:`Hour24OtnTcm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hour24otn_tcm = YList()
                    self.hour24otn_tcm.parent = self
                    self.hour24otn_tcm.name = 'hour24otn_tcm'


                class Hour24OtnTcm(object):
                    """
                    configure otn g709 tcm's performance
                    monitoring
                    
                    .. attribute:: tcm_number  <key>
                    
                    	TCM number
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: hour24otn_tcm_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Hour24OtnTcmReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmReports>`
                    
                    .. attribute:: hour24otn_tcm_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Hour24OtnTcmThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.tcm_number = None
                        self.hour24otn_tcm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmReports()
                        self.hour24otn_tcm_reports.parent = self
                        self.hour24otn_tcm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmThresholds()
                        self.hour24otn_tcm_thresholds.parent = self


                    class Hour24OtnTcmThresholds(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_tcm_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnTcmThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmThresholds.Hour24OtnTcmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_tcm_threshold = YList()
                            self.hour24otn_tcm_threshold.parent = self
                            self.hour24otn_tcm_threshold.name = 'hour24otn_tcm_threshold'


                        class Hour24OtnTcmThreshold(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnTcmThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnTcmThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcm-threshold[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmThresholds.Hour24OtnTcmThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcm-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_tcm_threshold is not None:
                                for child_ref in self.hour24otn_tcm_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmThresholds']['meta_info']


                    class Hour24OtnTcmReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_tcm_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnTcmReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmReports.Hour24OtnTcmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_tcm_report = YList()
                            self.hour24otn_tcm_report.parent = self
                            self.hour24otn_tcm_report.name = 'hour24otn_tcm_report'


                        class Hour24OtnTcmReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnTcmReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnTcmReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcm-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmReports.Hour24OtnTcmReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcm-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_tcm_report is not None:
                                for child_ref in self.hour24otn_tcm_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm.Hour24OtnTcmReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.tcm_number is None:
                            raise YPYModelError('Key property tcm_number is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcm[Cisco-IOS-XR-pmengine-cfg:tcm-number = ' + str(self.tcm_number) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.tcm_number is not None:
                            return True

                        if self.hour24otn_tcm_reports is not None and self.hour24otn_tcm_reports._has_data():
                            return True

                        if self.hour24otn_tcm_thresholds is not None and self.hour24otn_tcm_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms.Hour24OtnTcm']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-tcms'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hour24otn_tcm is not None:
                        for child_ref in self.hour24otn_tcm:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24OtnTcms']['meta_info']


            class StsMinute15(object):
                """
                set STS threshold
                
                .. attribute:: sts_minute15_path
                
                	Configure Path performance monitoring
                	**type**\: :py:class:`StsMinute15Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sts_minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path()
                    self.sts_minute15_path.parent = self


                class StsMinute15Path(object):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sts_minute15_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\: :py:class:`StsMinute15PathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports>`
                    
                    .. attribute:: sts_minute15_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\: :py:class:`StsMinute15PathThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sts_minute15_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports()
                        self.sts_minute15_path_reports.parent = self
                        self.sts_minute15_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds()
                        self.sts_minute15_path_thresholds.parent = self


                    class StsMinute15PathReports(object):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sts_minute15_path_report
                        
                        	none
                        	**type**\: list of :py:class:`StsMinute15PathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sts_minute15_path_report = YList()
                            self.sts_minute15_path_report.parent = self
                            self.sts_minute15_path_report.name = 'sts_minute15_path_report'


                        class StsMinute15PathReport(object):
                            """
                            none
                            
                            .. attribute:: path_report  <key>
                            
                            	Path Report Type
                            	**type**\: :py:class:`StsReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StsReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Path Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_report is None:
                                    raise YPYModelError('Key property path_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15-path-report[Cisco-IOS-XR-pmengine-cfg:path-report = ' + str(self.path_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sts_minute15_path_report is not None:
                                for child_ref in self.sts_minute15_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports']['meta_info']


                    class StsMinute15PathThresholds(object):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sts_minute15_path_threshold
                        
                        	none
                        	**type**\: list of :py:class:`StsMinute15PathThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sts_minute15_path_threshold = YList()
                            self.sts_minute15_path_threshold.parent = self
                            self.sts_minute15_path_threshold.name = 'sts_minute15_path_threshold'


                        class StsMinute15PathThreshold(object):
                            """
                            none
                            
                            .. attribute:: path_threshold  <key>
                            
                            	Path Threshold Type
                            	**type**\: :py:class:`StsThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StsThresholdEnum>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_threshold = None
                                self.path_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_threshold is None:
                                    raise YPYModelError('Key property path_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15-path-threshold[Cisco-IOS-XR-pmengine-cfg:path-threshold = ' + str(self.path_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_threshold is not None:
                                    return True

                                if self.path_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15-path-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sts_minute15_path_threshold is not None:
                                for child_ref in self.sts_minute15_path_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sts_minute15_path_reports is not None and self.sts_minute15_path_reports._has_data():
                            return True

                        if self.sts_minute15_path_thresholds is not None and self.sts_minute15_path_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sts_minute15_path is not None and self.sts_minute15_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15']['meta_info']


            class Hour24(object):
                """
                Configure pm parameters of 24 hour interval
                
                .. attribute:: hour24_optics
                
                	Configure optics performance monitoring
                	**type**\: :py:class:`Hour24Optics <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics>`
                
                .. attribute:: hour24fec
                
                	Configure fec g709 performance monitoring
                	**type**\: :py:class:`Hour24Fec <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec>`
                
                .. attribute:: hour24otn
                
                	configure otn g709 performance monitoring
                	**type**\: :py:class:`Hour24Otn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hour24_optics = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics()
                    self.hour24_optics.parent = self
                    self.hour24fec = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec()
                    self.hour24fec.parent = self
                    self.hour24otn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn()
                    self.hour24otn.parent = self


                class Hour24Otn(object):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: hour24otn_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Hour24OtnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnReports>`
                    
                    .. attribute:: hour24otn_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Hour24OtnThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24otn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnReports()
                        self.hour24otn_reports.parent = self
                        self.hour24otn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnThresholds()
                        self.hour24otn_thresholds.parent = self


                    class Hour24OtnThresholds(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnThresholds.Hour24OtnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_threshold = YList()
                            self.hour24otn_threshold.parent = self
                            self.hour24otn_threshold.name = 'hour24otn_threshold'


                        class Hour24OtnThreshold(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-threshold[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnThresholds.Hour24OtnThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_threshold is not None:
                                for child_ref in self.hour24otn_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnThresholds']['meta_info']


                    class Hour24OtnReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnReports.Hour24OtnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_report = YList()
                            self.hour24otn_report.parent = self
                            self.hour24otn_report.name = 'hour24otn_report'


                        class Hour24OtnReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnReports.Hour24OtnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_report is not None:
                                for child_ref in self.hour24otn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn.Hour24OtnReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24otn_reports is not None and self.hour24otn_reports._has_data():
                            return True

                        if self.hour24otn_thresholds is not None and self.hour24otn_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Otn']['meta_info']


                class Hour24Optics(object):
                    """
                    Configure optics performance monitoring
                    
                    .. attribute:: hour24_optics_reports
                    
                    	set optics TCA reporting status
                    	**type**\: :py:class:`Hour24OpticsReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports>`
                    
                    .. attribute:: hour24_optics_thresholds
                    
                    	Configure threshold on optics parameters
                    	**type**\: :py:class:`Hour24OpticsThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24_optics_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports()
                        self.hour24_optics_reports.parent = self
                        self.hour24_optics_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds()
                        self.hour24_optics_thresholds.parent = self


                    class Hour24OpticsThresholds(object):
                        """
                        Configure threshold on optics parameters
                        
                        .. attribute:: hour24_optics_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OpticsThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_optics_threshold = YList()
                            self.hour24_optics_threshold.parent = self
                            self.hour24_optics_threshold.name = 'hour24_optics_threshold'


                        class Hour24OpticsThreshold(object):
                            """
                            none
                            
                            .. attribute:: optics_threshold  <key>
                            
                            	Optics Threshold Type
                            	**type**\: :py:class:`OpticsThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OpticsThresholdEnum>`
                            
                            .. attribute:: optics_threshold_value
                            
                            	Optics Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.optics_threshold = None
                                self.optics_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.optics_threshold is None:
                                    raise YPYModelError('Key property optics_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-optics-threshold[Cisco-IOS-XR-pmengine-cfg:optics-threshold = ' + str(self.optics_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.optics_threshold is not None:
                                    return True

                                if self.optics_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-optics-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_optics_threshold is not None:
                                for child_ref in self.hour24_optics_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds']['meta_info']


                    class Hour24OpticsReports(object):
                        """
                        set optics TCA reporting status
                        
                        .. attribute:: hour24_optics_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OpticsReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24_optics_report = YList()
                            self.hour24_optics_report.parent = self
                            self.hour24_optics_report.name = 'hour24_optics_report'


                        class Hour24OpticsReport(object):
                            """
                            none
                            
                            .. attribute:: optics_report  <key>
                            
                            	Optics Report Type
                            	**type**\: :py:class:`OpticsReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OpticsReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.optics_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.optics_report is None:
                                    raise YPYModelError('Key property optics_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-optics-report[Cisco-IOS-XR-pmengine-cfg:optics-report = ' + str(self.optics_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.optics_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-optics-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24_optics_report is not None:
                                for child_ref in self.hour24_optics_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-optics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24_optics_reports is not None and self.hour24_optics_reports._has_data():
                            return True

                        if self.hour24_optics_thresholds is not None and self.hour24_optics_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics']['meta_info']


                class Hour24Fec(object):
                    """
                    Configure fec g709 performance monitoring
                    
                    .. attribute:: hour24fec_reports
                    
                    	set fec TCA reporting status
                    	**type**\: :py:class:`Hour24FecReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecReports>`
                    
                    .. attribute:: hour24fec_thresholds
                    
                    	Configure fec threshold
                    	**type**\: :py:class:`Hour24FecThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24fec_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecReports()
                        self.hour24fec_reports.parent = self
                        self.hour24fec_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecThresholds()
                        self.hour24fec_thresholds.parent = self


                    class Hour24FecThresholds(object):
                        """
                        Configure fec threshold
                        
                        .. attribute:: hour24fec_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24FecThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecThresholds.Hour24FecThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24fec_threshold = YList()
                            self.hour24fec_threshold.parent = self
                            self.hour24fec_threshold.name = 'hour24fec_threshold'


                        class Hour24FecThreshold(object):
                            """
                            none
                            
                            .. attribute:: fec_threshold  <key>
                            
                            	Fec Threshold Type
                            	**type**\: :py:class:`FecThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.FecThresholdEnum>`
                            
                            .. attribute:: fec_threshold_value
                            
                            	Fec threshold value
                            	**type**\: str
                            
                            	**range:** 0..16
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fec_threshold = None
                                self.fec_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.fec_threshold is None:
                                    raise YPYModelError('Key property fec_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24fec-threshold[Cisco-IOS-XR-pmengine-cfg:fec-threshold = ' + str(self.fec_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fec_threshold is not None:
                                    return True

                                if self.fec_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecThresholds.Hour24FecThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24fec-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24fec_threshold is not None:
                                for child_ref in self.hour24fec_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecThresholds']['meta_info']


                    class Hour24FecReports(object):
                        """
                        set fec TCA reporting status
                        
                        .. attribute:: hour24fec_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24FecReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecReports.Hour24FecReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24fec_report = YList()
                            self.hour24fec_report.parent = self
                            self.hour24fec_report.name = 'hour24fec_report'


                        class Hour24FecReport(object):
                            """
                            none
                            
                            .. attribute:: fec_report  <key>
                            
                            	Fec Report type
                            	**type**\: :py:class:`FecReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.FecReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Fec Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fec_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.fec_report is None:
                                    raise YPYModelError('Key property fec_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24fec-report[Cisco-IOS-XR-pmengine-cfg:fec-report = ' + str(self.fec_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fec_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecReports.Hour24FecReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24fec-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24fec_report is not None:
                                for child_ref in self.hour24fec_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec.Hour24FecReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24fec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24fec_reports is not None and self.hour24fec_reports._has_data():
                            return True

                        if self.hour24fec_thresholds is not None and self.hour24fec_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Fec']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hour24_optics is not None and self.hour24_optics._has_data():
                        return True

                    if self.hour24fec is not None and self.hour24fec._has_data():
                        return True

                    if self.hour24otn is not None and self.hour24otn._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24']['meta_info']


            class HoVcMinute15(object):
                """
                set HO\_VC threshold
                
                .. attribute:: ho_vc_minute15ho_vc
                
                	Configure ho\_vc performance monitoring
                	**type**\: :py:class:`HoVcMinute15HoVc <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ho_vc_minute15ho_vc = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc()
                    self.ho_vc_minute15ho_vc.parent = self


                class HoVcMinute15HoVc(object):
                    """
                    Configure ho\_vc performance monitoring
                    
                    .. attribute:: ho_vc_minute15ho_vc_reports
                    
                    	set ho\_vc TCA reporting status
                    	**type**\: :py:class:`HoVcMinute15HoVcReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcReports>`
                    
                    .. attribute:: ho_vc_minute15ho_vc_thresholds
                    
                    	Configure threshold on ho\_vc parameters
                    	**type**\: :py:class:`HoVcMinute15HoVcThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ho_vc_minute15ho_vc_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcReports()
                        self.ho_vc_minute15ho_vc_reports.parent = self
                        self.ho_vc_minute15ho_vc_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcThresholds()
                        self.ho_vc_minute15ho_vc_thresholds.parent = self


                    class HoVcMinute15HoVcReports(object):
                        """
                        set ho\_vc TCA reporting status
                        
                        .. attribute:: ho_vc_minute15ho_vc_report
                        
                        	none
                        	**type**\: list of :py:class:`HoVcMinute15HoVcReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcReports.HoVcMinute15HoVcReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ho_vc_minute15ho_vc_report = YList()
                            self.ho_vc_minute15ho_vc_report.parent = self
                            self.ho_vc_minute15ho_vc_report.name = 'ho_vc_minute15ho_vc_report'


                        class HoVcMinute15HoVcReport(object):
                            """
                            none
                            
                            .. attribute:: ho_vc_report  <key>
                            
                            	ho\_vc Report Type
                            	**type**\: :py:class:`HoVcReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.HoVcReportEnum>`
                            
                            .. attribute:: enable
                            
                            	ho\_vc Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ho_vc_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ho_vc_report is None:
                                    raise YPYModelError('Key property ho_vc_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15ho-vc-report[Cisco-IOS-XR-pmengine-cfg:ho-vc-report = ' + str(self.ho_vc_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ho_vc_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcReports.HoVcMinute15HoVcReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15ho-vc-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ho_vc_minute15ho_vc_report is not None:
                                for child_ref in self.ho_vc_minute15ho_vc_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcReports']['meta_info']


                    class HoVcMinute15HoVcThresholds(object):
                        """
                        Configure threshold on ho\_vc parameters
                        
                        .. attribute:: ho_vc_minute15ho_vc_threshold
                        
                        	none
                        	**type**\: list of :py:class:`HoVcMinute15HoVcThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ho_vc_minute15ho_vc_threshold = YList()
                            self.ho_vc_minute15ho_vc_threshold.parent = self
                            self.ho_vc_minute15ho_vc_threshold.name = 'ho_vc_minute15ho_vc_threshold'


                        class HoVcMinute15HoVcThreshold(object):
                            """
                            none
                            
                            .. attribute:: ho_vc_threshold  <key>
                            
                            	ho\_vc Threshold Type
                            	**type**\: :py:class:`HoVcThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.HoVcThresholdEnum>`
                            
                            .. attribute:: ho_vc_threshold_value
                            
                            	ho\_vc Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ho_vc_threshold = None
                                self.ho_vc_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ho_vc_threshold is None:
                                    raise YPYModelError('Key property ho_vc_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15ho-vc-threshold[Cisco-IOS-XR-pmengine-cfg:ho-vc-threshold = ' + str(self.ho_vc_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ho_vc_threshold is not None:
                                    return True

                                if self.ho_vc_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcThresholds.HoVcMinute15HoVcThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15ho-vc-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ho_vc_minute15ho_vc_threshold is not None:
                                for child_ref in self.ho_vc_minute15ho_vc_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc.HoVcMinute15HoVcThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15ho-vc'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ho_vc_minute15ho_vc_reports is not None and self.ho_vc_minute15ho_vc_reports._has_data():
                            return True

                        if self.ho_vc_minute15ho_vc_thresholds is not None and self.ho_vc_minute15ho_vc_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15HoVc']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:ho-vc-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ho_vc_minute15ho_vc is not None and self.ho_vc_minute15ho_vc._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15']['meta_info']


            class StsHour24(object):
                """
                set STS threshold
                
                .. attribute:: sts_hour24_path
                
                	Configure Path performance monitoring
                	**type**\: :py:class:`StsHour24Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sts_hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path()
                    self.sts_hour24_path.parent = self


                class StsHour24Path(object):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sts_hour24_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\: :py:class:`StsHour24PathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports>`
                    
                    .. attribute:: sts_hour24_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\: :py:class:`StsHour24PathThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sts_hour24_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports()
                        self.sts_hour24_path_reports.parent = self
                        self.sts_hour24_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds()
                        self.sts_hour24_path_thresholds.parent = self


                    class StsHour24PathThresholds(object):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sts_hour24_path_threshold
                        
                        	none
                        	**type**\: list of :py:class:`StsHour24PathThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sts_hour24_path_threshold = YList()
                            self.sts_hour24_path_threshold.parent = self
                            self.sts_hour24_path_threshold.name = 'sts_hour24_path_threshold'


                        class StsHour24PathThreshold(object):
                            """
                            none
                            
                            .. attribute:: path_threshold  <key>
                            
                            	Path Threshold Type
                            	**type**\: :py:class:`StsThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StsThresholdEnum>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_threshold = None
                                self.path_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_threshold is None:
                                    raise YPYModelError('Key property path_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24-path-threshold[Cisco-IOS-XR-pmengine-cfg:path-threshold = ' + str(self.path_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_threshold is not None:
                                    return True

                                if self.path_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24-path-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sts_hour24_path_threshold is not None:
                                for child_ref in self.sts_hour24_path_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds']['meta_info']


                    class StsHour24PathReports(object):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sts_hour24_path_report
                        
                        	none
                        	**type**\: list of :py:class:`StsHour24PathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sts_hour24_path_report = YList()
                            self.sts_hour24_path_report.parent = self
                            self.sts_hour24_path_report.name = 'sts_hour24_path_report'


                        class StsHour24PathReport(object):
                            """
                            none
                            
                            .. attribute:: path_report  <key>
                            
                            	Path Report Type
                            	**type**\: :py:class:`StsReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StsReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Path Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_report is None:
                                    raise YPYModelError('Key property path_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24-path-report[Cisco-IOS-XR-pmengine-cfg:path-report = ' + str(self.path_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sts_hour24_path_report is not None:
                                for child_ref in self.sts_hour24_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sts_hour24_path_reports is not None and self.sts_hour24_path_reports._has_data():
                            return True

                        if self.sts_hour24_path_thresholds is not None and self.sts_hour24_path_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sts-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sts_hour24_path is not None and self.sts_hour24_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24']['meta_info']


            class StmMinute15(object):
                """
                set STM threshold
                
                .. attribute:: stm_minute15_stm
                
                	Configure stm performance monitoring
                	**type**\: :py:class:`StmMinute15Stm <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.stm_minute15_stm = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm()
                    self.stm_minute15_stm.parent = self


                class StmMinute15Stm(object):
                    """
                    Configure stm performance monitoring
                    
                    .. attribute:: stm_minute15_stm_reports
                    
                    	set stm TCA reporting status
                    	**type**\: :py:class:`StmMinute15StmReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports>`
                    
                    .. attribute:: stm_minute15_stm_thresholds
                    
                    	Configure threshold on stm parameters
                    	**type**\: :py:class:`StmMinute15StmThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.stm_minute15_stm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports()
                        self.stm_minute15_stm_reports.parent = self
                        self.stm_minute15_stm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds()
                        self.stm_minute15_stm_thresholds.parent = self


                    class StmMinute15StmReports(object):
                        """
                        set stm TCA reporting status
                        
                        .. attribute:: stm_minute15_stm_report
                        
                        	none
                        	**type**\: list of :py:class:`StmMinute15StmReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.stm_minute15_stm_report = YList()
                            self.stm_minute15_stm_report.parent = self
                            self.stm_minute15_stm_report.name = 'stm_minute15_stm_report'


                        class StmMinute15StmReport(object):
                            """
                            none
                            
                            .. attribute:: stm_report  <key>
                            
                            	Stm Report Type
                            	**type**\: :py:class:`StmReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StmReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Stm Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.stm_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.stm_report is None:
                                    raise YPYModelError('Key property stm_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15-stm-report[Cisco-IOS-XR-pmengine-cfg:stm-report = ' + str(self.stm_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.stm_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15-stm-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.stm_minute15_stm_report is not None:
                                for child_ref in self.stm_minute15_stm_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports']['meta_info']


                    class StmMinute15StmThresholds(object):
                        """
                        Configure threshold on stm parameters
                        
                        .. attribute:: stm_minute15_stm_threshold
                        
                        	none
                        	**type**\: list of :py:class:`StmMinute15StmThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.stm_minute15_stm_threshold = YList()
                            self.stm_minute15_stm_threshold.parent = self
                            self.stm_minute15_stm_threshold.name = 'stm_minute15_stm_threshold'


                        class StmMinute15StmThreshold(object):
                            """
                            none
                            
                            .. attribute:: stm_threshold  <key>
                            
                            	Stm Threshold Type
                            	**type**\: :py:class:`StmThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.StmThresholdEnum>`
                            
                            .. attribute:: stm_threshold_value
                            
                            	Stm Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.stm_threshold = None
                                self.stm_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.stm_threshold is None:
                                    raise YPYModelError('Key property stm_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15-stm-threshold[Cisco-IOS-XR-pmengine-cfg:stm-threshold = ' + str(self.stm_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.stm_threshold is not None:
                                    return True

                                if self.stm_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15-stm-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.stm_minute15_stm_threshold is not None:
                                for child_ref in self.stm_minute15_stm_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15-stm'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.stm_minute15_stm_reports is not None and self.stm_minute15_stm_reports._has_data():
                            return True

                        if self.stm_minute15_stm_thresholds is not None and self.stm_minute15_stm_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:stm-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.stm_minute15_stm is not None and self.stm_minute15_stm._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15']['meta_info']


            class SonetHour24(object):
                """
                set Sonet threshold
                
                .. attribute:: sonet_hour24_ocn
                
                	Configure ocn performance monitoring
                	**type**\: :py:class:`SonetHour24Ocn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn>`
                
                .. attribute:: sonet_hour24_path
                
                	Configure Path performance monitoring
                	**type**\: :py:class:`SonetHour24Path <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.sonet_hour24_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn()
                    self.sonet_hour24_ocn.parent = self
                    self.sonet_hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path()
                    self.sonet_hour24_path.parent = self


                class SonetHour24Path(object):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sonet_hour24_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\: :py:class:`SonetHour24PathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports>`
                    
                    .. attribute:: sonet_hour24_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\: :py:class:`SonetHour24PathThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sonet_hour24_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports()
                        self.sonet_hour24_path_reports.parent = self
                        self.sonet_hour24_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds()
                        self.sonet_hour24_path_thresholds.parent = self


                    class SonetHour24PathThresholds(object):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sonet_hour24_path_threshold
                        
                        	none
                        	**type**\: list of :py:class:`SonetHour24PathThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_hour24_path_threshold = YList()
                            self.sonet_hour24_path_threshold.parent = self
                            self.sonet_hour24_path_threshold.name = 'sonet_hour24_path_threshold'


                        class SonetHour24PathThreshold(object):
                            """
                            none
                            
                            .. attribute:: path_threshold  <key>
                            
                            	Path Threshold Type
                            	**type**\: :py:class:`PathThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.PathThresholdEnum>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_threshold = None
                                self.path_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_threshold is None:
                                    raise YPYModelError('Key property path_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-path-threshold[Cisco-IOS-XR-pmengine-cfg:path-threshold = ' + str(self.path_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_threshold is not None:
                                    return True

                                if self.path_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-path-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_hour24_path_threshold is not None:
                                for child_ref in self.sonet_hour24_path_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds']['meta_info']


                    class SonetHour24PathReports(object):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sonet_hour24_path_report
                        
                        	none
                        	**type**\: list of :py:class:`SonetHour24PathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_hour24_path_report = YList()
                            self.sonet_hour24_path_report.parent = self
                            self.sonet_hour24_path_report.name = 'sonet_hour24_path_report'


                        class SonetHour24PathReport(object):
                            """
                            none
                            
                            .. attribute:: path_report  <key>
                            
                            	Path Report Type
                            	**type**\: :py:class:`PathReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.PathReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.path_report is None:
                                    raise YPYModelError('Key property path_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-path-report[Cisco-IOS-XR-pmengine-cfg:path-report = ' + str(self.path_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_hour24_path_report is not None:
                                for child_ref in self.sonet_hour24_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sonet_hour24_path_reports is not None and self.sonet_hour24_path_reports._has_data():
                            return True

                        if self.sonet_hour24_path_thresholds is not None and self.sonet_hour24_path_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path']['meta_info']


                class SonetHour24Ocn(object):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: sonet_hour24_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\: :py:class:`SonetHour24OcnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports>`
                    
                    .. attribute:: sonet_hour24_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\: :py:class:`SonetHour24OcnThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.sonet_hour24_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports()
                        self.sonet_hour24_ocn_reports.parent = self
                        self.sonet_hour24_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds()
                        self.sonet_hour24_ocn_thresholds.parent = self


                    class SonetHour24OcnThresholds(object):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: sonet_hour24_ocn_threshold
                        
                        	none
                        	**type**\: list of :py:class:`SonetHour24OcnThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_hour24_ocn_threshold = YList()
                            self.sonet_hour24_ocn_threshold.parent = self
                            self.sonet_hour24_ocn_threshold.name = 'sonet_hour24_ocn_threshold'


                        class SonetHour24OcnThreshold(object):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  <key>
                            
                            	Ocn Threshold Type
                            	**type**\: :py:class:`OcnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnThresholdEnum>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_threshold is None:
                                    raise YPYModelError('Key property ocn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-ocn-threshold[Cisco-IOS-XR-pmengine-cfg:ocn-threshold = ' + str(self.ocn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_threshold is not None:
                                    return True

                                if self.ocn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-ocn-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_hour24_ocn_threshold is not None:
                                for child_ref in self.sonet_hour24_ocn_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds']['meta_info']


                    class SonetHour24OcnReports(object):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: sonet_hour24_ocn_report
                        
                        	none
                        	**type**\: list of :py:class:`SonetHour24OcnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.sonet_hour24_ocn_report = YList()
                            self.sonet_hour24_ocn_report.parent = self
                            self.sonet_hour24_ocn_report.name = 'sonet_hour24_ocn_report'


                        class SonetHour24OcnReport(object):
                            """
                            none
                            
                            .. attribute:: ocn_report  <key>
                            
                            	Ocn Report Type
                            	**type**\: :py:class:`OcnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_report is None:
                                    raise YPYModelError('Key property ocn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-ocn-report[Cisco-IOS-XR-pmengine-cfg:ocn-report = ' + str(self.ocn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-ocn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.sonet_hour24_ocn_report is not None:
                                for child_ref in self.sonet_hour24_ocn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24-ocn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.sonet_hour24_ocn_reports is not None and self.sonet_hour24_ocn_reports._has_data():
                            return True

                        if self.sonet_hour24_ocn_thresholds is not None and self.sonet_hour24_ocn_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:sonet-hour24'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.sonet_hour24_ocn is not None and self.sonet_hour24_ocn._has_data():
                        return True

                    if self.sonet_hour24_path is not None and self.sonet_hour24_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24']['meta_info']


            class Minute15Path(object):
                """
                set opr min threshold
                
                .. attribute:: minute15otn_path
                
                	configure otn g709 performance monitoring
                	**type**\: :py:class:`Minute15OtnPath <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.minute15otn_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath()
                    self.minute15otn_path.parent = self


                class Minute15OtnPath(object):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: min15_otn_path_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Min15OtnPathThreshes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Min15OtnPathThreshes>`
                    
                    .. attribute:: minute15otn_path_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Minute15OtnPathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Minute15OtnPathReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.min15_otn_path_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Min15OtnPathThreshes()
                        self.min15_otn_path_threshes.parent = self
                        self.minute15otn_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Minute15OtnPathReports()
                        self.minute15otn_path_reports.parent = self


                    class Minute15OtnPathReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_path_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15OtnPathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Minute15OtnPathReports.Minute15OtnPathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15otn_path_report = YList()
                            self.minute15otn_path_report.parent = self
                            self.minute15otn_path_report.name = 'minute15otn_path_report'


                        class Minute15OtnPathReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-path-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Minute15OtnPathReports.Minute15OtnPathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15otn_path_report is not None:
                                for child_ref in self.minute15otn_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Minute15OtnPathReports']['meta_info']


                    class Min15OtnPathThreshes(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_path_thresh
                        
                        	none
                        	**type**\: list of :py:class:`Min15OtnPathThresh <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Min15OtnPathThreshes.Min15OtnPathThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.min15_otn_path_thresh = YList()
                            self.min15_otn_path_thresh.parent = self
                            self.min15_otn_path_thresh.name = 'min15_otn_path_thresh'


                        class Min15OtnPathThresh(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-path-thresh[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Min15OtnPathThreshes.Min15OtnPathThresh']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-path-threshes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.min15_otn_path_thresh is not None:
                                for child_ref in self.min15_otn_path_thresh:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath.Min15OtnPathThreshes']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.min15_otn_path_threshes is not None and self.min15_otn_path_threshes._has_data():
                            return True

                        if self.minute15otn_path_reports is not None and self.minute15otn_path_reports._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15OtnPath']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-path'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.minute15otn_path is not None and self.minute15otn_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path']['meta_info']


            class OcMinute15(object):
                """
                set OC threshold
                
                .. attribute:: oc_minute15_ocn
                
                	Configure ocn performance monitoring
                	**type**\: :py:class:`OcMinute15Ocn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.oc_minute15_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn()
                    self.oc_minute15_ocn.parent = self


                class OcMinute15Ocn(object):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: oc_minute15_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\: :py:class:`OcMinute15OcnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports>`
                    
                    .. attribute:: oc_minute15_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\: :py:class:`OcMinute15OcnThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.oc_minute15_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports()
                        self.oc_minute15_ocn_reports.parent = self
                        self.oc_minute15_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds()
                        self.oc_minute15_ocn_thresholds.parent = self


                    class OcMinute15OcnReports(object):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: oc_minute15_ocn_report
                        
                        	none
                        	**type**\: list of :py:class:`OcMinute15OcnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.oc_minute15_ocn_report = YList()
                            self.oc_minute15_ocn_report.parent = self
                            self.oc_minute15_ocn_report.name = 'oc_minute15_ocn_report'


                        class OcMinute15OcnReport(object):
                            """
                            none
                            
                            .. attribute:: ocn_report  <key>
                            
                            	Ocn Report Type
                            	**type**\: :py:class:`OcnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Ocn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_report is None:
                                    raise YPYModelError('Key property ocn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15-ocn-report[Cisco-IOS-XR-pmengine-cfg:ocn-report = ' + str(self.ocn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15-ocn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.oc_minute15_ocn_report is not None:
                                for child_ref in self.oc_minute15_ocn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports']['meta_info']


                    class OcMinute15OcnThresholds(object):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: oc_minute15_ocn_threshold
                        
                        	none
                        	**type**\: list of :py:class:`OcMinute15OcnThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.oc_minute15_ocn_threshold = YList()
                            self.oc_minute15_ocn_threshold.parent = self
                            self.oc_minute15_ocn_threshold.name = 'oc_minute15_ocn_threshold'


                        class OcMinute15OcnThreshold(object):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  <key>
                            
                            	Ocn Threshold Type
                            	**type**\: :py:class:`OcnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OcnThresholdEnum>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.ocn_threshold is None:
                                    raise YPYModelError('Key property ocn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15-ocn-threshold[Cisco-IOS-XR-pmengine-cfg:ocn-threshold = ' + str(self.ocn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ocn_threshold is not None:
                                    return True

                                if self.ocn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15-ocn-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.oc_minute15_ocn_threshold is not None:
                                for child_ref in self.oc_minute15_ocn_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15-ocn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.oc_minute15_ocn_reports is not None and self.oc_minute15_ocn_reports._has_data():
                            return True

                        if self.oc_minute15_ocn_thresholds is not None and self.oc_minute15_ocn_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:oc-minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.oc_minute15_ocn is not None and self.oc_minute15_ocn._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15']['meta_info']


            class Hour24Path(object):
                """
                Configure pm parameters of pathmonitor 24 hour
                interval
                
                .. attribute:: hour24otn_path
                
                	configure otn g709 performance monitoring
                	**type**\: :py:class:`Hour24OtnPath <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.hour24otn_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath()
                    self.hour24otn_path.parent = self


                class Hour24OtnPath(object):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: hour24otn_path_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Hour24OtnPathReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathReports>`
                    
                    .. attribute:: hour24otn_path_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Hour24OtnPathThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.hour24otn_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathReports()
                        self.hour24otn_path_reports.parent = self
                        self.hour24otn_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathThresholds()
                        self.hour24otn_path_thresholds.parent = self


                    class Hour24OtnPathReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_path_report
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnPathReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathReports.Hour24OtnPathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_path_report = YList()
                            self.hour24otn_path_report.parent = self
                            self.hour24otn_path_report.name = 'hour24otn_path_report'


                        class Hour24OtnPathReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-path-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathReports.Hour24OtnPathReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-path-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_path_report is not None:
                                for child_ref in self.hour24otn_path_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathReports']['meta_info']


                    class Hour24OtnPathThresholds(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_path_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Hour24OtnPathThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathThresholds.Hour24OtnPathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.hour24otn_path_threshold = YList()
                            self.hour24otn_path_threshold.parent = self
                            self.hour24otn_path_threshold.name = 'hour24otn_path_threshold'


                        class Hour24OtnPathThreshold(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-path-threshold[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathThresholds.Hour24OtnPathThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-path-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hour24otn_path_threshold is not None:
                                for child_ref in self.hour24otn_path_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath.Hour24OtnPathThresholds']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24otn-path'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hour24otn_path_reports is not None and self.hour24otn_path_reports._has_data():
                            return True

                        if self.hour24otn_path_thresholds is not None and self.hour24otn_path_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24OtnPath']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:hour24-path'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.hour24otn_path is not None and self.hour24otn_path._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path']['meta_info']


            class Minute15(object):
                """
                set opr min threshold
                
                .. attribute:: minute15_optics
                
                	Configure optics performance monitoring
                	**type**\: :py:class:`Minute15Optics <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics>`
                
                .. attribute:: minute15fec
                
                	Configure fec g709 performance monitoring
                	**type**\: :py:class:`Minute15Fec <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec>`
                
                .. attribute:: minute15otn
                
                	configure otn g709 performance monitoring
                	**type**\: :py:class:`Minute15Otn <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.minute15_optics = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics()
                    self.minute15_optics.parent = self
                    self.minute15fec = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec()
                    self.minute15fec.parent = self
                    self.minute15otn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn()
                    self.minute15otn.parent = self


                class Minute15Optics(object):
                    """
                    Configure optics performance monitoring
                    
                    .. attribute:: minute15_optics_reports
                    
                    	set optics TCA reporting status
                    	**type**\: :py:class:`Minute15OpticsReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports>`
                    
                    .. attribute:: minute15_optics_thresholds
                    
                    	Configure threshold on optics parameters
                    	**type**\: :py:class:`Minute15OpticsThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.minute15_optics_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports()
                        self.minute15_optics_reports.parent = self
                        self.minute15_optics_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds()
                        self.minute15_optics_thresholds.parent = self


                    class Minute15OpticsThresholds(object):
                        """
                        Configure threshold on optics parameters
                        
                        .. attribute:: minute15_optics_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Minute15OpticsThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_optics_threshold = YList()
                            self.minute15_optics_threshold.parent = self
                            self.minute15_optics_threshold.name = 'minute15_optics_threshold'


                        class Minute15OpticsThreshold(object):
                            """
                            none
                            
                            .. attribute:: optics_threshold  <key>
                            
                            	Optics Threshold Type
                            	**type**\: :py:class:`OpticsThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OpticsThresholdEnum>`
                            
                            .. attribute:: optics_threshold_value
                            
                            	Optics Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.optics_threshold = None
                                self.optics_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.optics_threshold is None:
                                    raise YPYModelError('Key property optics_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-optics-threshold[Cisco-IOS-XR-pmengine-cfg:optics-threshold = ' + str(self.optics_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.optics_threshold is not None:
                                    return True

                                if self.optics_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-optics-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_optics_threshold is not None:
                                for child_ref in self.minute15_optics_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds']['meta_info']


                    class Minute15OpticsReports(object):
                        """
                        set optics TCA reporting status
                        
                        .. attribute:: minute15_optics_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15OpticsReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15_optics_report = YList()
                            self.minute15_optics_report.parent = self
                            self.minute15_optics_report.name = 'minute15_optics_report'


                        class Minute15OpticsReport(object):
                            """
                            none
                            
                            .. attribute:: optics_report  <key>
                            
                            	Optics Report Type
                            	**type**\: :py:class:`OpticsReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OpticsReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.optics_report = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.optics_report is None:
                                    raise YPYModelError('Key property optics_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-optics-report[Cisco-IOS-XR-pmengine-cfg:optics-report = ' + str(self.optics_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.optics_report is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-optics-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15_optics_report is not None:
                                for child_ref in self.minute15_optics_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15-optics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.minute15_optics_reports is not None and self.minute15_optics_reports._has_data():
                            return True

                        if self.minute15_optics_thresholds is not None and self.minute15_optics_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics']['meta_info']


                class Minute15Fec(object):
                    """
                    Configure fec g709 performance monitoring
                    
                    .. attribute:: minute15fec_reports
                    
                    	set fec TCA reporting status
                    	**type**\: :py:class:`Minute15FecReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecReports>`
                    
                    .. attribute:: minute15fec_thresholds
                    
                    	Configure fec threshold
                    	**type**\: :py:class:`Minute15FecThresholds <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.minute15fec_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecReports()
                        self.minute15fec_reports.parent = self
                        self.minute15fec_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecThresholds()
                        self.minute15fec_thresholds.parent = self


                    class Minute15FecThresholds(object):
                        """
                        Configure fec threshold
                        
                        .. attribute:: minute15fec_threshold
                        
                        	none
                        	**type**\: list of :py:class:`Minute15FecThreshold <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecThresholds.Minute15FecThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15fec_threshold = YList()
                            self.minute15fec_threshold.parent = self
                            self.minute15fec_threshold.name = 'minute15fec_threshold'


                        class Minute15FecThreshold(object):
                            """
                            none
                            
                            .. attribute:: fec_threshold  <key>
                            
                            	Fec Threshold Type
                            	**type**\: :py:class:`FecThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.FecThresholdEnum>`
                            
                            .. attribute:: fec_threshold_value
                            
                            	Fec Threshold Value
                            	**type**\: str
                            
                            	**range:** 0..16
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fec_threshold = None
                                self.fec_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.fec_threshold is None:
                                    raise YPYModelError('Key property fec_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15fec-threshold[Cisco-IOS-XR-pmengine-cfg:fec-threshold = ' + str(self.fec_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fec_threshold is not None:
                                    return True

                                if self.fec_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecThresholds.Minute15FecThreshold']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15fec-thresholds'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15fec_threshold is not None:
                                for child_ref in self.minute15fec_threshold:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecThresholds']['meta_info']


                    class Minute15FecReports(object):
                        """
                        set fec TCA reporting status
                        
                        .. attribute:: minute15fec_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15FecReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecReports.Minute15FecReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15fec_report = YList()
                            self.minute15fec_report.parent = self
                            self.minute15fec_report.name = 'minute15fec_report'


                        class Minute15FecReport(object):
                            """
                            none
                            
                            .. attribute:: fec_report  <key>
                            
                            	Fec Report Type
                            	**type**\: :py:class:`FecReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.FecReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Fec Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fec_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.fec_report is None:
                                    raise YPYModelError('Key property fec_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15fec-report[Cisco-IOS-XR-pmengine-cfg:fec-report = ' + str(self.fec_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fec_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecReports.Minute15FecReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15fec-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15fec_report is not None:
                                for child_ref in self.minute15fec_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec.Minute15FecReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15fec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.minute15fec_reports is not None and self.minute15fec_reports._has_data():
                            return True

                        if self.minute15fec_thresholds is not None and self.minute15fec_thresholds._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Fec']['meta_info']


                class Minute15Otn(object):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: min15_otn_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\: :py:class:`Min15OtnThreshes <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Min15OtnThreshes>`
                    
                    .. attribute:: minute15otn_reports
                    
                    	set otn TCA reporting status
                    	**type**\: :py:class:`Minute15OtnReports <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Minute15OtnReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.min15_otn_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Min15OtnThreshes()
                        self.min15_otn_threshes.parent = self
                        self.minute15otn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Minute15OtnReports()
                        self.minute15otn_reports.parent = self


                    class Min15OtnThreshes(object):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_thresh
                        
                        	none
                        	**type**\: list of :py:class:`Min15OtnThresh <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Min15OtnThreshes.Min15OtnThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.min15_otn_thresh = YList()
                            self.min15_otn_thresh.parent = self
                            self.min15_otn_thresh.name = 'min15_otn_thresh'


                        class Min15OtnThresh(object):
                            """
                            none
                            
                            .. attribute:: otn_threshold  <key>
                            
                            	Otn Threshold Type
                            	**type**\: :py:class:`OtnThresholdEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnThresholdEnum>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_threshold = None
                                self.otn_threshold_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_threshold is None:
                                    raise YPYModelError('Key property otn_threshold is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-thresh[Cisco-IOS-XR-pmengine-cfg:otn-threshold = ' + str(self.otn_threshold) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_threshold is not None:
                                    return True

                                if self.otn_threshold_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Min15OtnThreshes.Min15OtnThresh']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:min15-otn-threshes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.min15_otn_thresh is not None:
                                for child_ref in self.min15_otn_thresh:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Min15OtnThreshes']['meta_info']


                    class Minute15OtnReports(object):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_report
                        
                        	none
                        	**type**\: list of :py:class:`Minute15OtnReport <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Minute15OtnReports.Minute15OtnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.minute15otn_report = YList()
                            self.minute15otn_report.parent = self
                            self.minute15otn_report.name = 'minute15otn_report'


                        class Minute15OtnReport(object):
                            """
                            none
                            
                            .. attribute:: otn_report  <key>
                            
                            	Otn Report Type
                            	**type**\: :py:class:`OtnReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.OtnReportEnum>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\: :py:class:`ReportEnum <ydk.models.pmengine.Cisco_IOS_XR_pmengine_cfg.ReportEnum>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.otn_report = None
                                self.enable = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.otn_report is None:
                                    raise YPYModelError('Key property otn_report is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-report[Cisco-IOS-XR-pmengine-cfg:otn-report = ' + str(self.otn_report) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.otn_report is not None:
                                    return True

                                if self.enable is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Minute15OtnReports.Minute15OtnReport']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn-reports'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.minute15otn_report is not None:
                                for child_ref in self.minute15otn_report:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn.Minute15OtnReports']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15otn'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.min15_otn_threshes is not None and self.min15_otn_threshes._has_data():
                            return True

                        if self.minute15otn_reports is not None and self.minute15otn_reports._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Otn']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:minute15'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.minute15_optics is not None and self.minute15_optics._has_data():
                        return True

                    if self.minute15fec is not None and self.minute15fec._has_data():
                        return True

                    if self.minute15otn is not None and self.minute15otn._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-pmengine-cfg:performance-management'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ethernet_hour24 is not None and self.ethernet_hour24._has_data():
                    return True

                if self.ethernet_minute15 is not None and self.ethernet_minute15._has_data():
                    return True

                if self.ho_vc_hour24 is not None and self.ho_vc_hour24._has_data():
                    return True

                if self.ho_vc_minute15 is not None and self.ho_vc_minute15._has_data():
                    return True

                if self.hour24 is not None and self.hour24._has_data():
                    return True

                if self.hour24_gfp is not None and self.hour24_gfp._has_data():
                    return True

                if self.hour24_path is not None and self.hour24_path._has_data():
                    return True

                if self.hour24otn_tcms is not None and self.hour24otn_tcms._has_data():
                    return True

                if self.minute15 is not None and self.minute15._has_data():
                    return True

                if self.minute15_gfp is not None and self.minute15_gfp._has_data():
                    return True

                if self.minute15_path is not None and self.minute15_path._has_data():
                    return True

                if self.minute15otn_tcms is not None and self.minute15otn_tcms._has_data():
                    return True

                if self.oc_hour24 is not None and self.oc_hour24._has_data():
                    return True

                if self.oc_minute15 is not None and self.oc_minute15._has_data():
                    return True

                if self.sonet_hour24 is not None and self.sonet_hour24._has_data():
                    return True

                if self.sonet_minute15 is not None and self.sonet_minute15._has_data():
                    return True

                if self.stm_hour24 is not None and self.stm_hour24._has_data():
                    return True

                if self.stm_minute15 is not None and self.stm_minute15._has_data():
                    return True

                if self.sts_hour24 is not None and self.sts_hour24._has_data():
                    return True

                if self.sts_minute15 is not None and self.sts_minute15._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement']['meta_info']


        class CiscoIosXrSkpQosCfg_Qos(object):
            """
            Interface QOS configuration
            
            .. attribute:: actual_rate_down
            
            	Minimum bandwidth guaranteed for a subscriber
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: actual_rate_up
            
            	Minimum bandwidth guaranteed for a subscriber
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: input
            
            	Ingress service policy
            	**type**\: :py:class:`Input <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Input>`
            
            .. attribute:: l2_overhead
            
            	Layer 2 overhead accounting
            	**type**\: :py:class:`L2Overhead <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead>`
            
            .. attribute:: minimum_bandwidth
            
            	Minimum bandwidth guaranteed for a subscriber
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: output
            
            	Egress service policy
            	**type**\: :py:class:`Output <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Output>`
            
            

            """

            _prefix = 'skp-qos-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.actual_rate_down = None
                self.actual_rate_up = None
                self.input = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Input()
                self.input.parent = self
                self.l2_overhead = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead()
                self.l2_overhead.parent = self
                self.minimum_bandwidth = None
                self.output = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Output()
                self.output.parent = self


            class Output(object):
                """
                Egress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of :py:class:`ServicePolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Output.ServicePolicy>`
                
                

                """

                _prefix = 'skp-qos-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.service_policy = YList()
                    self.service_policy.parent = self
                    self.service_policy.name = 'service_policy'


                class ServicePolicy(object):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  <key>
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**range:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\: :py:class:`QosPolicyAccountEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.QosPolicyAccountEnum>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: policy_merge
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: resource_id
                    
                    	Resource ID value
                    	**type**\: int
                    
                    	**range:** 0..3
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	TRUE if service\-policy applied is a service\-fragment policy)
                    	**type**\: bool
                    
                    .. attribute:: spi_name
                    
                    	Name of the SPI
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	TRUE if service\-policy applied on svlan
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'skp-qos-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.policy_merge = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.service_policy_name is None:
                            raise YPYModelError('Key property service_policy_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:service-policy[Cisco-IOS-XR-skp-qos-cfg:service-policy-name = ' + str(self.service_policy_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.service_policy_name is not None:
                            return True

                        if self.account_type is not None:
                            return True

                        if self.l1_user_defined is not None:
                            return True

                        if self.policy_merge is not None:
                            return True

                        if self.resource_id is not None:
                            return True

                        if self.service_fragment_parent_policy is not None:
                            return True

                        if self.spi_name is not None:
                            return True

                        if self.subscriber_parent_policy is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Output.ServicePolicy']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:output'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.service_policy is not None:
                        for child_ref in self.service_policy:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Output']['meta_info']


            class L2Overhead(object):
                """
                Layer 2 overhead accounting
                
                .. attribute:: account
                
                	Access Loop Encapsulation
                	**type**\: :py:class:`Account <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead.Account>`
                
                .. attribute:: iwf
                
                	Enable IWF for L2 overhead accounting
                	**type**\: :py:class:`Empty <ydk.types.Empty>`
                
                

                """

                _prefix = 'skp-qos-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.account = InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead.Account()
                    self.account.parent = self
                    self.iwf = None


                class Account(object):
                    """
                    Access Loop Encapsulation
                    
                    .. attribute:: atm_cell_tax
                    
                    	ATM cell tax to be included for overhead calculation
                    	**type**\: bool
                    
                    .. attribute:: data_link_type
                    
                    	Data link type
                    	**type**\: :py:class:`Qosl2DataLinkEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.Qosl2DataLinkEnum>`
                    
                    .. attribute:: encap_type
                    
                    	Encap used between the DSLAM and CPE
                    	**type**\: :py:class:`Qosl2EncapEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.Qosl2EncapEnum>`
                    
                    .. attribute:: l2_user_defined
                    
                    	User specified value 
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    

                    """

                    _prefix = 'skp-qos-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.atm_cell_tax = None
                        self.data_link_type = None
                        self.encap_type = None
                        self.l2_user_defined = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:account'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.atm_cell_tax is not None:
                            return True

                        if self.data_link_type is not None:
                            return True

                        if self.encap_type is not None:
                            return True

                        if self.l2_user_defined is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead.Account']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:l2-overhead'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.account is not None and self.account._has_data():
                        return True

                    if self.iwf is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.L2Overhead']['meta_info']


            class Input(object):
                """
                Ingress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of :py:class:`ServicePolicy <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Input.ServicePolicy>`
                
                

                """

                _prefix = 'skp-qos-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.service_policy = YList()
                    self.service_policy.parent = self
                    self.service_policy.name = 'service_policy'


                class ServicePolicy(object):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  <key>
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**range:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\: :py:class:`QosPolicyAccountEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.QosPolicyAccountEnum>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: policy_merge
                    
                    	Not supported (Leave unspecified)
                    	**type**\: :py:class:`QosFieldNotSupportedEnum <ydk.models.skp.Cisco_IOS_XR_skp_qos_cfg.QosFieldNotSupportedEnum>`
                    
                    .. attribute:: resource_id
                    
                    	Resource ID value
                    	**type**\: int
                    
                    	**range:** 0..3
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	TRUE if service\-policy applied is a service\-fragment policy)
                    	**type**\: bool
                    
                    .. attribute:: spi_name
                    
                    	Name of the SPI
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	TRUE if service\-policy applied on svlan
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'skp-qos-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.policy_merge = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')
                        if self.service_policy_name is None:
                            raise YPYModelError('Key property service_policy_name is None')

                        return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:service-policy[Cisco-IOS-XR-skp-qos-cfg:service-policy-name = ' + str(self.service_policy_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.service_policy_name is not None:
                            return True

                        if self.account_type is not None:
                            return True

                        if self.l1_user_defined is not None:
                            return True

                        if self.policy_merge is not None:
                            return True

                        if self.resource_id is not None:
                            return True

                        if self.service_fragment_parent_policy is not None:
                            return True

                        if self.spi_name is not None:
                            return True

                        if self.subscriber_parent_policy is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Input.ServicePolicy']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:input'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.service_policy is not None:
                        for child_ref in self.service_policy:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos.Input']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-skp-qos-cfg:Cisco-IOS-XR-skp-qos-cfg_qos'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.actual_rate_down is not None:
                    return True

                if self.actual_rate_up is not None:
                    return True

                if self.input is not None and self.input._has_data():
                    return True

                if self.l2_overhead is not None and self.l2_overhead._has_data():
                    return True

                if self.minimum_bandwidth is not None:
                    return True

                if self.output is not None and self.output._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.CiscoIosXrSkpQosCfg_Qos']['meta_info']


        class NetFlow(object):
            """
            Interface netflow configuration
            
            .. attribute:: ipv4
            
            	Configure IPv4 netflow
            	**type**\: :py:class:`Ipv4 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4>`
            
            .. attribute:: ipv6
            
            	Configure IPv6 netflow
            	**type**\: :py:class:`Ipv6 <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6>`
            
            .. attribute:: mpls
            
            	Configure MPLS netflow
            	**type**\: :py:class:`Mpls <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls>`
            
            

            """

            _prefix = 'traffmon-netflow-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.ipv4 = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4()
                self.ipv4.parent = self
                self.ipv6 = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6()
                self.ipv6.parent = self
                self.mpls = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls()
                self.mpls.parent = self


            class Mpls(object):
                """
                Configure MPLS netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\: :py:class:`FlowMonitorMap <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap()
                    self.flow_monitor_map.parent = self


                class FlowMonitorMap(object):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\: :py:class:`Egress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress>`
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\: :py:class:`Ingress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress()
                        self.ingress.parent = self


                    class Ingress(object):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:ingress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress']['meta_info']


                    class Egress(object):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:egress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-map'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress is not None and self.egress._has_data():
                            return True

                        if self.ingress is not None and self.ingress._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:mpls'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_monitor_map is not None and self.flow_monitor_map._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls']['meta_info']


            class Ipv6(object):
                """
                Configure IPv6 netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\: :py:class:`FlowMonitorMap <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap()
                    self.flow_monitor_map.parent = self


                class FlowMonitorMap(object):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\: :py:class:`Egress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress>`
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\: :py:class:`Ingress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress()
                        self.ingress.parent = self


                    class Ingress(object):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:ingress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress']['meta_info']


                    class Egress(object):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:egress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-map'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress is not None and self.egress._has_data():
                            return True

                        if self.ingress is not None and self.ingress._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:ipv6'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_monitor_map is not None and self.flow_monitor_map._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6']['meta_info']


            class Ipv4(object):
                """
                Configure IPv4 netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\: :py:class:`FlowMonitorMap <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap()
                    self.flow_monitor_map.parent = self


                class FlowMonitorMap(object):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\: :py:class:`Egress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress>`
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\: :py:class:`Ingress <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress()
                        self.ingress.parent = self


                    class Ingress(object):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:ingress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress']['meta_info']


                    class Egress(object):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of :py:class:`FlowMonitorName <ydk.models.ifmgr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_monitor_name = YList()
                            self.flow_monitor_name.parent = self
                            self.flow_monitor_name.name = 'flow_monitor_name'


                        class FlowMonitorName(object):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  <key>
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.monitor_map_name = None
                                self.sampler_map_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.monitor_map_name is None:
                                    raise YPYModelError('Key property monitor_map_name is None')

                                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-name[Cisco-IOS-XR-traffmon-netflow-cfg:monitor-map-name = ' + str(self.monitor_map_name) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.monitor_map_name is not None:
                                    return True

                                if self.sampler_map_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:egress'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_monitor_name is not None:
                                for child_ref in self.flow_monitor_name:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:flow-monitor-map'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress is not None and self.egress._has_data():
                            return True

                        if self.ingress is not None and self.ingress._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                        return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:ipv4'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_monitor_map is not None and self.flow_monitor_map._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                    return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-traffmon-netflow-cfg:net-flow'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.ipv4 is not None and self.ipv4._has_data():
                    return True

                if self.ipv6 is not None and self.ipv6._has_data():
                    return True

                if self.mpls is not None and self.mpls._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.NetFlow']['meta_info']


        class Wanphy(object):
            """
            WANPHY port controller configuration
            
            .. attribute:: lan_mode
            
            	Configure LAN Mode
            	**type**\: :py:class:`WanphyLanModeEnum <ydk.models.wanphy.Cisco_IOS_XR_wanphy_ui_cfg.WanphyLanModeEnum>`
            
            .. attribute:: report_line_ais
            
            	Configure Line Alarm Indication Signal reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_lof
            
            	Configure Loss Of Frame reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_lop
            
            	Configure Loss Of Pointer reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_los
            
            	Configure Loss Of Signal reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_ais
            
            	Configure Path Alarm Indication Signal reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_fe_ais
            
            	Configure Path Far End Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_fe_plm
            
            	Configure Path Far End Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_lcd
            
            	Configure Path Loss Of Code\-Group Delineation reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_plm
            
            	Configure Path Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_path_rdi
            
            	Configure Path Remote Defect Indicator reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_rdi
            
            	Configure Remote Defect Indicator reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_sd_ber
            
            	Configure B2 BER in excess of SD threshold reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: report_sf_ber
            
            	Configure B2 BER in excess of SF threshold reporting
            	**type**\: :py:class:`Empty <ydk.types.Empty>`
            
            .. attribute:: threshold_sd_ber
            
            	Bit error rate is 10 to the minus n, where n is threshold value
            	**type**\: int
            
            	**range:** 3..9
            
            .. attribute:: threshold_sf_ber
            
            	Bit error rate is 10 to the minus n, where n is threshold value
            	**type**\: int
            
            	**range:** 3..9
            
            .. attribute:: wan_mode
            
            	Configure WAN Mode
            	**type**\: :py:class:`WanphyWanModeEnum <ydk.models.wanphy.Cisco_IOS_XR_wanphy_ui_cfg.WanphyWanModeEnum>`
            
            

            """

            _prefix = 'wanphy-ui-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.lan_mode = None
                self.report_line_ais = None
                self.report_lof = None
                self.report_lop = None
                self.report_los = None
                self.report_path_ais = None
                self.report_path_fe_ais = None
                self.report_path_fe_plm = None
                self.report_path_lcd = None
                self.report_path_plm = None
                self.report_path_rdi = None
                self.report_rdi = None
                self.report_sd_ber = None
                self.report_sf_ber = None
                self.threshold_sd_ber = None
                self.threshold_sf_ber = None
                self.wan_mode = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-wanphy-ui-cfg:wanphy'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.lan_mode is not None:
                    return True

                if self.report_line_ais is not None:
                    return True

                if self.report_lof is not None:
                    return True

                if self.report_lop is not None:
                    return True

                if self.report_los is not None:
                    return True

                if self.report_path_ais is not None:
                    return True

                if self.report_path_fe_ais is not None:
                    return True

                if self.report_path_fe_plm is not None:
                    return True

                if self.report_path_lcd is not None:
                    return True

                if self.report_path_plm is not None:
                    return True

                if self.report_path_rdi is not None:
                    return True

                if self.report_rdi is not None:
                    return True

                if self.report_sd_ber is not None:
                    return True

                if self.report_sf_ber is not None:
                    return True

                if self.threshold_sd_ber is not None:
                    return True

                if self.threshold_sf_ber is not None:
                    return True

                if self.wan_mode is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
                return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration.Wanphy']['meta_info']

        @property
        def _common_path(self):
            if self.active is None:
                raise YPYModelError('Key property active is None')
            if self.interface_name is None:
                raise YPYModelError('Key property interface_name is None')

            return '/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/Cisco-IOS-XR-ifmgr-cfg:interface-configuration[Cisco-IOS-XR-ifmgr-cfg:active = ' + str(self.active) + '][Cisco-IOS-XR-ifmgr-cfg:interface-name = ' + str(self.interface_name) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.active is not None:
                return True

            if self.interface_name is not None:
                return True

            if self.afs is not None and self.afs._has_data():
                return True

            if self.atm is not None and self.atm._has_data():
                return True

            if self.bandwidth is not None:
                return True

            if self.bfd is not None and self.bfd._has_data():
                return True

            if self.bundle is not None and self.bundle._has_data():
                return True

            if self.bundle_member is not None and self.bundle_member._has_data():
                return True

            if self.cdp is not None and self.cdp._has_data():
                return True

            if self.cisco_ios_xr_ncs5500_qos_cfg_qos is not None and self.cisco_ios_xr_ncs5500_qos_cfg_qos._has_data():
                return True

            if self.cisco_ios_xr_skp_qos_cfg_qos is not None and self.cisco_ios_xr_skp_qos_cfg_qos._has_data():
                return True

            if self.dagrs is not None and self.dagrs._has_data():
                return True

            if self.dampening is not None and self.dampening._has_data():
                return True

            if self.description is not None:
                return True

            if self.encapsulation is not None and self.encapsulation._has_data():
                return True

            if self.es_packet_filter is not None and self.es_packet_filter._has_data():
                return True

            if self.ethernet is not None and self.ethernet._has_data():
                return True

            if self.ethernet_bng is not None and self.ethernet_bng._has_data():
                return True

            if self.ethernet_features is not None and self.ethernet_features._has_data():
                return True

            if self.ethernet_service is not None and self.ethernet_service._has_data():
                return True

            if self.interface_mode_non_physical is not None:
                return True

            if self.interface_virtual is not None:
                return True

            if self.ipv4_network is not None and self.ipv4_network._has_data():
                return True

            if self.ipv4_network_forwarding is not None and self.ipv4_network_forwarding._has_data():
                return True

            if self.ipv4_packet_filter is not None and self.ipv4_packet_filter._has_data():
                return True

            if self.ipv4arp is not None and self.ipv4arp._has_data():
                return True

            if self.ipv6_neighbor is not None and self.ipv6_neighbor._has_data():
                return True

            if self.ipv6_network is not None and self.ipv6_network._has_data():
                return True

            if self.ipv6_packet_filter is not None and self.ipv6_packet_filter._has_data():
                return True

            if self.l2_transport is not None and self.l2_transport._has_data():
                return True

            if self.lacp is not None and self.lacp._has_data():
                return True

            if self.link_status is not None:
                return True

            if self.lldp is not None and self.lldp._has_data():
                return True

            if self.mac_accounting is not None and self.mac_accounting._has_data():
                return True

            if self.mlacp is not None and self.mlacp._has_data():
                return True

            if self.mte_tunnel_attributes is not None and self.mte_tunnel_attributes._has_data():
                return True

            if self.mtus is not None and self.mtus._has_data():
                return True

            if self.net_flow is not None and self.net_flow._has_data():
                return True

            if self.nv_satellite_access is not None and self.nv_satellite_access._has_data():
                return True

            if self.nv_satellite_fabric_link is not None and self.nv_satellite_fabric_link._has_data():
                return True

            if self.nv_satellite_fabric_network is not None and self.nv_satellite_fabric_network._has_data():
                return True

            if self.optics is not None and self.optics._has_data():
                return True

            if self.otu is not None and self.otu._has_data():
                return True

            if self.pbr is not None and self.pbr._has_data():
                return True

            if self.performance_management is not None and self.performance_management._has_data():
                return True

            if self.pseudowire_ether is not None and self.pseudowire_ether._has_data():
                return True

            if self.pseudowire_iw is not None and self.pseudowire_iw._has_data():
                return True

            if self.secondary_admin_state is not None:
                return True

            if self.shutdown is not None:
                return True

            if self.span_monitor_sessions is not None and self.span_monitor_sessions._has_data():
                return True

            if self.statistics is not None and self.statistics._has_data():
                return True

            if self.transport_profile_tunnel is not None and self.transport_profile_tunnel._has_data():
                return True

            if self.tunnel_te_attributes is not None and self.tunnel_te_attributes._has_data():
                return True

            if self.vlan_sub_configuration is not None and self.vlan_sub_configuration._has_data():
                return True

            if self.vlan_trunk_configuration is not None and self.vlan_trunk_configuration._has_data():
                return True

            if self.vrf is not None:
                return True

            if self.wanphy is not None and self.wanphy._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
            return meta._meta_table['InterfaceConfigurations.InterfaceConfiguration']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ifmgr-cfg:interface-configurations'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.interface_configuration is not None:
            for child_ref in self.interface_configuration:
                if child_ref._has_data():
                    return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ifmgr._meta import _Cisco_IOS_XR_ifmgr_cfg as meta
        return meta._meta_table['InterfaceConfigurations']['meta_info']


