""" Cisco_IOS_XR_clns_isis_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR clns\-isis package operational data.

This module contains definitions
for the following management objects\:
  isis\: IS\-IS operational data

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class IsisAdjBfdState(Enum):
    """
    IsisAdjBfdState (Enum Class)

    Current BFD state of an adjacency

    .. data:: isis_adj_bfd_no_state = 0

    	No BFD session created

    .. data:: isis_adj_bfd_down_state = 1

    	BFD session is DOWN

    .. data:: isis_adj_bfd_init_state = 2

    	Waiting for BFD session to come UP

    .. data:: isis_adj_bfd_up_state = 3

    	BFD session is UP

    """

    isis_adj_bfd_no_state = Enum.YLeaf(0, "isis-adj-bfd-no-state")

    isis_adj_bfd_down_state = Enum.YLeaf(1, "isis-adj-bfd-down-state")

    isis_adj_bfd_init_state = Enum.YLeaf(2, "isis-adj-bfd-init-state")

    isis_adj_bfd_up_state = Enum.YLeaf(3, "isis-adj-bfd-up-state")


class IsisAdjState(Enum):
    """
    IsisAdjState (Enum Class)

    Isis adj state

    .. data:: isis_adj_up_state = 0

    	Adjacency up

    .. data:: isis_adj_init_state = 1

    	Adjacency initializing

    .. data:: isis_adj_failed_state = 2

    	Adjacency down/failed

    """

    isis_adj_up_state = Enum.YLeaf(0, "isis-adj-up-state")

    isis_adj_init_state = Enum.YLeaf(1, "isis-adj-init-state")

    isis_adj_failed_state = Enum.YLeaf(2, "isis-adj-failed-state")


class IsisAdjStateReason(Enum):
    """
    IsisAdjStateReason (Enum Class)

    Isis adj state reason

    .. data:: isis_adj_up_nsf_restart = 0

    	NSF Restart

    .. data:: isis_adj_up_new_adj = 1

    	New adjacency

    .. data:: isis_adj_up_restarted = 2

    	Restarted

    .. data:: isis_adj_up_nsf_restored = 3

    	Restored during NSF

    .. data:: isis_adj_up_chkpt_restored = 4

    	Restored from checkpoint

    .. data:: isis_adj_init_reason = 5

    	Into INIT

    .. data:: isis_adj_init_neighbor_forgot = 6

    	Neighbor forgot us

    .. data:: isis_adj_down_hold_time = 7

    	Holdtime expired

    .. data:: isis_adj_down_if_down = 8

    	Interface state going down

    .. data:: isis_adj_down_cfg_mismatch = 9

    	Area address/level mismatch

    .. data:: isis_adj_down_circ_id = 10

    	Circuit ID changed

    .. data:: isis_adj_down_nsf_ack_fail = 11

    	NSF could not CSNP Ack P2P adjacency

    .. data:: isis_adj_down_db_clear = 12

    	Clear of the Adjacency DB

    .. data:: isis_adj_down_no_common_topology = 13

    	Neighbors have no common link topology

    .. data:: isis_adj_down_restart_tlv_missing = 14

    	Restart TLV missing during IETF NSF restart

    .. data:: isis_adj_down_bfd_down = 15

    	BFD session has gone DOWN

    .. data:: isis_adj_down_3way_down = 16

    	3-way state down

    """

    isis_adj_up_nsf_restart = Enum.YLeaf(0, "isis-adj-up-nsf-restart")

    isis_adj_up_new_adj = Enum.YLeaf(1, "isis-adj-up-new-adj")

    isis_adj_up_restarted = Enum.YLeaf(2, "isis-adj-up-restarted")

    isis_adj_up_nsf_restored = Enum.YLeaf(3, "isis-adj-up-nsf-restored")

    isis_adj_up_chkpt_restored = Enum.YLeaf(4, "isis-adj-up-chkpt-restored")

    isis_adj_init_reason = Enum.YLeaf(5, "isis-adj-init-reason")

    isis_adj_init_neighbor_forgot = Enum.YLeaf(6, "isis-adj-init-neighbor-forgot")

    isis_adj_down_hold_time = Enum.YLeaf(7, "isis-adj-down-hold-time")

    isis_adj_down_if_down = Enum.YLeaf(8, "isis-adj-down-if-down")

    isis_adj_down_cfg_mismatch = Enum.YLeaf(9, "isis-adj-down-cfg-mismatch")

    isis_adj_down_circ_id = Enum.YLeaf(10, "isis-adj-down-circ-id")

    isis_adj_down_nsf_ack_fail = Enum.YLeaf(11, "isis-adj-down-nsf-ack-fail")

    isis_adj_down_db_clear = Enum.YLeaf(12, "isis-adj-down-db-clear")

    isis_adj_down_no_common_topology = Enum.YLeaf(13, "isis-adj-down-no-common-topology")

    isis_adj_down_restart_tlv_missing = Enum.YLeaf(14, "isis-adj-down-restart-tlv-missing")

    isis_adj_down_bfd_down = Enum.YLeaf(15, "isis-adj-down-bfd-down")

    isis_adj_down_3way_down = Enum.YLeaf(16, "isis-adj-down-3way-down")


class IsisAdjTopoChange(Enum):
    """
    IsisAdjTopoChange (Enum Class)

    Per\-topology change type for an adjacency

    .. data:: isis_adj_topo_up_change = 0

    	Topology up

    .. data:: isis_adj_topo_next_hop_change = 1

    	Topology next-hop changed

    .. data:: isis_adj_topo_down_change = 2

    	Topology down

    """

    isis_adj_topo_up_change = Enum.YLeaf(0, "isis-adj-topo-up-change")

    isis_adj_topo_next_hop_change = Enum.YLeaf(1, "isis-adj-topo-next-hop-change")

    isis_adj_topo_down_change = Enum.YLeaf(2, "isis-adj-topo-down-change")


class IsisAdjTopoStatus(Enum):
    """
    IsisAdjTopoStatus (Enum Class)

    Status of a topology in an adjacency

    .. data:: isis_adj_topo_status_ok = 0

    	Topology is included in adjacency

    .. data:: isis_adj_topo_status_intf_not_configured = 1

    	Topology is not configured on the interface

    .. data:: isis_adj_topo_status_intf_not_running = 2

    	Topology is not running on the interface

    .. data:: isis_adj_topo_status_init_state = 3

    	Adjacency is in INIT state

    .. data:: isis_adj_topo_status_neighbor_doesnt_participate = 4

    	Neighbor doesn't participate in topology

    .. data:: isis_adj_topo_status_ipv4_address_tlv_missing = 5

    	Neighbor IIH doesn't contain IPv4 address TLV

    .. data:: isis_adj_topo_status_ipv4_address_tlv_empty = 6

    	Neighbor's IPv4 address TLV is empty

    .. data:: isis_adj_topo_status_ipv6_address_tlv_missing = 7

    	Neighbor IIH doesn't contain IPv6 address TLV

    .. data:: isis_adj_topo_status_ipv6_address_tlv_empty = 8

    	Neighbor's IPv6 address TLV is empty

    .. data:: isis_adj_topo_status_ipv4_address_matches_ours = 9

    	Neighbor's IPv4 address matches ours

    .. data:: isis_adj_topo_status_ipv6_address_matches_ours = 10

    	Neighbor's IPv6 address matches ours

    .. data:: isis_adj_topo_status_ipv4_address_subnet_mismatch = 11

    	Neighbor's IPv4 address is in a different

    	subnet to ours

    .. data:: isis_adj_topo_status_ipv6_address_not_link_local = 12

    	Neighbor's IPv6 address is not link local

    """

    isis_adj_topo_status_ok = Enum.YLeaf(0, "isis-adj-topo-status-ok")

    isis_adj_topo_status_intf_not_configured = Enum.YLeaf(1, "isis-adj-topo-status-intf-not-configured")

    isis_adj_topo_status_intf_not_running = Enum.YLeaf(2, "isis-adj-topo-status-intf-not-running")

    isis_adj_topo_status_init_state = Enum.YLeaf(3, "isis-adj-topo-status-init-state")

    isis_adj_topo_status_neighbor_doesnt_participate = Enum.YLeaf(4, "isis-adj-topo-status-neighbor-doesnt-participate")

    isis_adj_topo_status_ipv4_address_tlv_missing = Enum.YLeaf(5, "isis-adj-topo-status-ipv4-address-tlv-missing")

    isis_adj_topo_status_ipv4_address_tlv_empty = Enum.YLeaf(6, "isis-adj-topo-status-ipv4-address-tlv-empty")

    isis_adj_topo_status_ipv6_address_tlv_missing = Enum.YLeaf(7, "isis-adj-topo-status-ipv6-address-tlv-missing")

    isis_adj_topo_status_ipv6_address_tlv_empty = Enum.YLeaf(8, "isis-adj-topo-status-ipv6-address-tlv-empty")

    isis_adj_topo_status_ipv4_address_matches_ours = Enum.YLeaf(9, "isis-adj-topo-status-ipv4-address-matches-ours")

    isis_adj_topo_status_ipv6_address_matches_ours = Enum.YLeaf(10, "isis-adj-topo-status-ipv6-address-matches-ours")

    isis_adj_topo_status_ipv4_address_subnet_mismatch = Enum.YLeaf(11, "isis-adj-topo-status-ipv4-address-subnet-mismatch")

    isis_adj_topo_status_ipv6_address_not_link_local = Enum.YLeaf(12, "isis-adj-topo-status-ipv6-address-not-link-local")


class IsisAfId(Enum):
    """
    IsisAfId (Enum Class)

    Isis af id

    .. data:: ipv4 = 0

    	IPv4

    .. data:: ipv6 = 1

    	IPv6

    """

    ipv4 = Enum.YLeaf(0, "ipv4")

    ipv6 = Enum.YLeaf(1, "ipv6")


class IsisEnabled(Enum):
    """
    IsisEnabled (Enum Class)

    Isis enabled

    .. data:: isis_disabled = 0

    	Disabled

    .. data:: isis_enabled = 1

    	Enabled

    """

    isis_disabled = Enum.YLeaf(0, "isis-disabled")

    isis_enabled = Enum.YLeaf(1, "isis-enabled")


class IsisErrLogLevel(Enum):
    """
    IsisErrLogLevel (Enum Class)

    Isis err log level

    .. data:: isis_err_log_level_info = 0

    	isis err log level info

    .. data:: isis_err_log_level_warn = 1

    	isis err log level warn

    .. data:: isis_err_log_level_critical = 2

    	isis err log level critical

    """

    isis_err_log_level_info = Enum.YLeaf(0, "isis-err-log-level-info")

    isis_err_log_level_warn = Enum.YLeaf(1, "isis-err-log-level-warn")

    isis_err_log_level_critical = Enum.YLeaf(2, "isis-err-log-level-critical")


class IsisFrr(Enum):
    """
    IsisFrr (Enum Class)

    Isis frr

    .. data:: isis_frr_type_none = 0

    	Computation disabled

    .. data:: isis_frr_type_per_link = 1

    	Prefix independent per-link computation

    .. data:: isis_frr_type_per_prefix = 2

    	Prefix dependent computation

    .. data:: isis_frr_type_sr_u_loop = 3

    	Segment Routing Microloop Avoidance computation

    """

    isis_frr_type_none = Enum.YLeaf(0, "isis-frr-type-none")

    isis_frr_type_per_link = Enum.YLeaf(1, "isis-frr-type-per-link")

    isis_frr_type_per_prefix = Enum.YLeaf(2, "isis-frr-type-per-prefix")

    isis_frr_type_sr_u_loop = Enum.YLeaf(3, "isis-frr-type-sr-u-loop")


class IsisFrrTiebreaker(Enum):
    """
    IsisFrrTiebreaker (Enum Class)

    Isis frr tiebreaker

    .. data:: isis_frr_tiebreaker_down_stream = 0

    	Backup path is via downstream node

    .. data:: isis_frr_tiebreaker_lc_disjoint = 1

    	Backup path is line card disjoint

    .. data:: isis_frr_tiebreaker_low_est_backup_metric = 2

    	Backup path has lowest metric

    .. data:: isis_frr_tiebreaker_node_protecting = 3

    	Backup path is node protecting

    .. data:: isis_frr_tiebreaker_primary_path = 4

    	Backup path is ECMP

    .. data:: isis_frr_tiebreaker_secondary_path = 5

    	Backup path is not an ECMP

    .. data:: isis_frr_tiebreaker_srlg_disjoint = 6

    	Backup path is SRLG disjoint

    .. data:: isis_frr_tiebreaker_default = 7

    	Backup path is link protecting

    """

    isis_frr_tiebreaker_down_stream = Enum.YLeaf(0, "isis-frr-tiebreaker-down-stream")

    isis_frr_tiebreaker_lc_disjoint = Enum.YLeaf(1, "isis-frr-tiebreaker-lc-disjoint")

    isis_frr_tiebreaker_low_est_backup_metric = Enum.YLeaf(2, "isis-frr-tiebreaker-low-est-backup-metric")

    isis_frr_tiebreaker_node_protecting = Enum.YLeaf(3, "isis-frr-tiebreaker-node-protecting")

    isis_frr_tiebreaker_primary_path = Enum.YLeaf(4, "isis-frr-tiebreaker-primary-path")

    isis_frr_tiebreaker_secondary_path = Enum.YLeaf(5, "isis-frr-tiebreaker-secondary-path")

    isis_frr_tiebreaker_srlg_disjoint = Enum.YLeaf(6, "isis-frr-tiebreaker-srlg-disjoint")

    isis_frr_tiebreaker_default = Enum.YLeaf(7, "isis-frr-tiebreaker-default")


class IsisIfAdjFormDisabledReason(Enum):
    """
    IsisIfAdjFormDisabledReason (Enum Class)

    Isis if adj form disabled reason

    .. data:: isis_intf_adj_form_disabled_cfg_passive = 0

    	isis intf adj form disabled cfg passive

    .. data:: isis_intf_adj_form_disabled_no_topo_participate = 1

    	isis intf adj form disabled no topo participate

    .. data:: isis_intf_adj_form_disabled_add_to_intf_stack_fail = 2

    	isis intf adj form disabled add to intf stack

    	fail

    .. data:: isis_intf_adj_form_disabled_clns_io = 3

    	isis intf adj form disabled clns io

    .. data:: isis_intf_adj_form_disabled_internal_error = 4

    	isis intf adj form disabled internal error

    """

    isis_intf_adj_form_disabled_cfg_passive = Enum.YLeaf(0, "isis-intf-adj-form-disabled-cfg-passive")

    isis_intf_adj_form_disabled_no_topo_participate = Enum.YLeaf(1, "isis-intf-adj-form-disabled-no-topo-participate")

    isis_intf_adj_form_disabled_add_to_intf_stack_fail = Enum.YLeaf(2, "isis-intf-adj-form-disabled-add-to-intf-stack-fail")

    isis_intf_adj_form_disabled_clns_io = Enum.YLeaf(3, "isis-intf-adj-form-disabled-clns-io")

    isis_intf_adj_form_disabled_internal_error = Enum.YLeaf(4, "isis-intf-adj-form-disabled-internal-error")


class IsisIfAdvPrefixDisabledReason(Enum):
    """
    IsisIfAdvPrefixDisabledReason (Enum Class)

    Isis if adv prefix disabled reason

    .. data:: isis_intf_adv_prefix_disabled_if_cfg_suppressed = 0

    	isis intf adv prefix disabled if cfg suppressed

    .. data:: isis_intf_adv_prefix_disabled_no_topo_participate = 1

    	isis intf adv prefix disabled no topo

    	participate

    .. data:: isis_intf_adv_prefix_disabled_internal_error = 2

    	isis intf adv prefix disabled internal error

    """

    isis_intf_adv_prefix_disabled_if_cfg_suppressed = Enum.YLeaf(0, "isis-intf-adv-prefix-disabled-if-cfg-suppressed")

    isis_intf_adv_prefix_disabled_no_topo_participate = Enum.YLeaf(1, "isis-intf-adv-prefix-disabled-no-topo-participate")

    isis_intf_adv_prefix_disabled_internal_error = Enum.YLeaf(2, "isis-intf-adv-prefix-disabled-internal-error")


class IsisIfAfDisabledReason(Enum):
    """
    IsisIfAfDisabledReason (Enum Class)

    Isis if af disabled reason

    .. data:: isis_intf_af_disabled_no_topo_enabled = 0

    	isis intf af disabled no topo enabled

    .. data:: isis_intf_af_disabled_internal_error = 1

    	isis intf af disabled internal error

    """

    isis_intf_af_disabled_no_topo_enabled = Enum.YLeaf(0, "isis-intf-af-disabled-no-topo-enabled")

    isis_intf_af_disabled_internal_error = Enum.YLeaf(1, "isis-intf-af-disabled-internal-error")


class IsisIfAfFwdAddrUnknownReason(Enum):
    """
    IsisIfAfFwdAddrUnknownReason (Enum Class)

    Isis if af fwd addr unknown reason

    .. data:: isis_intf_af_fwd_addr_unknown_cfg_passive = 0

    	isis intf af fwd addr unknown cfg passive

    .. data:: isis_intf_af_fwd_addr_unknown_proto_doesnt_exist = 1

    	isis intf af fwd addr unknown proto doesnt

    	exist

    .. data:: isis_intf_af_fwd_addr_unknown_next_hop_reg_error = 2

    	isis intf af fwd addr unknown next hop reg

    	error

    .. data:: isis_intf_af_fwd_addr_unknown_no_link_local_add = 3

    	isis intf af fwd addr unknown no link local add

    .. data:: isis_intf_af_fwd_addr_unknown_af_not_up = 4

    	isis intf af fwd addr unknown af not up

    .. data:: isis_intf_af_fwd_addr_unknown_vrf_enabled = 5

    	isis intf af fwd addr unknown vrf enabled

    .. data:: isis_intf_af_fwd_addr_unknown_internal_error = 6

    	isis intf af fwd addr unknown internal error

    """

    isis_intf_af_fwd_addr_unknown_cfg_passive = Enum.YLeaf(0, "isis-intf-af-fwd-addr-unknown-cfg-passive")

    isis_intf_af_fwd_addr_unknown_proto_doesnt_exist = Enum.YLeaf(1, "isis-intf-af-fwd-addr-unknown-proto-doesnt-exist")

    isis_intf_af_fwd_addr_unknown_next_hop_reg_error = Enum.YLeaf(2, "isis-intf-af-fwd-addr-unknown-next-hop-reg-error")

    isis_intf_af_fwd_addr_unknown_no_link_local_add = Enum.YLeaf(3, "isis-intf-af-fwd-addr-unknown-no-link-local-add")

    isis_intf_af_fwd_addr_unknown_af_not_up = Enum.YLeaf(4, "isis-intf-af-fwd-addr-unknown-af-not-up")

    isis_intf_af_fwd_addr_unknown_vrf_enabled = Enum.YLeaf(5, "isis-intf-af-fwd-addr-unknown-vrf-enabled")

    isis_intf_af_fwd_addr_unknown_internal_error = Enum.YLeaf(6, "isis-intf-af-fwd-addr-unknown-internal-error")


class IsisIfAfPrefixUnknownReason(Enum):
    """
    IsisIfAfPrefixUnknownReason (Enum Class)

    Isis if af prefix unknown reason

    .. data:: isis_intf_af_prefix_unknown_adv_suppressed = 0

    	isis intf af prefix unknown adv suppressed

    .. data:: isis_intf_af_prefix_unknown_global_addr_reg_error = 1

    	isis intf af prefix unknown global addr reg

    	error

    .. data:: isis_intf_af_prefix_unknown_internal_error = 2

    	isis intf af prefix unknown internal error

    """

    isis_intf_af_prefix_unknown_adv_suppressed = Enum.YLeaf(0, "isis-intf-af-prefix-unknown-adv-suppressed")

    isis_intf_af_prefix_unknown_global_addr_reg_error = Enum.YLeaf(1, "isis-intf-af-prefix-unknown-global-addr-reg-error")

    isis_intf_af_prefix_unknown_internal_error = Enum.YLeaf(2, "isis-intf-af-prefix-unknown-internal-error")


class IsisIfAfProtoDownReason(Enum):
    """
    IsisIfAfProtoDownReason (Enum Class)

    Isis if af proto down reason

    .. data:: isis_intf_af_proto_down_imd_conn_fail = 0

    	isis intf af proto down imd conn fail

    .. data:: isis_intf_af_proto_down_imd_node_doesnt_exist = 1

    	isis intf af proto down imd node doesnt exist

    .. data:: isis_intf_af_proto_down_imd_exist_reg_error = 2

    	isis intf af proto down imd exist reg error

    .. data:: isis_intf_af_proto_down_imd_state_reg_error = 3

    	isis intf af proto down imd state reg error

    .. data:: isis_intf_af_proto_down_af_not_up = 4

    	isis intf af proto down af not up

    .. data:: isis_intf_af_proto_down_internal_error = 5

    	isis intf af proto down internal error

    """

    isis_intf_af_proto_down_imd_conn_fail = Enum.YLeaf(0, "isis-intf-af-proto-down-imd-conn-fail")

    isis_intf_af_proto_down_imd_node_doesnt_exist = Enum.YLeaf(1, "isis-intf-af-proto-down-imd-node-doesnt-exist")

    isis_intf_af_proto_down_imd_exist_reg_error = Enum.YLeaf(2, "isis-intf-af-proto-down-imd-exist-reg-error")

    isis_intf_af_proto_down_imd_state_reg_error = Enum.YLeaf(3, "isis-intf-af-proto-down-imd-state-reg-error")

    isis_intf_af_proto_down_af_not_up = Enum.YLeaf(4, "isis-intf-af-proto-down-af-not-up")

    isis_intf_af_proto_down_internal_error = Enum.YLeaf(5, "isis-intf-af-proto-down-internal-error")


class IsisIfClnsMtuInvalidReason(Enum):
    """
    IsisIfClnsMtuInvalidReason (Enum Class)

    Isis if clns mtu invalid reason

    .. data:: isis_intf_clns_mtu_invalid_too_small = 0

    	isis intf clns mtu invalid too small

    .. data:: isis_intf_clns_mtu_invalid_internal_error = 1

    	isis intf clns mtu invalid internal error

    """

    isis_intf_clns_mtu_invalid_too_small = Enum.YLeaf(0, "isis-intf-clns-mtu-invalid-too-small")

    isis_intf_clns_mtu_invalid_internal_error = Enum.YLeaf(1, "isis-intf-clns-mtu-invalid-internal-error")


class IsisIfClnsProtoDownReason(Enum):
    """
    IsisIfClnsProtoDownReason (Enum Class)

    Isis if clns proto down reason

    .. data:: isis_intf_clns_proto_down_add_to_intf_stack_fail = 0

    	isis intf clns proto down add to intf stack

    	fail

    .. data:: isis_intf_clns_proto_down_no_imd_conn = 1

    	isis intf clns proto down no imd conn

    .. data:: isis_intf_clns_proto_down_imd_node_doesnt_exist = 2

    	isis intf clns proto down imd node doesnt exist

    .. data:: isis_intf_clns_proto_down_imd_exist_reg_error = 3

    	isis intf clns proto down imd exist reg error

    .. data:: isis_intf_clns_proto_down_imd_state_reg_error = 4

    	isis intf clns proto down imd state reg error

    .. data:: isis_intf_clns_proto_down_clns_not_up = 5

    	isis intf clns proto down clns not up

    """

    isis_intf_clns_proto_down_add_to_intf_stack_fail = Enum.YLeaf(0, "isis-intf-clns-proto-down-add-to-intf-stack-fail")

    isis_intf_clns_proto_down_no_imd_conn = Enum.YLeaf(1, "isis-intf-clns-proto-down-no-imd-conn")

    isis_intf_clns_proto_down_imd_node_doesnt_exist = Enum.YLeaf(2, "isis-intf-clns-proto-down-imd-node-doesnt-exist")

    isis_intf_clns_proto_down_imd_exist_reg_error = Enum.YLeaf(3, "isis-intf-clns-proto-down-imd-exist-reg-error")

    isis_intf_clns_proto_down_imd_state_reg_error = Enum.YLeaf(4, "isis-intf-clns-proto-down-imd-state-reg-error")

    isis_intf_clns_proto_down_clns_not_up = Enum.YLeaf(5, "isis-intf-clns-proto-down-clns-not-up")


class IsisIfClnsSnpaUnknownReason(Enum):
    """
    IsisIfClnsSnpaUnknownReason (Enum Class)

    Isis if clns snpa unknown reason

    .. data:: isis_intf_clns_snpa_unknown_access_error = 0

    	isis intf clns snpa unknown access error

    .. data:: isis_intf_clns_snpa_unknown_not_lan = 1

    	isis intf clns snpa unknown not lan

    .. data:: isis_intf_clns_snpa_unknown_internal_error = 2

    	isis intf clns snpa unknown internal error

    """

    isis_intf_clns_snpa_unknown_access_error = Enum.YLeaf(0, "isis-intf-clns-snpa-unknown-access-error")

    isis_intf_clns_snpa_unknown_not_lan = Enum.YLeaf(1, "isis-intf-clns-snpa-unknown-not-lan")

    isis_intf_clns_snpa_unknown_internal_error = Enum.YLeaf(2, "isis-intf-clns-snpa-unknown-internal-error")


class IsisIfDisabledReason(Enum):
    """
    IsisIfDisabledReason (Enum Class)

    Isis if disabled reason

    .. data:: isis_intf_disabled_no_net_cfg = 0

    	isis intf disabled no net cfg

    .. data:: isis_intf_disabled_area_missing = 1

    	isis intf disabled area missing

    .. data:: isis_intf_disabled_no_area_running = 2

    	isis intf disabled no area running

    .. data:: isis_intf_disabled_no_topos_cfg = 3

    	isis intf disabled no topos cfg

    .. data:: isis_intf_disabled_no_imd_conn = 4

    	isis intf disabled no imd conn

    .. data:: isis_intf_disabled_imd_reg_error = 5

    	isis intf disabled imd reg error

    .. data:: isis_intf_disabled_level_mismatch = 6

    	isis intf disabled level mismatch

    .. data:: isis_intf_disabled_base_caps_error = 7

    	isis intf disabled base caps error

    .. data:: isis_intf_disabled_intf_doesnt_exist = 8

    	isis intf disabled intf doesnt exist

    .. data:: isis_intf_disabled_intf_shutdown = 9

    	isis intf disabled intf shutdown

    .. data:: isis_intf_disabled_internal_error = 10

    	isis intf disabled internal error

    """

    isis_intf_disabled_no_net_cfg = Enum.YLeaf(0, "isis-intf-disabled-no-net-cfg")

    isis_intf_disabled_area_missing = Enum.YLeaf(1, "isis-intf-disabled-area-missing")

    isis_intf_disabled_no_area_running = Enum.YLeaf(2, "isis-intf-disabled-no-area-running")

    isis_intf_disabled_no_topos_cfg = Enum.YLeaf(3, "isis-intf-disabled-no-topos-cfg")

    isis_intf_disabled_no_imd_conn = Enum.YLeaf(4, "isis-intf-disabled-no-imd-conn")

    isis_intf_disabled_imd_reg_error = Enum.YLeaf(5, "isis-intf-disabled-imd-reg-error")

    isis_intf_disabled_level_mismatch = Enum.YLeaf(6, "isis-intf-disabled-level-mismatch")

    isis_intf_disabled_base_caps_error = Enum.YLeaf(7, "isis-intf-disabled-base-caps-error")

    isis_intf_disabled_intf_doesnt_exist = Enum.YLeaf(8, "isis-intf-disabled-intf-doesnt-exist")

    isis_intf_disabled_intf_shutdown = Enum.YLeaf(9, "isis-intf-disabled-intf-shutdown")

    isis_intf_disabled_internal_error = Enum.YLeaf(10, "isis-intf-disabled-internal-error")


class IsisIfMcastInvalidReason(Enum):
    """
    IsisIfMcastInvalidReason (Enum Class)

    Isis if mcast invalid reason

    .. data:: isis_intf_mcast_invalid_join_error = 0

    	Error when attempting to join this multicast

    	group

    .. data:: isis_intf_mcast_invalid_internal_error = 1

    	Internal error

    .. data:: isis_intf_mcast_invalid_not_yet_needed = 2

    	Multicast group membership not yet requested

    """

    isis_intf_mcast_invalid_join_error = Enum.YLeaf(0, "isis-intf-mcast-invalid-join-error")

    isis_intf_mcast_invalid_internal_error = Enum.YLeaf(1, "isis-intf-mcast-invalid-internal-error")

    isis_intf_mcast_invalid_not_yet_needed = Enum.YLeaf(2, "isis-intf-mcast-invalid-not-yet-needed")


class IsisIfTopoAdjFormDisabledReason(Enum):
    """
    IsisIfTopoAdjFormDisabledReason (Enum Class)

    Isis if topo adj form disabled reason

    .. data:: isis_intf_topo_adj_form_disabled_intf_passive = 0

    	isis intf topo adj form disabled intf passive

    .. data:: isis_intf_topo_adj_form_disabled_af_not_up = 1

    	isis intf topo adj form disabled af not up

    .. data:: isis_intf_topo_adj_form_disabled_af_fwd_addr_unknown = 2

    	isis intf topo adj form disabled af fwd addr

    	unknown

    .. data:: isis_intf_topo_adj_form_disabled_topo_not_cfg = 3

    	isis intf topo adj form disabled topo not cfg

    .. data:: isis_intf_topo_adj_form_disabled_topo_can_not_participate = 4

    	isis intf topo adj form disabled topo can not

    	participate

    .. data:: isis_intf_topo_adj_form_disabled_idle = 5

    	isis intf topo adj form disabled idle

    .. data:: isis_intf_topo_adj_form_disabled_internal_error = 6

    	isis intf topo adj form disabled internal error

    .. data:: isis_intf_topo_adj_form_disabled_mtu = 7

    	isis intf topo adj form disabled mtu

    .. data:: isis_intf_topo_adj_form_disabled_snpa = 8

    	isis intf topo adj form disabled snpa

    .. data:: isis_intf_topo_adj_form_disabled_mcast = 9

    	isis intf topo adj form disabled mcast

    """

    isis_intf_topo_adj_form_disabled_intf_passive = Enum.YLeaf(0, "isis-intf-topo-adj-form-disabled-intf-passive")

    isis_intf_topo_adj_form_disabled_af_not_up = Enum.YLeaf(1, "isis-intf-topo-adj-form-disabled-af-not-up")

    isis_intf_topo_adj_form_disabled_af_fwd_addr_unknown = Enum.YLeaf(2, "isis-intf-topo-adj-form-disabled-af-fwd-addr-unknown")

    isis_intf_topo_adj_form_disabled_topo_not_cfg = Enum.YLeaf(3, "isis-intf-topo-adj-form-disabled-topo-not-cfg")

    isis_intf_topo_adj_form_disabled_topo_can_not_participate = Enum.YLeaf(4, "isis-intf-topo-adj-form-disabled-topo-can-not-participate")

    isis_intf_topo_adj_form_disabled_idle = Enum.YLeaf(5, "isis-intf-topo-adj-form-disabled-idle")

    isis_intf_topo_adj_form_disabled_internal_error = Enum.YLeaf(6, "isis-intf-topo-adj-form-disabled-internal-error")

    isis_intf_topo_adj_form_disabled_mtu = Enum.YLeaf(7, "isis-intf-topo-adj-form-disabled-mtu")

    isis_intf_topo_adj_form_disabled_snpa = Enum.YLeaf(8, "isis-intf-topo-adj-form-disabled-snpa")

    isis_intf_topo_adj_form_disabled_mcast = Enum.YLeaf(9, "isis-intf-topo-adj-form-disabled-mcast")


class IsisIfTopoAdvPrefixDisabledReason(Enum):
    """
    IsisIfTopoAdvPrefixDisabledReason (Enum Class)

    Isis if topo adv prefix disabled reason

    .. data:: isis_intf_topo_adv_prefix_disabled_intf_suppressed = 0

    	isis intf topo adv prefix disabled intf

    	suppressed

    .. data:: isis_intf_topo_adv_prefix_disabled_af_not_up = 1

    	isis intf topo adv prefix disabled af not up

    .. data:: isis_intf_topo_adv_prefix_disabled_af_prefixes_unknown = 2

    	isis intf topo adv prefix disabled af prefixes

    	unknown

    .. data:: isis_intf_topo_adv_prefix_disabled_internal_error = 3

    	isis intf topo adv prefix disabled internal

    	error

    """

    isis_intf_topo_adv_prefix_disabled_intf_suppressed = Enum.YLeaf(0, "isis-intf-topo-adv-prefix-disabled-intf-suppressed")

    isis_intf_topo_adv_prefix_disabled_af_not_up = Enum.YLeaf(1, "isis-intf-topo-adv-prefix-disabled-af-not-up")

    isis_intf_topo_adv_prefix_disabled_af_prefixes_unknown = Enum.YLeaf(2, "isis-intf-topo-adv-prefix-disabled-af-prefixes-unknown")

    isis_intf_topo_adv_prefix_disabled_internal_error = Enum.YLeaf(3, "isis-intf-topo-adv-prefix-disabled-internal-error")


class IsisIfTopoDisabledReason(Enum):
    """
    IsisIfTopoDisabledReason (Enum Class)

    Isis if topo disabled reason

    .. data:: isis_intf_topo_disabled_not_cfg = 0

    	isis intf topo disabled not cfg

    .. data:: isis_intf_topo_disabled_internal_error = 1

    	isis intf topo disabled internal error

    """

    isis_intf_topo_disabled_not_cfg = Enum.YLeaf(0, "isis-intf-topo-disabled-not-cfg")

    isis_intf_topo_disabled_internal_error = Enum.YLeaf(1, "isis-intf-topo-disabled-internal-error")


class IsisKnown(Enum):
    """
    IsisKnown (Enum Class)

    Isis known

    .. data:: isis_unknown = 0

    	Unknown

    .. data:: isis_known = 1

    	Known

    """

    isis_unknown = Enum.YLeaf(0, "isis-unknown")

    isis_known = Enum.YLeaf(1, "isis-known")


class IsisLevel(Enum):
    """
    IsisLevel (Enum Class)

    Isis level

    .. data:: isis_level0 = 0

    	isis level0

    .. data:: isis_level1 = 1

    	isis level1

    .. data:: isis_level2 = 2

    	isis level2

    """

    isis_level0 = Enum.YLeaf(0, "isis-level0")

    isis_level1 = Enum.YLeaf(1, "isis-level1")

    isis_level2 = Enum.YLeaf(2, "isis-level2")


class IsisLevels(Enum):
    """
    IsisLevels (Enum Class)

    Isis levels

    .. data:: isis_levels_none = 0

    	isis levels none

    .. data:: isis_levels_1 = 1

    	isis levels 1

    .. data:: isis_levels_2 = 2

    	isis levels 2

    .. data:: isis_levels_12 = 3

    	isis levels 12

    .. data:: isis_levels_total = 4

    	isis levels total

    """

    isis_levels_none = Enum.YLeaf(0, "isis-levels-none")

    isis_levels_1 = Enum.YLeaf(1, "isis-levels-1")

    isis_levels_2 = Enum.YLeaf(2, "isis-levels-2")

    isis_levels_12 = Enum.YLeaf(3, "isis-levels-12")

    isis_levels_total = Enum.YLeaf(4, "isis-levels-total")


class IsisLspDbOp(Enum):
    """
    IsisLspDbOp (Enum Class)

    Isis lsp db op

    .. data:: isis_lsp_db_clear = 0

    	Clear the LSP database

    .. data:: isis_lsp_db_insert_new_lsp = 1

    	Insertion of new LSP

    .. data:: isis_lsp_db_replace_lsp_with_lsp = 2

    	LSP replacing LSP

    .. data:: isis_lsp_db_purge_lsp = 3

    	LSP purged by the local system

    .. data:: isis_lsp_db_delete_lsp = 4

    	Removal of the LSP from the database

    """

    isis_lsp_db_clear = Enum.YLeaf(0, "isis-lsp-db-clear")

    isis_lsp_db_insert_new_lsp = Enum.YLeaf(1, "isis-lsp-db-insert-new-lsp")

    isis_lsp_db_replace_lsp_with_lsp = Enum.YLeaf(2, "isis-lsp-db-replace-lsp-with-lsp")

    isis_lsp_db_purge_lsp = Enum.YLeaf(3, "isis-lsp-db-purge-lsp")

    isis_lsp_db_delete_lsp = Enum.YLeaf(4, "isis-lsp-db-delete-lsp")


class IsisLspTrigger(Enum):
    """
    IsisLspTrigger (Enum Class)

    Isis lsp trigger

    .. data:: isis_lsp_trig_config = 0

    	Any configuration change

    .. data:: isis_lsp_trig_newadj = 1

    	New adjacency came up

    .. data:: isis_lsp_trig_deladj = 2

    	Adjacency went down

    .. data:: isis_lsp_trig_dr_change = 3

    	DIS changed, or pseudonode changed

    .. data:: isis_lsp_trig_area_set = 4

    	Active area set changed

    .. data:: isis_lsp_trig_attach = 5

    	Attached bit changed state

    .. data:: isis_lsp_trig_hippity = 6

    	LSPDB overload bit changed state

    .. data:: isis_lsp_trig_regen = 7

    	LSP regeneration

    .. data:: isis_lsp_trig_ip_if_up = 8

    	Directly connected IP prefix up

    .. data:: isis_lsp_trig_ip_if_down = 9

    	Directly connected IP prefix down

    .. data:: isis_lsp_trig_ip_inter_area = 10

    	Interarea IP route appeared or gone

    .. data:: isis_lsp_trig_ip_external = 11

    	Redistributed IP route appeared or gone

    .. data:: isis_lsp_trig_ip_external_full = 12

    	Full IP redistribution

    .. data:: isis_lsp_trig_ip_def_orig = 13

    	Default information originate changed

    .. data:: isis_lsp_trig_ip_addr_chg = 14

    	IP interface address changed

    .. data:: isis_lsp_trig_te_info = 15

    	TE bandwidth resource information

    .. data:: isis_lsp_trig_te_pce_info = 16

    	TE PCE information

    .. data:: isis_lsp_trig_te_fa_info = 17

    	TE forwarding adjacency information

    .. data:: isis_lsp_trig_nsr_fo = 18

    	NSR FO is done

    .. data:: isis_lsp_trig_pn_cancel = 19

    	Pseudo-node generation canceled

    .. data:: isis_lsp_trig_lkgp = 20

    	Link-group offset metric change

    .. data:: isis_lsp_trig_pp = 21

    	Proactive Protection metric change

    .. data:: isis_lsp_trig_config_force_send = 22

    	Any configuration change that requires all LSPs

    	to be updated

    .. data:: isis_lsp_trig_config_force_init = 23

    	Any configuration change that requires the LBD

    	database re-init.

    .. data:: isis_lsp_trig_adj_sid_add = 24

    	Adjacency SID added

    .. data:: isis_lsp_trig_adj_sid_delete = 25

    	Adjacency SID deleted

    .. data:: isis_lsp_trig_msd = 26

    	Maximum SID depth change

    .. data:: isis_lsp_trig_adj_sid_wait_timer = 27

    	Adjacency SID wait timer expired

    .. data:: isis_lsp_trig_direct_gen = 28

    	Direct LSP generation

    """

    isis_lsp_trig_config = Enum.YLeaf(0, "isis-lsp-trig-config")

    isis_lsp_trig_newadj = Enum.YLeaf(1, "isis-lsp-trig-newadj")

    isis_lsp_trig_deladj = Enum.YLeaf(2, "isis-lsp-trig-deladj")

    isis_lsp_trig_dr_change = Enum.YLeaf(3, "isis-lsp-trig-dr-change")

    isis_lsp_trig_area_set = Enum.YLeaf(4, "isis-lsp-trig-area-set")

    isis_lsp_trig_attach = Enum.YLeaf(5, "isis-lsp-trig-attach")

    isis_lsp_trig_hippity = Enum.YLeaf(6, "isis-lsp-trig-hippity")

    isis_lsp_trig_regen = Enum.YLeaf(7, "isis-lsp-trig-regen")

    isis_lsp_trig_ip_if_up = Enum.YLeaf(8, "isis-lsp-trig-ip-if-up")

    isis_lsp_trig_ip_if_down = Enum.YLeaf(9, "isis-lsp-trig-ip-if-down")

    isis_lsp_trig_ip_inter_area = Enum.YLeaf(10, "isis-lsp-trig-ip-inter-area")

    isis_lsp_trig_ip_external = Enum.YLeaf(11, "isis-lsp-trig-ip-external")

    isis_lsp_trig_ip_external_full = Enum.YLeaf(12, "isis-lsp-trig-ip-external-full")

    isis_lsp_trig_ip_def_orig = Enum.YLeaf(13, "isis-lsp-trig-ip-def-orig")

    isis_lsp_trig_ip_addr_chg = Enum.YLeaf(14, "isis-lsp-trig-ip-addr-chg")

    isis_lsp_trig_te_info = Enum.YLeaf(15, "isis-lsp-trig-te-info")

    isis_lsp_trig_te_pce_info = Enum.YLeaf(16, "isis-lsp-trig-te-pce-info")

    isis_lsp_trig_te_fa_info = Enum.YLeaf(17, "isis-lsp-trig-te-fa-info")

    isis_lsp_trig_nsr_fo = Enum.YLeaf(18, "isis-lsp-trig-nsr-fo")

    isis_lsp_trig_pn_cancel = Enum.YLeaf(19, "isis-lsp-trig-pn-cancel")

    isis_lsp_trig_lkgp = Enum.YLeaf(20, "isis-lsp-trig-lkgp")

    isis_lsp_trig_pp = Enum.YLeaf(21, "isis-lsp-trig-pp")

    isis_lsp_trig_config_force_send = Enum.YLeaf(22, "isis-lsp-trig-config-force-send")

    isis_lsp_trig_config_force_init = Enum.YLeaf(23, "isis-lsp-trig-config-force-init")

    isis_lsp_trig_adj_sid_add = Enum.YLeaf(24, "isis-lsp-trig-adj-sid-add")

    isis_lsp_trig_adj_sid_delete = Enum.YLeaf(25, "isis-lsp-trig-adj-sid-delete")

    isis_lsp_trig_msd = Enum.YLeaf(26, "isis-lsp-trig-msd")

    isis_lsp_trig_adj_sid_wait_timer = Enum.YLeaf(27, "isis-lsp-trig-adj-sid-wait-timer")

    isis_lsp_trig_direct_gen = Enum.YLeaf(28, "isis-lsp-trig-direct-gen")


class IsisMediaClass(Enum):
    """
    IsisMediaClass (Enum Class)

    Isis media class

    .. data:: isis_media_class_lan = 0

    	LAN

    .. data:: isis_media_class_p2p = 1

    	P2P

    .. data:: isis_media_class_loop_back = 2

    	Loopback

    """

    isis_media_class_lan = Enum.YLeaf(0, "isis-media-class-lan")

    isis_media_class_p2p = Enum.YLeaf(1, "isis-media-class-p2p")

    isis_media_class_loop_back = Enum.YLeaf(2, "isis-media-class-loop-back")


class IsisMetricMode(Enum):
    """
    IsisMetricMode (Enum Class)

    Isis metric mode

    .. data:: isis_metric_mode_fixed = 0

    	Fixed

    .. data:: isis_metric_mode_relative = 1

    	Relative

    .. data:: isis_metric_mode_absolute = 2

    	Absolute

    """

    isis_metric_mode_fixed = Enum.YLeaf(0, "isis-metric-mode-fixed")

    isis_metric_mode_relative = Enum.YLeaf(1, "isis-metric-mode-relative")

    isis_metric_mode_absolute = Enum.YLeaf(2, "isis-metric-mode-absolute")


class IsisMetricStyle(Enum):
    """
    IsisMetricStyle (Enum Class)

    Isis metric style

    .. data:: isis_metric_style_narrow = 0

    	old-style (ISO 10589) metrics

    .. data:: isis_metric_style_wide = 1

    	new-style 32-bit metrics

    .. data:: isis_metric_style_transition = 2

    	send/accept both forms of metric

    """

    isis_metric_style_narrow = Enum.YLeaf(0, "isis-metric-style-narrow")

    isis_metric_style_wide = Enum.YLeaf(1, "isis-metric-style-wide")

    isis_metric_style_transition = Enum.YLeaf(2, "isis-metric-style-transition")


class IsisNsfFlavor(Enum):
    """
    IsisNsfFlavor (Enum Class)

    Isis nsf flavor

    .. data:: isis_nsf_flav_or_none = 0

    	NSF not configured

    .. data:: isis_nsf_flav_or_cisco = 1

    	Cisco-proprietary NSF

    .. data:: isis_nsf_flav_or_ietf = 2

    	IETF-standard NSF

    .. data:: isis_nsf_flav_or_nsr = 3

    	Cisco-proprietary NSR

    """

    isis_nsf_flav_or_none = Enum.YLeaf(0, "isis-nsf-flav-or-none")

    isis_nsf_flav_or_cisco = Enum.YLeaf(1, "isis-nsf-flav-or-cisco")

    isis_nsf_flav_or_ietf = Enum.YLeaf(2, "isis-nsf-flav-or-ietf")

    isis_nsf_flav_or_nsr = Enum.YLeaf(3, "isis-nsf-flav-or-nsr")


class IsisPrefixOrigin(Enum):
    """
    IsisPrefixOrigin (Enum Class)

    Isis prefix origin

    .. data:: isis_prefix_origin_l1_summary_null = 0

    	Level 1 Summary Null Route

    .. data:: isis_prefix_origin_l1 = 1

    	Level 1 Route

    .. data:: isis_prefix_origin_l2_summary_null = 2

    	Level 2 Summary Null Route

    .. data:: isis_prefix_origin_l2 = 3

    	Level 2 Route

    .. data:: isis_prefix_origin_inter_area_summary_null = 4

    	Level 1 Interarea Summary Null Route

    .. data:: isis_prefix_origin_inter_area = 5

    	Level 1 Interarea Route

    .. data:: isis_prefix_origin_default_nearest_attached = 6

    	Nearest Attached Default Route

    """

    isis_prefix_origin_l1_summary_null = Enum.YLeaf(0, "isis-prefix-origin-l1-summary-null")

    isis_prefix_origin_l1 = Enum.YLeaf(1, "isis-prefix-origin-l1")

    isis_prefix_origin_l2_summary_null = Enum.YLeaf(2, "isis-prefix-origin-l2-summary-null")

    isis_prefix_origin_l2 = Enum.YLeaf(3, "isis-prefix-origin-l2")

    isis_prefix_origin_inter_area_summary_null = Enum.YLeaf(4, "isis-prefix-origin-inter-area-summary-null")

    isis_prefix_origin_inter_area = Enum.YLeaf(5, "isis-prefix-origin-inter-area")

    isis_prefix_origin_default_nearest_attached = Enum.YLeaf(6, "isis-prefix-origin-default-nearest-attached")


class IsisPrefixPriority(Enum):
    """
    IsisPrefixPriority (Enum Class)

    Isis prefix priority

    .. data:: isis_prefix_priority_critical = 0

    	Critical priority prefixes

    .. data:: isis_prefix_priority_high = 1

    	High priority prefixes

    .. data:: isis_prefix_priority_med = 2

    	Medium priority prefixes

    .. data:: isis_prefix_priority_low = 3

    	Low priority prefixes

    """

    isis_prefix_priority_critical = Enum.YLeaf(0, "isis-prefix-priority-critical")

    isis_prefix_priority_high = Enum.YLeaf(1, "isis-prefix-priority-high")

    isis_prefix_priority_med = Enum.YLeaf(2, "isis-prefix-priority-med")

    isis_prefix_priority_low = Enum.YLeaf(3, "isis-prefix-priority-low")


class IsisReachable(Enum):
    """
    IsisReachable (Enum Class)

    Isis reachable

    .. data:: isis_unreachable = 0

    	Unreachable

    .. data:: isis_reachable = 1

    	Reachable

    """

    isis_unreachable = Enum.YLeaf(0, "isis-unreachable")

    isis_reachable = Enum.YLeaf(1, "isis-reachable")


class IsisRedistProto(Enum):
    """
    IsisRedistProto (Enum Class)

    Isis redist proto

    .. data:: isis_redist_connected = 0

    	Redistributed protocol is Connected

    .. data:: isis_redist_static = 1

    	Redistributed protocol is Static

    .. data:: isis_redist_ospf = 2

    	Redistributed protocol is OSPF

    .. data:: isis_redist_bgp = 3

    	Redistributed protocol is BGP

    .. data:: isis_redist_isis = 4

    	Redistributed protocol is IS-IS

    .. data:: isis_redist_ospfv3 = 5

    	Redistributed protocol is OSPFv3

    .. data:: isis_redist_rip = 6

    	Redistributed protocol is RIP

    .. data:: isis_redist_eigrp = 7

    	Redistributed protocol is EIGRP

    .. data:: isis_redist_subscriber = 8

    	Redistributed protocol is Subscriber

    .. data:: isis_redist_application = 9

    	Redistributed protocol is Application

    .. data:: isis_redist_mobile = 10

    	Redistributed protocol is Mobile

    """

    isis_redist_connected = Enum.YLeaf(0, "isis-redist-connected")

    isis_redist_static = Enum.YLeaf(1, "isis-redist-static")

    isis_redist_ospf = Enum.YLeaf(2, "isis-redist-ospf")

    isis_redist_bgp = Enum.YLeaf(3, "isis-redist-bgp")

    isis_redist_isis = Enum.YLeaf(4, "isis-redist-isis")

    isis_redist_ospfv3 = Enum.YLeaf(5, "isis-redist-ospfv3")

    isis_redist_rip = Enum.YLeaf(6, "isis-redist-rip")

    isis_redist_eigrp = Enum.YLeaf(7, "isis-redist-eigrp")

    isis_redist_subscriber = Enum.YLeaf(8, "isis-redist-subscriber")

    isis_redist_application = Enum.YLeaf(9, "isis-redist-application")

    isis_redist_mobile = Enum.YLeaf(10, "isis-redist-mobile")


class IsisShRouteAdvOrigin(Enum):
    """
    IsisShRouteAdvOrigin (Enum Class)

    Origin of a prefix advertisement

    .. data:: isis_sh_route_adv_origin_interface = 0

    	IS-IS interface prefix

    .. data:: isis_sh_route_adv_origin_redistributed = 1

    	Redistributed prefix

    .. data:: isis_sh_route_adv_origin_native = 2

    	Native prefix

    .. data:: isis_sh_route_adv_origin_summary = 3

    	Summary prefix

    .. data:: isis_sh_route_adv_origin_default = 4

    	Explicit origination of default prefix

    """

    isis_sh_route_adv_origin_interface = Enum.YLeaf(0, "isis-sh-route-adv-origin-interface")

    isis_sh_route_adv_origin_redistributed = Enum.YLeaf(1, "isis-sh-route-adv-origin-redistributed")

    isis_sh_route_adv_origin_native = Enum.YLeaf(2, "isis-sh-route-adv-origin-native")

    isis_sh_route_adv_origin_summary = Enum.YLeaf(3, "isis-sh-route-adv-origin-summary")

    isis_sh_route_adv_origin_default = Enum.YLeaf(4, "isis-sh-route-adv-origin-default")


class IsisShTeLink(Enum):
    """
    IsisShTeLink (Enum Class)

    Isis sh te link

    .. data:: isis_sh_te_link_p2p = 0

    	Tunnel is absolute

    .. data:: isis_sh_te_link_broadcast = 1

    	Broadcast link

    """

    isis_sh_te_link_p2p = Enum.YLeaf(0, "isis-sh-te-link-p2p")

    isis_sh_te_link_broadcast = Enum.YLeaf(1, "isis-sh-te-link-broadcast")


class IsisShTePceFloodingScope(Enum):
    """
    IsisShTePceFloodingScope (Enum Class)

    Isis sh te pce flooding scope

    .. data:: none = 0

    	Flooding is disabled

    .. data:: area = 1

    	Area wide flooding

    .. data:: domain = 2

    	Domain wide flooding

    """

    none = Enum.YLeaf(0, "none")

    area = Enum.YLeaf(1, "area")

    domain = Enum.YLeaf(2, "domain")


class IsisSpfClass(Enum):
    """
    IsisSpfClass (Enum Class)

    Types of route calculation

    .. data:: isis_spf_frr_sr_u_loop = 0

    	Remote microloop avoidance SPF

    .. data:: isis_spf_frr_per_link = 1

    	FRR per-link SPF

    .. data:: isis_spf_partial = 2

    	PRC

    .. data:: isis_spf_frr_per_prefix = 3

    	FRR per-prefix SPF

    .. data:: isis_spf_ucmp_calc = 4

    	UCMP SPF

    .. data:: isis_spf_next_hop = 5

    	Next Hop

    .. data:: isis_spf_incremental = 6

    	Incremental SPF

    .. data:: isis_spf_full = 7

    	Full SPF

    """

    isis_spf_frr_sr_u_loop = Enum.YLeaf(0, "isis-spf-frr-sr-u-loop")

    isis_spf_frr_per_link = Enum.YLeaf(1, "isis-spf-frr-per-link")

    isis_spf_partial = Enum.YLeaf(2, "isis-spf-partial")

    isis_spf_frr_per_prefix = Enum.YLeaf(3, "isis-spf-frr-per-prefix")

    isis_spf_ucmp_calc = Enum.YLeaf(4, "isis-spf-ucmp-calc")

    isis_spf_next_hop = Enum.YLeaf(5, "isis-spf-next-hop")

    isis_spf_incremental = Enum.YLeaf(6, "isis-spf-incremental")

    isis_spf_full = Enum.YLeaf(7, "isis-spf-full")


class IsisSpfTrigger(Enum):
    """
    IsisSpfTrigger (Enum Class)

    Isis spf trigger

    .. data:: isis_spf_trig_config = 0

    	Configuration change

    .. data:: isis_spf_trig_nsr_fo = 1

    	NSR FO is done

    .. data:: isis_spf_trig_periodic = 2

    	Periodic SPF

    .. data:: isis_spf_trig_clear = 3

    	Cleared route table

    .. data:: isis_spf_trig_newadj = 4

    	New adjacency

    .. data:: isis_spf_trig_deladj = 5

    	Deleted adjacency

    .. data:: isis_spf_trig_next_hop = 6

    	IP nexthop address change

    .. data:: isis_spf_trig_metric = 7

    	Changed interface metric

    .. data:: isis_spf_trig_dis = 8

    	Change to elected DIS

    .. data:: isis_spf_trig_frr_per_link = 9

    	Change to per-link FRR config

    .. data:: isis_spf_trig_frr_per_prefix = 10

    	Change to per-prefix FRR config

    .. data:: isis_spf_trig_ucmp = 11

    	Change to UCMP config/calculation

    .. data:: isis_spf_trig_new_tunnel = 12

    	New TE Autoroute Tunnel

    .. data:: isis_spf_trig_del_tunnel = 13

    	Deleted TE Autoroute Tunnel

    .. data:: isis_spf_trig_chg_tunnel = 14

    	Changed TE Autoroute Tunnel

    .. data:: isis_spf_trig_new_node = 15

    	New LSP zero which participates in topology

    .. data:: isis_spf_trig_del_node = 16

    	New LSP zero which no longer participates in

    	topology

    .. data:: isis_spf_trig_newlsp = 17

    	Previously unseen LSP fragment

    .. data:: isis_spf_trig_lsp_expiry = 18

    	LSP expired

    .. data:: isis_spf_trig_attach_set = 19

    	Attached bit set

    .. data:: isis_spf_trig_attach_clr = 20

    	Attached bit cleared

    .. data:: isis_spf_trig_overload_set = 21

    	Overload bit set

    .. data:: isis_spf_trig_overload_clr = 22

    	Overload bit cleared

    .. data:: isis_spf_trig_link_good = 23

    	Good news link TLV content change

    .. data:: isis_spf_trig_link_bad = 24

    	Bad news link TLV content change

    .. data:: isis_spf_trig_prefix_good = 25

    	Good news prefix TLV content change

    .. data:: isis_spf_trig_prefix_bad = 26

    	Bad news prefix TLV content change

    .. data:: isis_spf_trig_prefix = 27

    	Neutral (neither good nor bad news) prefix TLV

    	content change

    .. data:: isis_spf_trig_area_addr = 28

    	Area address TLV content change

    .. data:: isis_spf_trig_ip_addr = 29

    	IP address TLV content change

    .. data:: isis_spf_trig_rtrid = 30

    	Router id TLV content change

    .. data:: isis_spf_trig_prefix_policy = 31

    	Prefix policy change

    """

    isis_spf_trig_config = Enum.YLeaf(0, "isis-spf-trig-config")

    isis_spf_trig_nsr_fo = Enum.YLeaf(1, "isis-spf-trig-nsr-fo")

    isis_spf_trig_periodic = Enum.YLeaf(2, "isis-spf-trig-periodic")

    isis_spf_trig_clear = Enum.YLeaf(3, "isis-spf-trig-clear")

    isis_spf_trig_newadj = Enum.YLeaf(4, "isis-spf-trig-newadj")

    isis_spf_trig_deladj = Enum.YLeaf(5, "isis-spf-trig-deladj")

    isis_spf_trig_next_hop = Enum.YLeaf(6, "isis-spf-trig-next-hop")

    isis_spf_trig_metric = Enum.YLeaf(7, "isis-spf-trig-metric")

    isis_spf_trig_dis = Enum.YLeaf(8, "isis-spf-trig-dis")

    isis_spf_trig_frr_per_link = Enum.YLeaf(9, "isis-spf-trig-frr-per-link")

    isis_spf_trig_frr_per_prefix = Enum.YLeaf(10, "isis-spf-trig-frr-per-prefix")

    isis_spf_trig_ucmp = Enum.YLeaf(11, "isis-spf-trig-ucmp")

    isis_spf_trig_new_tunnel = Enum.YLeaf(12, "isis-spf-trig-new-tunnel")

    isis_spf_trig_del_tunnel = Enum.YLeaf(13, "isis-spf-trig-del-tunnel")

    isis_spf_trig_chg_tunnel = Enum.YLeaf(14, "isis-spf-trig-chg-tunnel")

    isis_spf_trig_new_node = Enum.YLeaf(15, "isis-spf-trig-new-node")

    isis_spf_trig_del_node = Enum.YLeaf(16, "isis-spf-trig-del-node")

    isis_spf_trig_newlsp = Enum.YLeaf(17, "isis-spf-trig-newlsp")

    isis_spf_trig_lsp_expiry = Enum.YLeaf(18, "isis-spf-trig-lsp-expiry")

    isis_spf_trig_attach_set = Enum.YLeaf(19, "isis-spf-trig-attach-set")

    isis_spf_trig_attach_clr = Enum.YLeaf(20, "isis-spf-trig-attach-clr")

    isis_spf_trig_overload_set = Enum.YLeaf(21, "isis-spf-trig-overload-set")

    isis_spf_trig_overload_clr = Enum.YLeaf(22, "isis-spf-trig-overload-clr")

    isis_spf_trig_link_good = Enum.YLeaf(23, "isis-spf-trig-link-good")

    isis_spf_trig_link_bad = Enum.YLeaf(24, "isis-spf-trig-link-bad")

    isis_spf_trig_prefix_good = Enum.YLeaf(25, "isis-spf-trig-prefix-good")

    isis_spf_trig_prefix_bad = Enum.YLeaf(26, "isis-spf-trig-prefix-bad")

    isis_spf_trig_prefix = Enum.YLeaf(27, "isis-spf-trig-prefix")

    isis_spf_trig_area_addr = Enum.YLeaf(28, "isis-spf-trig-area-addr")

    isis_spf_trig_ip_addr = Enum.YLeaf(29, "isis-spf-trig-ip-addr")

    isis_spf_trig_rtrid = Enum.YLeaf(30, "isis-spf-trig-rtrid")

    isis_spf_trig_prefix_policy = Enum.YLeaf(31, "isis-spf-trig-prefix-policy")


class IsisStartupStatus(Enum):
    """
    IsisStartupStatus (Enum Class)

    Isis startup status

    .. data:: isis_startup_ssm_active = 0

    	Startup-state-machine controlled restart in

    	progress

    .. data:: isis_startup_ssm_complete = 1

    	Startup-state-machine controlled restart

    	complete

    .. data:: isis_startup_ssm_aborted = 2

    	Startup-state-machine controlled restart

    	aborted

    .. data:: isis_startup_ssm_not_run = 3

    	Startup-state-machine controlled not attempted

    """

    isis_startup_ssm_active = Enum.YLeaf(0, "isis-startup-ssm-active")

    isis_startup_ssm_complete = Enum.YLeaf(1, "isis-startup-ssm-complete")

    isis_startup_ssm_aborted = Enum.YLeaf(2, "isis-startup-ssm-aborted")

    isis_startup_ssm_not_run = Enum.YLeaf(3, "isis-startup-ssm-not-run")


class IsisSubAfId(Enum):
    """
    IsisSubAfId (Enum Class)

    Isis sub af id

    .. data:: unicast = 0

    	Unicast

    .. data:: multicast = 1

    	Multicast

    """

    unicast = Enum.YLeaf(0, "unicast")

    multicast = Enum.YLeaf(1, "multicast")


class IsisTilfaComputation(Enum):
    """
    IsisTilfaComputation (Enum Class)

    Isis tilfa computation

    .. data:: isis_tilfa_comp_none = 0

    	isis tilfa comp none

    .. data:: isis_tilfa_comp_link = 1

    	isis tilfa comp link

    .. data:: isis_tilfa_comp_node = 2

    	isis tilfa comp node

    .. data:: isis_tilfa_comp_srlg = 3

    	isis tilfa comp srlg

    .. data:: isis_tilfa_comp_node_srlg = 4

    	isis tilfa comp node srlg

    """

    isis_tilfa_comp_none = Enum.YLeaf(0, "isis-tilfa-comp-none")

    isis_tilfa_comp_link = Enum.YLeaf(1, "isis-tilfa-comp-link")

    isis_tilfa_comp_node = Enum.YLeaf(2, "isis-tilfa-comp-node")

    isis_tilfa_comp_srlg = Enum.YLeaf(3, "isis-tilfa-comp-srlg")

    isis_tilfa_comp_node_srlg = Enum.YLeaf(4, "isis-tilfa-comp-node-srlg")


class IsisUloopAvoidance(Enum):
    """
    IsisUloopAvoidance (Enum Class)

    Isis uloop avoidance

    .. data:: isis_u_loop_avoidance_type_none = 0

    	No MicroLoop avoidance

    .. data:: isis_u_loop_avoidance_type_all = 1

    	Apply MicroLoop avoidance for all prefixes

    .. data:: isis_u_loop_avoidance_type_protected = 2

    	Apply MicroLoop avoidance only for protected

    	prefixes

    .. data:: isis_u_loop_avoidance_type_sr = 3

    	Segment Routing MicroLoop avoidance for All

    	single-link changes

    """

    isis_u_loop_avoidance_type_none = Enum.YLeaf(0, "isis-u-loop-avoidance-type-none")

    isis_u_loop_avoidance_type_all = Enum.YLeaf(1, "isis-u-loop-avoidance-type-all")

    isis_u_loop_avoidance_type_protected = Enum.YLeaf(2, "isis-u-loop-avoidance-type-protected")

    isis_u_loop_avoidance_type_sr = Enum.YLeaf(3, "isis-u-loop-avoidance-type-sr")


class IsisUloopEvent(Enum):
    """
    IsisUloopEvent (Enum Class)

    Isis uloop event

    .. data:: isis_u_loop_event_none = 0

    	isis u loop event none

    .. data:: isis_u_loop_event_link_down = 1

    	isis u loop event link down

    .. data:: isis_u_loop_event_link_up = 2

    	isis u loop event link up

    .. data:: isis_u_loop_event_ol_bit_set = 3

    	isis u loop event ol bit set

    .. data:: isis_u_loop_event_ol_bit_unset = 4

    	isis u loop event ol bit unset

    """

    isis_u_loop_event_none = Enum.YLeaf(0, "isis-u-loop-event-none")

    isis_u_loop_event_link_down = Enum.YLeaf(1, "isis-u-loop-event-link-down")

    isis_u_loop_event_link_up = Enum.YLeaf(2, "isis-u-loop-event-link-up")

    isis_u_loop_event_ol_bit_set = Enum.YLeaf(3, "isis-u-loop-event-ol-bit-set")

    isis_u_loop_event_ol_bit_unset = Enum.YLeaf(4, "isis-u-loop-event-ol-bit-unset")


class IsisUp(Enum):
    """
    IsisUp (Enum Class)

    Isis up

    .. data:: isis_down = 0

    	Down

    .. data:: isis_up = 1

    	Up

    """

    isis_down = Enum.YLeaf(0, "isis-down")

    isis_up = Enum.YLeaf(1, "isis-up")


class IsisValid(Enum):
    """
    IsisValid (Enum Class)

    Isis valid

    .. data:: isis_invalid = 0

    	Invalid

    .. data:: isis_valid = 1

    	Valid

    """

    isis_invalid = Enum.YLeaf(0, "isis-invalid")

    isis_valid = Enum.YLeaf(1, "isis-valid")


class SrmsMiAfEB(Enum):
    """
    SrmsMiAfEB (Enum Class)

    Srms mi af e b

    .. data:: none = 0

    	None

    .. data:: ipv4 = 1

    	IPv4

    .. data:: ipv6 = 2

    	IPv6

    """

    none = Enum.YLeaf(0, "none")

    ipv4 = Enum.YLeaf(1, "ipv4")

    ipv6 = Enum.YLeaf(2, "ipv6")


class SrmsMiFlagEB(Enum):
    """
    SrmsMiFlagEB (Enum Class)

    Srms mi flag e b

    .. data:: false = 0

    	False

    .. data:: true = 1

    	True

    """

    false = Enum.YLeaf(0, "false")

    true = Enum.YLeaf(1, "true")


class SrmsMiSrcEB(Enum):
    """
    SrmsMiSrcEB (Enum Class)

    Srms mi src e b

    .. data:: none = 0

    	None

    .. data:: local = 1

    	Local

    .. data:: remote = 2

    	Remote

    """

    none = Enum.YLeaf(0, "none")

    local = Enum.YLeaf(1, "local")

    remote = Enum.YLeaf(2, "remote")



class Isis(Entity):
    """
    IS\-IS operational data
    
    .. attribute:: instances
    
    	Per\-instance operational data
    	**type**\:  :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances>`
    
    

    """

    _prefix = 'clns-isis-oper'
    _revision = '2017-06-26'

    def __init__(self):
        super(Isis, self).__init__()
        self._top_entity = None

        self.yang_name = "isis"
        self.yang_parent_name = "Cisco-IOS-XR-clns-isis-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("instances", ("instances", Isis.Instances))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.instances = Isis.Instances()
        self.instances.parent = self
        self._children_name_map["instances"] = "instances"
        self._children_yang_names.add("instances")
        self._segment_path = lambda: "Cisco-IOS-XR-clns-isis-oper:isis"


    class Instances(Entity):
        """
        Per\-instance operational data
        
        .. attribute:: instance
        
        	IS\-IS instance
        	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance>`
        
        

        """

        _prefix = 'clns-isis-oper'
        _revision = '2017-06-26'

        def __init__(self):
            super(Isis.Instances, self).__init__()

            self.yang_name = "instances"
            self.yang_parent_name = "isis"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("instance", ("instance", Isis.Instances.Instance))])
            self._leafs = OrderedDict()

            self.instance = YList(self)
            self._segment_path = lambda: "instances"
            self._absolute_path = lambda: "Cisco-IOS-XR-clns-isis-oper:isis/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Isis.Instances, [], name, value)


        class Instance(Entity):
            """
            IS\-IS instance
            
            .. attribute:: instance_name  (key)
            
            	Instance identifier
            	**type**\: str
            
            	**length:** 1..40
            
            .. attribute:: neighbors
            
            	Neighbor table
            	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors>`
            
            .. attribute:: host_names
            
            	Hostname table
            	**type**\:  :py:class:`HostNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.HostNames>`
            
            .. attribute:: statistics_global
            
            	Per\-instance statistics
            	**type**\:  :py:class:`StatisticsGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal>`
            
            .. attribute:: levels
            
            	Level table
            	**type**\:  :py:class:`Levels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels>`
            
            .. attribute:: topologies
            
            	Topology table
            	**type**\:  :py:class:`Topologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies>`
            
            .. attribute:: nsr_status
            
            	NSR Status information
            	**type**\:  :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus>`
            
            .. attribute:: interfaces
            
            	Interface table
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces>`
            
            .. attribute:: checkpoint_adjacencies
            
            	Checkpointed adjacency table
            	**type**\:  :py:class:`CheckpointAdjacencies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies>`
            
            .. attribute:: srms
            
            	Segment Routing Mapping Server operational data
            	**type**\:  :py:class:`Srms <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms>`
            
            .. attribute:: error_log
            
            	Log of errors and warnings
            	**type**\:  :py:class:`ErrorLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog>`
            
            .. attribute:: checkpoint_interfaces
            
            	Checkpointed interface table
            	**type**\:  :py:class:`CheckpointInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointInterfaces>`
            
            .. attribute:: interface_statistics
            
            	Interface statistics table
            	**type**\:  :py:class:`InterfaceStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics>`
            
            .. attribute:: protocol
            
            	Basic protocol information about an IS\-IS instance
            	**type**\:  :py:class:`Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol>`
            
            .. attribute:: neighbor_summaries
            
            	Neighbor\-summary table
            	**type**\:  :py:class:`NeighborSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries>`
            
            .. attribute:: checkpoint_lsps
            
            	Checkpointed LSP table
            	**type**\:  :py:class:`CheckpointLsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointLsps>`
            
            .. attribute:: mesh_groups
            
            	Mesh\-group information
            	**type**\:  :py:class:`MeshGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups>`
            
            .. attribute:: nsr_statistics
            
            	NSR Statistics information
            	**type**\:  :py:class:`NsrStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics>`
            
            .. attribute:: checkpoint_te_tunnels
            
            	Checkpointed TE tunnel table
            	**type**\:  :py:class:`CheckpointTeTunnels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointTeTunnels>`
            
            

            """

            _prefix = 'clns-isis-oper'
            _revision = '2017-06-26'

            def __init__(self):
                super(Isis.Instances.Instance, self).__init__()

                self.yang_name = "instance"
                self.yang_parent_name = "instances"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['instance_name']
                self._child_container_classes = OrderedDict([("neighbors", ("neighbors", Isis.Instances.Instance.Neighbors)), ("host-names", ("host_names", Isis.Instances.Instance.HostNames)), ("statistics-global", ("statistics_global", Isis.Instances.Instance.StatisticsGlobal)), ("levels", ("levels", Isis.Instances.Instance.Levels)), ("topologies", ("topologies", Isis.Instances.Instance.Topologies)), ("nsr-status", ("nsr_status", Isis.Instances.Instance.NsrStatus)), ("interfaces", ("interfaces", Isis.Instances.Instance.Interfaces)), ("checkpoint-adjacencies", ("checkpoint_adjacencies", Isis.Instances.Instance.CheckpointAdjacencies)), ("srms", ("srms", Isis.Instances.Instance.Srms)), ("error-log", ("error_log", Isis.Instances.Instance.ErrorLog)), ("checkpoint-interfaces", ("checkpoint_interfaces", Isis.Instances.Instance.CheckpointInterfaces)), ("interface-statistics", ("interface_statistics", Isis.Instances.Instance.InterfaceStatistics)), ("protocol", ("protocol", Isis.Instances.Instance.Protocol)), ("neighbor-summaries", ("neighbor_summaries", Isis.Instances.Instance.NeighborSummaries)), ("checkpoint-lsps", ("checkpoint_lsps", Isis.Instances.Instance.CheckpointLsps)), ("mesh-groups", ("mesh_groups", Isis.Instances.Instance.MeshGroups)), ("nsr-statistics", ("nsr_statistics", Isis.Instances.Instance.NsrStatistics)), ("checkpoint-te-tunnels", ("checkpoint_te_tunnels", Isis.Instances.Instance.CheckpointTeTunnels))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('instance_name', YLeaf(YType.str, 'instance-name')),
                ])
                self.instance_name = None

                self.neighbors = Isis.Instances.Instance.Neighbors()
                self.neighbors.parent = self
                self._children_name_map["neighbors"] = "neighbors"
                self._children_yang_names.add("neighbors")

                self.host_names = Isis.Instances.Instance.HostNames()
                self.host_names.parent = self
                self._children_name_map["host_names"] = "host-names"
                self._children_yang_names.add("host-names")

                self.statistics_global = Isis.Instances.Instance.StatisticsGlobal()
                self.statistics_global.parent = self
                self._children_name_map["statistics_global"] = "statistics-global"
                self._children_yang_names.add("statistics-global")

                self.levels = Isis.Instances.Instance.Levels()
                self.levels.parent = self
                self._children_name_map["levels"] = "levels"
                self._children_yang_names.add("levels")

                self.topologies = Isis.Instances.Instance.Topologies()
                self.topologies.parent = self
                self._children_name_map["topologies"] = "topologies"
                self._children_yang_names.add("topologies")

                self.nsr_status = Isis.Instances.Instance.NsrStatus()
                self.nsr_status.parent = self
                self._children_name_map["nsr_status"] = "nsr-status"
                self._children_yang_names.add("nsr-status")

                self.interfaces = Isis.Instances.Instance.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")

                self.checkpoint_adjacencies = Isis.Instances.Instance.CheckpointAdjacencies()
                self.checkpoint_adjacencies.parent = self
                self._children_name_map["checkpoint_adjacencies"] = "checkpoint-adjacencies"
                self._children_yang_names.add("checkpoint-adjacencies")

                self.srms = Isis.Instances.Instance.Srms()
                self.srms.parent = self
                self._children_name_map["srms"] = "srms"
                self._children_yang_names.add("srms")

                self.error_log = Isis.Instances.Instance.ErrorLog()
                self.error_log.parent = self
                self._children_name_map["error_log"] = "error-log"
                self._children_yang_names.add("error-log")

                self.checkpoint_interfaces = Isis.Instances.Instance.CheckpointInterfaces()
                self.checkpoint_interfaces.parent = self
                self._children_name_map["checkpoint_interfaces"] = "checkpoint-interfaces"
                self._children_yang_names.add("checkpoint-interfaces")

                self.interface_statistics = Isis.Instances.Instance.InterfaceStatistics()
                self.interface_statistics.parent = self
                self._children_name_map["interface_statistics"] = "interface-statistics"
                self._children_yang_names.add("interface-statistics")

                self.protocol = Isis.Instances.Instance.Protocol()
                self.protocol.parent = self
                self._children_name_map["protocol"] = "protocol"
                self._children_yang_names.add("protocol")

                self.neighbor_summaries = Isis.Instances.Instance.NeighborSummaries()
                self.neighbor_summaries.parent = self
                self._children_name_map["neighbor_summaries"] = "neighbor-summaries"
                self._children_yang_names.add("neighbor-summaries")

                self.checkpoint_lsps = Isis.Instances.Instance.CheckpointLsps()
                self.checkpoint_lsps.parent = self
                self._children_name_map["checkpoint_lsps"] = "checkpoint-lsps"
                self._children_yang_names.add("checkpoint-lsps")

                self.mesh_groups = Isis.Instances.Instance.MeshGroups()
                self.mesh_groups.parent = self
                self._children_name_map["mesh_groups"] = "mesh-groups"
                self._children_yang_names.add("mesh-groups")

                self.nsr_statistics = Isis.Instances.Instance.NsrStatistics()
                self.nsr_statistics.parent = self
                self._children_name_map["nsr_statistics"] = "nsr-statistics"
                self._children_yang_names.add("nsr-statistics")

                self.checkpoint_te_tunnels = Isis.Instances.Instance.CheckpointTeTunnels()
                self.checkpoint_te_tunnels.parent = self
                self._children_name_map["checkpoint_te_tunnels"] = "checkpoint-te-tunnels"
                self._children_yang_names.add("checkpoint-te-tunnels")
                self._segment_path = lambda: "instance" + "[instance-name='" + str(self.instance_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-clns-isis-oper:isis/instances/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Isis.Instances.Instance, ['instance_name'], name, value)


            class Neighbors(Entity):
                """
                Neighbor table
                
                .. attribute:: neighbor
                
                	A single neighbor router
                	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Neighbors, self).__init__()

                    self.yang_name = "neighbors"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("neighbor", ("neighbor", Isis.Instances.Instance.Neighbors.Neighbor))])
                    self._leafs = OrderedDict()

                    self.neighbor = YList(self)
                    self._segment_path = lambda: "neighbors"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.Neighbors, [], name, value)


                class Neighbor(Entity):
                    """
                    A single neighbor router
                    
                    .. attribute:: system_id
                    
                    	System ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: neighbor_system_id
                    
                    	Neighbor system ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: neighbor_snpa
                    
                    	Neighbor SNPA
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: local_interface
                    
                    	Local interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: neighbor_state
                    
                    	Neighbor (adjacency) state
                    	**type**\:  :py:class:`IsisAdjState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjState>`
                    
                    .. attribute:: neighbor_circuit_type
                    
                    	Circuit type
                    	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                    
                    .. attribute:: neighbor_ietf_nsf_capable_flag
                    
                    	TRUE if neighbor is IETF\-NSF capable
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_media_type
                    
                    	Link media type
                    	**type**\:  :py:class:`IsisMediaClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClass>`
                    
                    .. attribute:: neighbor_holdtime
                    
                    	Time (s) until neighbor declared down if no IIH received
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_uptime_valid_flag
                    
                    	TRUE if NeighborUptime is set
                    	**type**\: bool
                    
                    .. attribute:: neighbor_uptime
                    
                    	How long the neighbor has been up (s)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nsr_standby
                    
                    	ISIS NSR STANDBY
                    	**type**\: bool
                    
                    .. attribute:: neighbor_active_area_address
                    
                    	Active area addresses
                    	**type**\: list of  		 :py:class:`NeighborActiveAreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborActiveAreaAddress>`
                    
                    .. attribute:: topologies_supported
                    
                    	Topologies supported by both neighbor and local system
                    	**type**\: list of  		 :py:class:`TopologiesSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported>`
                    
                    .. attribute:: neighbor_per_address_family_data
                    
                    	Per address\-family data
                    	**type**\: list of  		 :py:class:`NeighborPerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Neighbors.Neighbor, self).__init__()

                        self.yang_name = "neighbor"
                        self.yang_parent_name = "neighbors"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("neighbor-active-area-address", ("neighbor_active_area_address", Isis.Instances.Instance.Neighbors.Neighbor.NeighborActiveAreaAddress)), ("topologies-supported", ("topologies_supported", Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported)), ("neighbor-per-address-family-data", ("neighbor_per_address_family_data", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData))])
                        self._leafs = OrderedDict([
                            ('system_id', YLeaf(YType.str, 'system-id')),
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('neighbor_system_id', YLeaf(YType.str, 'neighbor-system-id')),
                            ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                            ('local_interface', YLeaf(YType.str, 'local-interface')),
                            ('neighbor_state', YLeaf(YType.enumeration, 'neighbor-state')),
                            ('neighbor_circuit_type', YLeaf(YType.enumeration, 'neighbor-circuit-type')),
                            ('neighbor_ietf_nsf_capable_flag', YLeaf(YType.uint32, 'neighbor-ietf-nsf-capable-flag')),
                            ('neighbor_media_type', YLeaf(YType.enumeration, 'neighbor-media-type')),
                            ('neighbor_holdtime', YLeaf(YType.uint32, 'neighbor-holdtime')),
                            ('neighbor_uptime_valid_flag', YLeaf(YType.boolean, 'neighbor-uptime-valid-flag')),
                            ('neighbor_uptime', YLeaf(YType.uint32, 'neighbor-uptime')),
                            ('nsr_standby', YLeaf(YType.boolean, 'nsr-standby')),
                        ])
                        self.system_id = None
                        self.interface_name = None
                        self.neighbor_system_id = None
                        self.neighbor_snpa = None
                        self.local_interface = None
                        self.neighbor_state = None
                        self.neighbor_circuit_type = None
                        self.neighbor_ietf_nsf_capable_flag = None
                        self.neighbor_media_type = None
                        self.neighbor_holdtime = None
                        self.neighbor_uptime_valid_flag = None
                        self.neighbor_uptime = None
                        self.nsr_standby = None

                        self.neighbor_active_area_address = YList(self)
                        self.topologies_supported = YList(self)
                        self.neighbor_per_address_family_data = YList(self)
                        self._segment_path = lambda: "neighbor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor, ['system_id', 'interface_name', 'neighbor_system_id', 'neighbor_snpa', 'local_interface', 'neighbor_state', 'neighbor_circuit_type', 'neighbor_ietf_nsf_capable_flag', 'neighbor_media_type', 'neighbor_holdtime', 'neighbor_uptime_valid_flag', 'neighbor_uptime', 'nsr_standby'], name, value)


                    class NeighborActiveAreaAddress(Entity):
                        """
                        Active area addresses
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: str
                        
                        	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborActiveAreaAddress, self).__init__()

                            self.yang_name = "neighbor-active-area-address"
                            self.yang_parent_name = "neighbor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.str, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "neighbor-active-area-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborActiveAreaAddress, ['entry'], name, value)


                    class TopologiesSupported(Entity):
                        """
                        Topologies supported by both neighbor and local
                        system
                        
                        .. attribute:: af_name
                        
                        	AF name
                        	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                        
                        .. attribute:: saf_name
                        
                        	Sub\-AF name
                        	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\: str
                        
                        .. attribute:: topology_name
                        
                        	Topology Name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported, self).__init__()

                            self.yang_name = "topologies-supported"
                            self.yang_parent_name = "neighbor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                ('topology_name', YLeaf(YType.str, 'topology-name')),
                            ])
                            self.af_name = None
                            self.saf_name = None
                            self.vrf_name = None
                            self.topology_name = None
                            self._segment_path = lambda: "topologies-supported"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.TopologiesSupported, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                    class NeighborPerAddressFamilyData(Entity):
                        """
                        Per address\-family data
                        
                        .. attribute:: ipv4
                        
                        	IPV4 neighbor info
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 neighbor info
                        	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6>`
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData, self).__init__()

                            self.yang_name = "neighbor-per-address-family-data"
                            self.yang_parent_name = "neighbor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4)), ("ipv6", ("ipv6", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', YLeaf(YType.enumeration, 'af-name')),
                            ])
                            self.af_name = None

                            self.ipv4 = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4()
                            self.ipv4.parent = self
                            self._children_name_map["ipv4"] = "ipv4"
                            self._children_yang_names.add("ipv4")

                            self.ipv6 = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6()
                            self.ipv6.parent = self
                            self._children_name_map["ipv6"] = "ipv6"
                            self._children_yang_names.add("ipv6")
                            self._segment_path = lambda: "neighbor-per-address-family-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData, ['af_name'], name, value)


                        class Ipv4(Entity):
                            """
                            IPV4 neighbor info
                            
                            .. attribute:: adjacency_sid
                            
                            	Adjacency SID
                            	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid>`
                            
                            .. attribute:: non_frr_adjacency_sid
                            
                            	Adjacency SID not eligible for FRR protection
                            	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid>`
                            
                            .. attribute:: next_hop
                            
                            	Adjacency next hop
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_address
                            
                            	Adjacency interface addresses
                            	**type**\: list of  		 :py:class:`InterfaceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.InterfaceAddress>`
                            
                            .. attribute:: underlying_adjacency_sid
                            
                            	Per bundle member Adjacency sid
                            	**type**\: list of  		 :py:class:`UnderlyingAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid>`
                            
                            .. attribute:: underlying_interface
                            
                            	Underlying interface list for bundle interfaces
                            	**type**\: list of  		 :py:class:`UnderlyingInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingInterface>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4, self).__init__()

                                self.yang_name = "ipv4"
                                self.yang_parent_name = "neighbor-per-address-family-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("adjacency-sid", ("adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid)), ("non-frr-adjacency-sid", ("non_frr_adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid))])
                                self._child_list_classes = OrderedDict([("interface-address", ("interface_address", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.InterfaceAddress)), ("underlying-adjacency-sid", ("underlying_adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid)), ("underlying-interface", ("underlying_interface", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingInterface))])
                                self._leafs = OrderedDict([
                                    ('next_hop', YLeaf(YType.str, 'next-hop')),
                                ])
                                self.next_hop = None

                                self.adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid()
                                self.adjacency_sid.parent = self
                                self._children_name_map["adjacency_sid"] = "adjacency-sid"
                                self._children_yang_names.add("adjacency-sid")

                                self.non_frr_adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid()
                                self.non_frr_adjacency_sid.parent = self
                                self._children_name_map["non_frr_adjacency_sid"] = "non-frr-adjacency-sid"
                                self._children_yang_names.add("non-frr-adjacency-sid")

                                self.interface_address = YList(self)
                                self.underlying_adjacency_sid = YList(self)
                                self.underlying_interface = YList(self)
                                self._segment_path = lambda: "ipv4"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4, ['next_hop'], name, value)


                            class AdjacencySid(Entity):
                                """
                                Adjacency SID
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_backup_te
                                
                                	Adjacency SID Backup Info TE
                                	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid, self).__init__()

                                    self.yang_name = "adjacency-sid"
                                    self.yang_parent_name = "ipv4"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                    ])
                                    self.adjacency_sid_value = None

                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                    self._children_yang_names.add("adjacency-sid-backup")

                                    self.adjacency_sid_backup_te = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe()
                                    self.adjacency_sid_backup_te.parent = self
                                    self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                    self._children_yang_names.add("adjacency-sid-backup-te")
                                    self._segment_path = lambda: "adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid, ['adjacency_sid_value'], name, value)


                                class AdjacencySidBackup(Entity):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup, self).__init__()

                                        self.yang_name = "adjacency-sid-backup"
                                        self.yang_parent_name = "adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                class AdjacencySidBackupTe(Entity):
                                    """
                                    Adjacency SID Backup Info TE
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe, self).__init__()

                                        self.yang_name = "adjacency-sid-backup-te"
                                        self.yang_parent_name = "adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup-te"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup-te"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                            class NonFrrAdjacencySid(Entity):
                                """
                                Adjacency SID not eligible for FRR protection
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_backup_te
                                
                                	Adjacency SID Backup Info TE
                                	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid, self).__init__()

                                    self.yang_name = "non-frr-adjacency-sid"
                                    self.yang_parent_name = "ipv4"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                    ])
                                    self.adjacency_sid_value = None

                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                    self._children_yang_names.add("adjacency-sid-backup")

                                    self.adjacency_sid_backup_te = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe()
                                    self.adjacency_sid_backup_te.parent = self
                                    self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                    self._children_yang_names.add("adjacency-sid-backup-te")
                                    self._segment_path = lambda: "non-frr-adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid, ['adjacency_sid_value'], name, value)


                                class AdjacencySidBackup(Entity):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup, self).__init__()

                                        self.yang_name = "adjacency-sid-backup"
                                        self.yang_parent_name = "non-frr-adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                class AdjacencySidBackupTe(Entity):
                                    """
                                    Adjacency SID Backup Info TE
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe, self).__init__()

                                        self.yang_name = "adjacency-sid-backup-te"
                                        self.yang_parent_name = "non-frr-adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup-te"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup-te"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                            class InterfaceAddress(Entity):
                                """
                                Adjacency interface addresses
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.InterfaceAddress, self).__init__()

                                    self.yang_name = "interface-address"
                                    self.yang_parent_name = "ipv4"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.str, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "interface-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.InterfaceAddress, ['entry'], name, value)


                            class UnderlyingAdjacencySid(Entity):
                                """
                                Per bundle member Adjacency sid
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid, self).__init__()

                                    self.yang_name = "underlying-adjacency-sid"
                                    self.yang_parent_name = "ipv4"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "underlying-adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid, ['entry'], name, value)


                            class UnderlyingInterface(Entity):
                                """
                                Underlying interface list for bundle interfaces
                                
                                .. attribute:: interface_handle
                                
                                	Local interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: interface_name
                                
                                	Interface name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingInterface, self).__init__()

                                    self.yang_name = "underlying-interface"
                                    self.yang_parent_name = "ipv4"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ])
                                    self.interface_handle = None
                                    self.interface_name = None
                                    self._segment_path = lambda: "underlying-interface"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv4.UnderlyingInterface, ['interface_handle', 'interface_name'], name, value)


                        class Ipv6(Entity):
                            """
                            IPV6 neighbor info
                            
                            .. attribute:: adjacency_sid
                            
                            	Adjacency SID
                            	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid>`
                            
                            .. attribute:: non_frr_adjacency_sid
                            
                            	Adjacency SID not eligible for FRR protection
                            	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid>`
                            
                            .. attribute:: next_hop
                            
                            	Adjacency next hop
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_address
                            
                            	Adjacency interface addresses
                            	**type**\: list of  		 :py:class:`InterfaceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.InterfaceAddress>`
                            
                            .. attribute:: underlying_adjacency_sid
                            
                            	Per bundle member Adjacency sid
                            	**type**\: list of  		 :py:class:`UnderlyingAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid>`
                            
                            .. attribute:: underlying_interface
                            
                            	Underlying interface list for bundle interfaces
                            	**type**\: list of  		 :py:class:`UnderlyingInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingInterface>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6, self).__init__()

                                self.yang_name = "ipv6"
                                self.yang_parent_name = "neighbor-per-address-family-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("adjacency-sid", ("adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid)), ("non-frr-adjacency-sid", ("non_frr_adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid))])
                                self._child_list_classes = OrderedDict([("interface-address", ("interface_address", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.InterfaceAddress)), ("underlying-adjacency-sid", ("underlying_adjacency_sid", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid)), ("underlying-interface", ("underlying_interface", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingInterface))])
                                self._leafs = OrderedDict([
                                    ('next_hop', YLeaf(YType.str, 'next-hop')),
                                ])
                                self.next_hop = None

                                self.adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid()
                                self.adjacency_sid.parent = self
                                self._children_name_map["adjacency_sid"] = "adjacency-sid"
                                self._children_yang_names.add("adjacency-sid")

                                self.non_frr_adjacency_sid = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid()
                                self.non_frr_adjacency_sid.parent = self
                                self._children_name_map["non_frr_adjacency_sid"] = "non-frr-adjacency-sid"
                                self._children_yang_names.add("non-frr-adjacency-sid")

                                self.interface_address = YList(self)
                                self.underlying_adjacency_sid = YList(self)
                                self.underlying_interface = YList(self)
                                self._segment_path = lambda: "ipv6"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6, ['next_hop'], name, value)


                            class AdjacencySid(Entity):
                                """
                                Adjacency SID
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_backup_te
                                
                                	Adjacency SID Backup Info TE
                                	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid, self).__init__()

                                    self.yang_name = "adjacency-sid"
                                    self.yang_parent_name = "ipv6"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                    ])
                                    self.adjacency_sid_value = None

                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                    self._children_yang_names.add("adjacency-sid-backup")

                                    self.adjacency_sid_backup_te = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe()
                                    self.adjacency_sid_backup_te.parent = self
                                    self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                    self._children_yang_names.add("adjacency-sid-backup-te")
                                    self._segment_path = lambda: "adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid, ['adjacency_sid_value'], name, value)


                                class AdjacencySidBackup(Entity):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup, self).__init__()

                                        self.yang_name = "adjacency-sid-backup"
                                        self.yang_parent_name = "adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                class AdjacencySidBackupTe(Entity):
                                    """
                                    Adjacency SID Backup Info TE
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe, self).__init__()

                                        self.yang_name = "adjacency-sid-backup-te"
                                        self.yang_parent_name = "adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup-te"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup-te"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                            class NonFrrAdjacencySid(Entity):
                                """
                                Adjacency SID not eligible for FRR protection
                                
                                .. attribute:: adjacency_sid_backup
                                
                                	Adjacency SID Backup Info
                                	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup>`
                                
                                .. attribute:: adjacency_sid_backup_te
                                
                                	Adjacency SID Backup Info TE
                                	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe>`
                                
                                .. attribute:: adjacency_sid_value
                                
                                	Adjacency SID value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid, self).__init__()

                                    self.yang_name = "non-frr-adjacency-sid"
                                    self.yang_parent_name = "ipv6"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                    ])
                                    self.adjacency_sid_value = None

                                    self.adjacency_sid_backup = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup()
                                    self.adjacency_sid_backup.parent = self
                                    self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                    self._children_yang_names.add("adjacency-sid-backup")

                                    self.adjacency_sid_backup_te = Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe()
                                    self.adjacency_sid_backup_te.parent = self
                                    self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                    self._children_yang_names.add("adjacency-sid-backup-te")
                                    self._segment_path = lambda: "non-frr-adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid, ['adjacency_sid_value'], name, value)


                                class AdjacencySidBackup(Entity):
                                    """
                                    Adjacency SID Backup Info
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup, self).__init__()

                                        self.yang_name = "adjacency-sid-backup"
                                        self.yang_parent_name = "non-frr-adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                class AdjacencySidBackupTe(Entity):
                                    """
                                    Adjacency SID Backup Info TE
                                    
                                    .. attribute:: backup_label_stack_size
                                    
                                    	Number of labels in the backup path label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_node_address
                                    
                                    	Neighbor address used as adjacency backup target
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_nexthop
                                    
                                    	Backup path nexthop address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup path interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_label_stack
                                    
                                    	Backup path label stack
                                    	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe, self).__init__()

                                        self.yang_name = "adjacency-sid-backup-te"
                                        self.yang_parent_name = "non-frr-adjacency-sid"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                        self._leafs = OrderedDict([
                                            ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                            ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                            ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ])
                                        self.backup_label_stack_size = None
                                        self.backup_node_address = None
                                        self.backup_nexthop = None
                                        self.backup_interface = None

                                        self.backup_label_stack = YList(self)
                                        self._segment_path = lambda: "adjacency-sid-backup-te"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                    class BackupLabelStack(Entity):
                                        """
                                        Backup path label stack
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                            self.yang_name = "backup-label-stack"
                                            self.yang_parent_name = "adjacency-sid-backup-te"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "backup-label-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                            class InterfaceAddress(Entity):
                                """
                                Adjacency interface addresses
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.InterfaceAddress, self).__init__()

                                    self.yang_name = "interface-address"
                                    self.yang_parent_name = "ipv6"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.str, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "interface-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.InterfaceAddress, ['entry'], name, value)


                            class UnderlyingAdjacencySid(Entity):
                                """
                                Per bundle member Adjacency sid
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid, self).__init__()

                                    self.yang_name = "underlying-adjacency-sid"
                                    self.yang_parent_name = "ipv6"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "underlying-adjacency-sid"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid, ['entry'], name, value)


                            class UnderlyingInterface(Entity):
                                """
                                Underlying interface list for bundle interfaces
                                
                                .. attribute:: interface_handle
                                
                                	Local interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: interface_name
                                
                                	Interface name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingInterface, self).__init__()

                                    self.yang_name = "underlying-interface"
                                    self.yang_parent_name = "ipv6"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ])
                                    self.interface_handle = None
                                    self.interface_name = None
                                    self._segment_path = lambda: "underlying-interface"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Neighbors.Neighbor.NeighborPerAddressFamilyData.Ipv6.UnderlyingInterface, ['interface_handle', 'interface_name'], name, value)


            class HostNames(Entity):
                """
                Hostname table
                
                .. attribute:: host_name
                
                	Hostname table entry
                	**type**\: list of  		 :py:class:`HostName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.HostNames.HostName>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.HostNames, self).__init__()

                    self.yang_name = "host-names"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("host-name", ("host_name", Isis.Instances.Instance.HostNames.HostName))])
                    self._leafs = OrderedDict()

                    self.host_name = YList(self)
                    self._segment_path = lambda: "host-names"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.HostNames, [], name, value)


                class HostName(Entity):
                    """
                    Hostname table entry
                    
                    .. attribute:: system_id  (key)
                    
                    	System ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: local_is_flag
                    
                    	TRUE if this is the local IS
                    	**type**\: bool
                    
                    .. attribute:: host_levels
                    
                    	Host levels
                    	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                    
                    .. attribute:: host_name
                    
                    	Host name
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.HostNames.HostName, self).__init__()

                        self.yang_name = "host-name"
                        self.yang_parent_name = "host-names"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['system_id']
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('system_id', YLeaf(YType.str, 'system-id')),
                            ('local_is_flag', YLeaf(YType.boolean, 'local-is-flag')),
                            ('host_levels', YLeaf(YType.enumeration, 'host-levels')),
                            ('host_name', YLeaf(YType.str, 'host-name')),
                        ])
                        self.system_id = None
                        self.local_is_flag = None
                        self.host_levels = None
                        self.host_name = None
                        self._segment_path = lambda: "host-name" + "[system-id='" + str(self.system_id) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.HostNames.HostName, ['system_id', 'local_is_flag', 'host_levels', 'host_name'], name, value)


            class StatisticsGlobal(Entity):
                """
                Per\-instance statistics
                
                .. attribute:: statistics
                
                	Statistics
                	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics>`
                
                .. attribute:: per_area_data
                
                	Per\-area data
                	**type**\: list of  		 :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.StatisticsGlobal, self).__init__()

                    self.yang_name = "statistics-global"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("statistics", ("statistics", Isis.Instances.Instance.StatisticsGlobal.Statistics))])
                    self._child_list_classes = OrderedDict([("per-area-data", ("per_area_data", Isis.Instances.Instance.StatisticsGlobal.PerAreaData))])
                    self._leafs = OrderedDict()

                    self.statistics = Isis.Instances.Instance.StatisticsGlobal.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.per_area_data = YList(self)
                    self._segment_path = lambda: "statistics-global"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal, [], name, value)


                class Statistics(Entity):
                    """
                    Statistics
                    
                    .. attribute:: avg_hello_process_time
                    
                    	Average hello process time
                    	**type**\:  :py:class:`AvgHelloProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime>`
                    
                    .. attribute:: avg_csnp_process_time
                    
                    	Average CSNP process time
                    	**type**\:  :py:class:`AvgCsnpProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime>`
                    
                    .. attribute:: avg_psnp_process_time
                    
                    	Average PSNP process time
                    	**type**\:  :py:class:`AvgPsnpProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime>`
                    
                    .. attribute:: avg_lsp_process_time
                    
                    	Average LSP process time
                    	**type**\:  :py:class:`AvgLspProcessTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime>`
                    
                    .. attribute:: avg_hello_transmit_time
                    
                    	Average hello transmit time
                    	**type**\:  :py:class:`AvgHelloTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime>`
                    
                    .. attribute:: avg_csnp_transmit_time
                    
                    	Average CSNP transmit time
                    	**type**\:  :py:class:`AvgCsnpTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime>`
                    
                    .. attribute:: avg_psnp_transmit_time
                    
                    	Average PSNP transmit time
                    	**type**\:  :py:class:`AvgPsnpTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime>`
                    
                    .. attribute:: avg_lsp_transmit_time
                    
                    	Average LSP transmit time
                    	**type**\:  :py:class:`AvgLspTransmitTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime>`
                    
                    .. attribute:: fast_psnp_lookup_count
                    
                    	Fast\-PSNP cache lookups
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_psnp_lookup_hit_count
                    
                    	Fast\-PSNP cache hits
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_csnp_lookup_count
                    
                    	Fast\-CSNP cache lookups
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_csnp_lookup_hit_count
                    
                    	Fast\-CSNP cache hits
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_csnp_cache_update_count
                    
                    	Fast\-CSNP cache updates
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: zero_holdtime_lsp_count
                    
                    	LSPs received with holdtime 0
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: invalid_checksum_lsp_count
                    
                    	LSPs received with invalid checksum
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: iih_dropped_count
                    
                    	IIHs dropped \- Not Used
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_dropped_count
                    
                    	LSPs dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: snp_dropped_count
                    
                    	SNPs dropped
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximum_iih_queue_length
                    
                    	Maximum IIH queue length \- Not Used
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximum_pdu_queue_length
                    
                    	Maximum update PDU queue length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: pdu_queue_length
                    
                    	Update PDU queue length
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: avg_hello_recv_rate
                    
                    	Average hello receive rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_csnp_recv_rate
                    
                    	Average csnp receive rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_psnp_recv_rate
                    
                    	Average psnp receive rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_lsp_recv_rate
                    
                    	Average LSP receive rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_hello_send_rate
                    
                    	Average hello send rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_csnp_send_rate
                    
                    	Average csnp send rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_psnp_send_rate
                    
                    	Average psnp send rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    .. attribute:: avg_lsp_send_rate
                    
                    	Average LSP send rate in packets per second
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: packet/s
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.StatisticsGlobal.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "statistics-global"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("avg-hello-process-time", ("avg_hello_process_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime)), ("avg-csnp-process-time", ("avg_csnp_process_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime)), ("avg-psnp-process-time", ("avg_psnp_process_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime)), ("avg-lsp-process-time", ("avg_lsp_process_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime)), ("avg-hello-transmit-time", ("avg_hello_transmit_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime)), ("avg-csnp-transmit-time", ("avg_csnp_transmit_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime)), ("avg-psnp-transmit-time", ("avg_psnp_transmit_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime)), ("avg-lsp-transmit-time", ("avg_lsp_transmit_time", Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('fast_psnp_lookup_count', YLeaf(YType.uint32, 'fast-psnp-lookup-count')),
                            ('fast_psnp_lookup_hit_count', YLeaf(YType.uint32, 'fast-psnp-lookup-hit-count')),
                            ('fast_csnp_lookup_count', YLeaf(YType.uint32, 'fast-csnp-lookup-count')),
                            ('fast_csnp_lookup_hit_count', YLeaf(YType.uint32, 'fast-csnp-lookup-hit-count')),
                            ('fast_csnp_cache_update_count', YLeaf(YType.uint32, 'fast-csnp-cache-update-count')),
                            ('zero_holdtime_lsp_count', YLeaf(YType.uint32, 'zero-holdtime-lsp-count')),
                            ('invalid_checksum_lsp_count', YLeaf(YType.uint32, 'invalid-checksum-lsp-count')),
                            ('iih_dropped_count', YLeaf(YType.uint32, 'iih-dropped-count')),
                            ('lsp_dropped_count', YLeaf(YType.uint32, 'lsp-dropped-count')),
                            ('snp_dropped_count', YLeaf(YType.uint32, 'snp-dropped-count')),
                            ('maximum_iih_queue_length', YLeaf(YType.uint32, 'maximum-iih-queue-length')),
                            ('maximum_pdu_queue_length', YLeaf(YType.uint32, 'maximum-pdu-queue-length')),
                            ('pdu_queue_length', YLeaf(YType.uint32, 'pdu-queue-length')),
                            ('avg_hello_recv_rate', YLeaf(YType.uint32, 'avg-hello-recv-rate')),
                            ('avg_csnp_recv_rate', YLeaf(YType.uint32, 'avg-csnp-recv-rate')),
                            ('avg_psnp_recv_rate', YLeaf(YType.uint32, 'avg-psnp-recv-rate')),
                            ('avg_lsp_recv_rate', YLeaf(YType.uint32, 'avg-lsp-recv-rate')),
                            ('avg_hello_send_rate', YLeaf(YType.uint32, 'avg-hello-send-rate')),
                            ('avg_csnp_send_rate', YLeaf(YType.uint32, 'avg-csnp-send-rate')),
                            ('avg_psnp_send_rate', YLeaf(YType.uint32, 'avg-psnp-send-rate')),
                            ('avg_lsp_send_rate', YLeaf(YType.uint32, 'avg-lsp-send-rate')),
                        ])
                        self.fast_psnp_lookup_count = None
                        self.fast_psnp_lookup_hit_count = None
                        self.fast_csnp_lookup_count = None
                        self.fast_csnp_lookup_hit_count = None
                        self.fast_csnp_cache_update_count = None
                        self.zero_holdtime_lsp_count = None
                        self.invalid_checksum_lsp_count = None
                        self.iih_dropped_count = None
                        self.lsp_dropped_count = None
                        self.snp_dropped_count = None
                        self.maximum_iih_queue_length = None
                        self.maximum_pdu_queue_length = None
                        self.pdu_queue_length = None
                        self.avg_hello_recv_rate = None
                        self.avg_csnp_recv_rate = None
                        self.avg_psnp_recv_rate = None
                        self.avg_lsp_recv_rate = None
                        self.avg_hello_send_rate = None
                        self.avg_csnp_send_rate = None
                        self.avg_psnp_send_rate = None
                        self.avg_lsp_send_rate = None

                        self.avg_hello_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime()
                        self.avg_hello_process_time.parent = self
                        self._children_name_map["avg_hello_process_time"] = "avg-hello-process-time"
                        self._children_yang_names.add("avg-hello-process-time")

                        self.avg_csnp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime()
                        self.avg_csnp_process_time.parent = self
                        self._children_name_map["avg_csnp_process_time"] = "avg-csnp-process-time"
                        self._children_yang_names.add("avg-csnp-process-time")

                        self.avg_psnp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime()
                        self.avg_psnp_process_time.parent = self
                        self._children_name_map["avg_psnp_process_time"] = "avg-psnp-process-time"
                        self._children_yang_names.add("avg-psnp-process-time")

                        self.avg_lsp_process_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime()
                        self.avg_lsp_process_time.parent = self
                        self._children_name_map["avg_lsp_process_time"] = "avg-lsp-process-time"
                        self._children_yang_names.add("avg-lsp-process-time")

                        self.avg_hello_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime()
                        self.avg_hello_transmit_time.parent = self
                        self._children_name_map["avg_hello_transmit_time"] = "avg-hello-transmit-time"
                        self._children_yang_names.add("avg-hello-transmit-time")

                        self.avg_csnp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime()
                        self.avg_csnp_transmit_time.parent = self
                        self._children_name_map["avg_csnp_transmit_time"] = "avg-csnp-transmit-time"
                        self._children_yang_names.add("avg-csnp-transmit-time")

                        self.avg_psnp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime()
                        self.avg_psnp_transmit_time.parent = self
                        self._children_name_map["avg_psnp_transmit_time"] = "avg-psnp-transmit-time"
                        self._children_yang_names.add("avg-psnp-transmit-time")

                        self.avg_lsp_transmit_time = Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime()
                        self.avg_lsp_transmit_time.parent = self
                        self._children_name_map["avg_lsp_transmit_time"] = "avg-lsp-transmit-time"
                        self._children_yang_names.add("avg-lsp-transmit-time")
                        self._segment_path = lambda: "statistics"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics, ['fast_psnp_lookup_count', 'fast_psnp_lookup_hit_count', 'fast_csnp_lookup_count', 'fast_csnp_lookup_hit_count', 'fast_csnp_cache_update_count', 'zero_holdtime_lsp_count', 'invalid_checksum_lsp_count', 'iih_dropped_count', 'lsp_dropped_count', 'snp_dropped_count', 'maximum_iih_queue_length', 'maximum_pdu_queue_length', 'pdu_queue_length', 'avg_hello_recv_rate', 'avg_csnp_recv_rate', 'avg_psnp_recv_rate', 'avg_lsp_recv_rate', 'avg_hello_send_rate', 'avg_csnp_send_rate', 'avg_psnp_send_rate', 'avg_lsp_send_rate'], name, value)


                    class AvgHelloProcessTime(Entity):
                        """
                        Average hello process time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime, self).__init__()

                            self.yang_name = "avg-hello-process-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-hello-process-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloProcessTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgCsnpProcessTime(Entity):
                        """
                        Average CSNP process time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime, self).__init__()

                            self.yang_name = "avg-csnp-process-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-csnp-process-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpProcessTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgPsnpProcessTime(Entity):
                        """
                        Average PSNP process time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime, self).__init__()

                            self.yang_name = "avg-psnp-process-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-psnp-process-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpProcessTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgLspProcessTime(Entity):
                        """
                        Average LSP process time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime, self).__init__()

                            self.yang_name = "avg-lsp-process-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-lsp-process-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspProcessTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgHelloTransmitTime(Entity):
                        """
                        Average hello transmit time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime, self).__init__()

                            self.yang_name = "avg-hello-transmit-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-hello-transmit-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgHelloTransmitTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgCsnpTransmitTime(Entity):
                        """
                        Average CSNP transmit time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime, self).__init__()

                            self.yang_name = "avg-csnp-transmit-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-csnp-transmit-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgCsnpTransmitTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgPsnpTransmitTime(Entity):
                        """
                        Average PSNP transmit time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime, self).__init__()

                            self.yang_name = "avg-psnp-transmit-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-psnp-transmit-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgPsnpTransmitTime, ['seconds', 'nano_seconds'], name, value)


                    class AvgLspTransmitTime(Entity):
                        """
                        Average LSP transmit time
                        
                        .. attribute:: seconds
                        
                        	Timestamp value (seconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: nano_seconds
                        
                        	Timestamp value (nanoseconds)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime, self).__init__()

                            self.yang_name = "avg-lsp-transmit-time"
                            self.yang_parent_name = "statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('seconds', YLeaf(YType.uint32, 'seconds')),
                                ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                            ])
                            self.seconds = None
                            self.nano_seconds = None
                            self._segment_path = lambda: "avg-lsp-transmit-time"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.Statistics.AvgLspTransmitTime, ['seconds', 'nano_seconds'], name, value)


                class PerAreaData(Entity):
                    """
                    Per\-area data
                    
                    .. attribute:: statistics
                    
                    	Statistics
                    	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics>`
                    
                    .. attribute:: level
                    
                    	Level this data applies to
                    	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                    
                    .. attribute:: per_topology_data
                    
                    	Per\-topoogy statistics
                    	**type**\: list of  		 :py:class:`PerTopologyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.StatisticsGlobal.PerAreaData, self).__init__()

                        self.yang_name = "per-area-data"
                        self.yang_parent_name = "statistics-global"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("statistics", ("statistics", Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics))])
                        self._child_list_classes = OrderedDict([("per-topology-data", ("per_topology_data", Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData))])
                        self._leafs = OrderedDict([
                            ('level', YLeaf(YType.enumeration, 'level')),
                        ])
                        self.level = None

                        self.statistics = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics()
                        self.statistics.parent = self
                        self._children_name_map["statistics"] = "statistics"
                        self._children_yang_names.add("statistics")

                        self.per_topology_data = YList(self)
                        self._segment_path = lambda: "per-area-data"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.PerAreaData, ['level'], name, value)


                    class Statistics(Entity):
                        """
                        Statistics
                        
                        .. attribute:: system_lsp_build_count
                        
                        	Number of times system LSP rebuilt
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: system_lsp_refresh_count
                        
                        	Number of times system LSP refreshed
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics, self).__init__()

                            self.yang_name = "statistics"
                            self.yang_parent_name = "per-area-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('system_lsp_build_count', YLeaf(YType.uint32, 'system-lsp-build-count')),
                                ('system_lsp_refresh_count', YLeaf(YType.uint32, 'system-lsp-refresh-count')),
                            ])
                            self.system_lsp_build_count = None
                            self.system_lsp_refresh_count = None
                            self._segment_path = lambda: "statistics"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.Statistics, ['system_lsp_build_count', 'system_lsp_refresh_count'], name, value)


                    class PerTopologyData(Entity):
                        """
                        Per\-topoogy statistics
                        
                        .. attribute:: id
                        
                        	Topology ID
                        	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id>`
                        
                        .. attribute:: statistics
                        
                        	Statistics
                        	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData, self).__init__()

                            self.yang_name = "per-topology-data"
                            self.yang_parent_name = "per-area-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("id", ("id", Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id)), ("statistics", ("statistics", Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.id = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id()
                            self.id.parent = self
                            self._children_name_map["id"] = "id"
                            self._children_yang_names.add("id")

                            self.statistics = Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")
                            self._segment_path = lambda: "per-topology-data"


                        class Id(Entity):
                            """
                            Topology ID
                            
                            .. attribute:: af_name
                            
                            	AF name
                            	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                            
                            .. attribute:: saf_name
                            
                            	Sub\-AF name
                            	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                            
                            .. attribute:: vrf_name
                            
                            	VRF Name
                            	**type**\: str
                            
                            .. attribute:: topology_name
                            
                            	Topology Name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id, self).__init__()

                                self.yang_name = "id"
                                self.yang_parent_name = "per-topology-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                    ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ('topology_name', YLeaf(YType.str, 'topology-name')),
                                ])
                                self.af_name = None
                                self.saf_name = None
                                self.vrf_name = None
                                self.topology_name = None
                                self._segment_path = lambda: "id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Id, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                        class Statistics(Entity):
                            """
                            Statistics
                            
                            .. attribute:: spf_run_count
                            
                            	Number of full SPF calculations run
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ispf_run_count
                            
                            	Number of ISPF calculations run
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: nhc_run_count
                            
                            	Number of Next Hop Calculations run
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prc_run_count
                            
                            	Number of PRCs run
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: periodic_run_count
                            
                            	Number of periodic SPF calculations run
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "per-topology-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('spf_run_count', YLeaf(YType.uint32, 'spf-run-count')),
                                    ('ispf_run_count', YLeaf(YType.uint32, 'ispf-run-count')),
                                    ('nhc_run_count', YLeaf(YType.uint32, 'nhc-run-count')),
                                    ('prc_run_count', YLeaf(YType.uint32, 'prc-run-count')),
                                    ('periodic_run_count', YLeaf(YType.uint32, 'periodic-run-count')),
                                ])
                                self.spf_run_count = None
                                self.ispf_run_count = None
                                self.nhc_run_count = None
                                self.prc_run_count = None
                                self.periodic_run_count = None
                                self._segment_path = lambda: "statistics"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.StatisticsGlobal.PerAreaData.PerTopologyData.Statistics, ['spf_run_count', 'ispf_run_count', 'nhc_run_count', 'prc_run_count', 'periodic_run_count'], name, value)


            class Levels(Entity):
                """
                Level table
                
                .. attribute:: level
                
                	Per\-level operational data
                	**type**\: list of  		 :py:class:`Level <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Levels, self).__init__()

                    self.yang_name = "levels"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("level", ("level", Isis.Instances.Instance.Levels.Level))])
                    self._leafs = OrderedDict()

                    self.level = YList(self)
                    self._segment_path = lambda: "levels"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.Levels, [], name, value)


                class Level(Entity):
                    """
                    Per\-level operational data
                    
                    .. attribute:: level  (key)
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevel>`
                    
                    .. attribute:: adjacency_log
                    
                    	Log of adjacency changes within a single level
                    	**type**\:  :py:class:`AdjacencyLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog>`
                    
                    .. attribute:: lsp_table_summary
                    
                    	Summary information for one level's LSP database
                    	**type**\:  :py:class:`LspTableSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary>`
                    
                    .. attribute:: adjacencies
                    
                    	Adjacency table
                    	**type**\:  :py:class:`Adjacencies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies>`
                    
                    .. attribute:: detailed_lsps
                    
                    	Detailed LSP table. Use to retrieve LSPs with TLV content
                    	**type**\:  :py:class:`DetailedLsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps>`
                    
                    .. attribute:: lsps
                    
                    	LSP table
                    	**type**\:  :py:class:`Lsps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps>`
                    
                    .. attribute:: lsp_log
                    
                    	LSP\-log for a single level
                    	**type**\:  :py:class:`LspLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog>`
                    
                    .. attribute:: database_log
                    
                    	Database\-log for a single level
                    	**type**\:  :py:class:`DatabaseLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Levels.Level, self).__init__()

                        self.yang_name = "level"
                        self.yang_parent_name = "levels"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['level']
                        self._child_container_classes = OrderedDict([("adjacency-log", ("adjacency_log", Isis.Instances.Instance.Levels.Level.AdjacencyLog)), ("lsp-table-summary", ("lsp_table_summary", Isis.Instances.Instance.Levels.Level.LspTableSummary)), ("adjacencies", ("adjacencies", Isis.Instances.Instance.Levels.Level.Adjacencies)), ("detailed-lsps", ("detailed_lsps", Isis.Instances.Instance.Levels.Level.DetailedLsps)), ("lsps", ("lsps", Isis.Instances.Instance.Levels.Level.Lsps)), ("lsp-log", ("lsp_log", Isis.Instances.Instance.Levels.Level.LspLog)), ("database-log", ("database_log", Isis.Instances.Instance.Levels.Level.DatabaseLog))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('level', YLeaf(YType.enumeration, 'level')),
                        ])
                        self.level = None

                        self.adjacency_log = Isis.Instances.Instance.Levels.Level.AdjacencyLog()
                        self.adjacency_log.parent = self
                        self._children_name_map["adjacency_log"] = "adjacency-log"
                        self._children_yang_names.add("adjacency-log")

                        self.lsp_table_summary = Isis.Instances.Instance.Levels.Level.LspTableSummary()
                        self.lsp_table_summary.parent = self
                        self._children_name_map["lsp_table_summary"] = "lsp-table-summary"
                        self._children_yang_names.add("lsp-table-summary")

                        self.adjacencies = Isis.Instances.Instance.Levels.Level.Adjacencies()
                        self.adjacencies.parent = self
                        self._children_name_map["adjacencies"] = "adjacencies"
                        self._children_yang_names.add("adjacencies")

                        self.detailed_lsps = Isis.Instances.Instance.Levels.Level.DetailedLsps()
                        self.detailed_lsps.parent = self
                        self._children_name_map["detailed_lsps"] = "detailed-lsps"
                        self._children_yang_names.add("detailed-lsps")

                        self.lsps = Isis.Instances.Instance.Levels.Level.Lsps()
                        self.lsps.parent = self
                        self._children_name_map["lsps"] = "lsps"
                        self._children_yang_names.add("lsps")

                        self.lsp_log = Isis.Instances.Instance.Levels.Level.LspLog()
                        self.lsp_log.parent = self
                        self._children_name_map["lsp_log"] = "lsp-log"
                        self._children_yang_names.add("lsp-log")

                        self.database_log = Isis.Instances.Instance.Levels.Level.DatabaseLog()
                        self.database_log.parent = self
                        self._children_name_map["database_log"] = "database-log"
                        self._children_yang_names.add("database-log")
                        self._segment_path = lambda: "level" + "[level='" + str(self.level) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Levels.Level, ['level'], name, value)


                    class AdjacencyLog(Entity):
                        """
                        Log of adjacency changes within a single
                        level
                        
                        .. attribute:: log_entry
                        
                        	Adjacency Log entries
                        	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.AdjacencyLog, self).__init__()

                            self.yang_name = "adjacency-log"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry))])
                            self._leafs = OrderedDict()

                            self.log_entry = YList(self)
                            self._segment_path = lambda: "adjacency-log"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.AdjacencyLog, [], name, value)


                        class LogEntry(Entity):
                            """
                            Adjacency Log entries
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData>`
                            
                            .. attribute:: adj_log_neighbor_system_id
                            
                            	Neighbor system ID
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\: str
                            
                            .. attribute:: prev_adj_state
                            
                            	Previous adjacency state
                            	**type**\:  :py:class:`IsisAdjState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjState>`
                            
                            .. attribute:: cur_adj_state
                            
                            	Current adjacency state
                            	**type**\:  :py:class:`IsisAdjState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjState>`
                            
                            .. attribute:: state_reason
                            
                            	Reason adjacency changed state
                            	**type**\:  :py:class:`IsisAdjStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjStateReason>`
                            
                            .. attribute:: adjacency_per_topology_change
                            
                            	Per\-topology changes
                            	**type**\: list of  		 :py:class:`AdjacencyPerTopologyChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry, self).__init__()

                                self.yang_name = "log-entry"
                                self.yang_parent_name = "adjacency-log"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData))])
                                self._child_list_classes = OrderedDict([("adjacency-per-topology-change", ("adjacency_per_topology_change", Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange))])
                                self._leafs = OrderedDict([
                                    ('adj_log_neighbor_system_id', YLeaf(YType.str, 'adj-log-neighbor-system-id')),
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ('prev_adj_state', YLeaf(YType.enumeration, 'prev-adj-state')),
                                    ('cur_adj_state', YLeaf(YType.enumeration, 'cur-adj-state')),
                                    ('state_reason', YLeaf(YType.enumeration, 'state-reason')),
                                ])
                                self.adj_log_neighbor_system_id = None
                                self.interface_name = None
                                self.prev_adj_state = None
                                self.cur_adj_state = None
                                self.state_reason = None

                                self.generic_data = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self._children_name_map["generic_data"] = "generic-data"
                                self._children_yang_names.add("generic-data")

                                self.adjacency_per_topology_change = YList(self)
                                self._segment_path = lambda: "log-entry"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry, ['adj_log_neighbor_system_id', 'interface_name', 'prev_adj_state', 'cur_adj_state', 'state_reason'], name, value)


                            class GenericData(Entity):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData, self).__init__()

                                    self.yang_name = "generic-data"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.timestamp = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self
                                    self._children_name_map["timestamp"] = "timestamp"
                                    self._children_yang_names.add("timestamp")
                                    self._segment_path = lambda: "generic-data"


                                class Timestamp(Entity):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp, self).__init__()

                                        self.yang_name = "timestamp"
                                        self.yang_parent_name = "generic-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('seconds', YLeaf(YType.uint32, 'seconds')),
                                            ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                        ])
                                        self.seconds = None
                                        self.nano_seconds = None
                                        self._segment_path = lambda: "timestamp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


                            class AdjacencyPerTopologyChange(Entity):
                                """
                                Per\-topology changes
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id>`
                                
                                .. attribute:: change
                                
                                	Change
                                	**type**\:  :py:class:`IsisAdjTopoChange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjTopoChange>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange, self).__init__()

                                    self.yang_name = "adjacency-per-topology-change"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("id", ("id", Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('change', YLeaf(YType.enumeration, 'change')),
                                    ])
                                    self.change = None

                                    self.id = Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id()
                                    self.id.parent = self
                                    self._children_name_map["id"] = "id"
                                    self._children_yang_names.add("id")
                                    self._segment_path = lambda: "adjacency-per-topology-change"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange, ['change'], name, value)


                                class Id(Entity):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id, self).__init__()

                                        self.yang_name = "id"
                                        self.yang_parent_name = "adjacency-per-topology-change"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                            ('topology_name', YLeaf(YType.str, 'topology-name')),
                                        ])
                                        self.af_name = None
                                        self.saf_name = None
                                        self.vrf_name = None
                                        self.topology_name = None
                                        self._segment_path = lambda: "id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.AdjacencyLog.LogEntry.AdjacencyPerTopologyChange.Id, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                    class LspTableSummary(Entity):
                        """
                        Summary information for one level's LSP
                        database
                        
                        .. attribute:: fragment0lsp_stats
                        
                        	Statistics for fragment 0 LSPs
                        	**type**\:  :py:class:`Fragment0LspStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats>`
                        
                        .. attribute:: all_fragment_lsp_stats
                        
                        	Statistics for all LSP fragments
                        	**type**\:  :py:class:`AllFragmentLspStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.LspTableSummary, self).__init__()

                            self.yang_name = "lsp-table-summary"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fragment0lsp-stats", ("fragment0lsp_stats", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats)), ("all-fragment-lsp-stats", ("all_fragment_lsp_stats", Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.fragment0lsp_stats = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats()
                            self.fragment0lsp_stats.parent = self
                            self._children_name_map["fragment0lsp_stats"] = "fragment0lsp-stats"
                            self._children_yang_names.add("fragment0lsp-stats")

                            self.all_fragment_lsp_stats = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats()
                            self.all_fragment_lsp_stats.parent = self
                            self._children_name_map["all_fragment_lsp_stats"] = "all-fragment-lsp-stats"
                            self._children_yang_names.add("all-fragment-lsp-stats")
                            self._segment_path = lambda: "lsp-table-summary"


                        class Fragment0LspStats(Entity):
                            """
                            Statistics for fragment 0 LSPs
                            
                            .. attribute:: node_counters
                            
                            	Summary by class of node
                            	**type**\:  :py:class:`NodeCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters>`
                            
                            .. attribute:: per_topology_counter
                            
                            	Per topology counters
                            	**type**\: list of  		 :py:class:`PerTopologyCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats, self).__init__()

                                self.yang_name = "fragment0lsp-stats"
                                self.yang_parent_name = "lsp-table-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-counters", ("node_counters", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters))])
                                self._child_list_classes = OrderedDict([("per-topology-counter", ("per_topology_counter", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter))])
                                self._leafs = OrderedDict()

                                self.node_counters = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters()
                                self.node_counters.parent = self
                                self._children_name_map["node_counters"] = "node-counters"
                                self._children_yang_names.add("node-counters")

                                self.per_topology_counter = YList(self)
                                self._segment_path = lambda: "fragment0lsp-stats"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats, [], name, value)


                            class NodeCounters(Entity):
                                """
                                Summary by class of node
                                
                                .. attribute:: route_lsp_count
                                
                                	Router LSPs
                                	**type**\:  :py:class:`RouteLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount>`
                                
                                .. attribute:: pseudo_node_lsp_count
                                
                                	Pseudonode LSPs
                                	**type**\:  :py:class:`PseudoNodeLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters, self).__init__()

                                    self.yang_name = "node-counters"
                                    self.yang_parent_name = "fragment0lsp-stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("route-lsp-count", ("route_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount)), ("pseudo-node-lsp-count", ("pseudo_node_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.route_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount()
                                    self.route_lsp_count.parent = self
                                    self._children_name_map["route_lsp_count"] = "route-lsp-count"
                                    self._children_yang_names.add("route-lsp-count")

                                    self.pseudo_node_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount()
                                    self.pseudo_node_lsp_count.parent = self
                                    self._children_name_map["pseudo_node_lsp_count"] = "pseudo-node-lsp-count"
                                    self._children_yang_names.add("pseudo-node-lsp-count")
                                    self._segment_path = lambda: "node-counters"


                                class RouteLspCount(Entity):
                                    """
                                    Router LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount, self).__init__()

                                        self.yang_name = "route-lsp-count"
                                        self.yang_parent_name = "node-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "route-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.RouteLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                                class PseudoNodeLspCount(Entity):
                                    """
                                    Pseudonode LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount, self).__init__()

                                        self.yang_name = "pseudo-node-lsp-count"
                                        self.yang_parent_name = "node-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "pseudo-node-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.NodeCounters.PseudoNodeLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                            class PerTopologyCounter(Entity):
                                """
                                Per topology counters
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id>`
                                
                                .. attribute:: overloaded_lsp_count
                                
                                	Number of LSPs with their per\-topology overload bit set
                                	**type**\:  :py:class:`OverloadedLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount>`
                                
                                .. attribute:: attached_lsp_count
                                
                                	Number of LSPs with their per\-topology attached bit set
                                	**type**\:  :py:class:`AttachedLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter, self).__init__()

                                    self.yang_name = "per-topology-counter"
                                    self.yang_parent_name = "fragment0lsp-stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("id", ("id", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id)), ("overloaded-lsp-count", ("overloaded_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount)), ("attached-lsp-count", ("attached_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.id = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id()
                                    self.id.parent = self
                                    self._children_name_map["id"] = "id"
                                    self._children_yang_names.add("id")

                                    self.overloaded_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount()
                                    self.overloaded_lsp_count.parent = self
                                    self._children_name_map["overloaded_lsp_count"] = "overloaded-lsp-count"
                                    self._children_yang_names.add("overloaded-lsp-count")

                                    self.attached_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount()
                                    self.attached_lsp_count.parent = self
                                    self._children_name_map["attached_lsp_count"] = "attached-lsp-count"
                                    self._children_yang_names.add("attached-lsp-count")
                                    self._segment_path = lambda: "per-topology-counter"


                                class Id(Entity):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id, self).__init__()

                                        self.yang_name = "id"
                                        self.yang_parent_name = "per-topology-counter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                            ('topology_name', YLeaf(YType.str, 'topology-name')),
                                        ])
                                        self.af_name = None
                                        self.saf_name = None
                                        self.vrf_name = None
                                        self.topology_name = None
                                        self._segment_path = lambda: "id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.Id, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                                class OverloadedLspCount(Entity):
                                    """
                                    Number of LSPs with their per\-topology overload
                                    bit set
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount, self).__init__()

                                        self.yang_name = "overloaded-lsp-count"
                                        self.yang_parent_name = "per-topology-counter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "overloaded-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.OverloadedLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                                class AttachedLspCount(Entity):
                                    """
                                    Number of LSPs with their per\-topology attached
                                    bit set
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount, self).__init__()

                                        self.yang_name = "attached-lsp-count"
                                        self.yang_parent_name = "per-topology-counter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "attached-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.Fragment0LspStats.PerTopologyCounter.AttachedLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                        class AllFragmentLspStats(Entity):
                            """
                            Statistics for all LSP fragments
                            
                            .. attribute:: node_counters
                            
                            	Summary by class of node
                            	**type**\:  :py:class:`NodeCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats, self).__init__()

                                self.yang_name = "all-fragment-lsp-stats"
                                self.yang_parent_name = "lsp-table-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-counters", ("node_counters", Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.node_counters = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters()
                                self.node_counters.parent = self
                                self._children_name_map["node_counters"] = "node-counters"
                                self._children_yang_names.add("node-counters")
                                self._segment_path = lambda: "all-fragment-lsp-stats"


                            class NodeCounters(Entity):
                                """
                                Summary by class of node
                                
                                .. attribute:: route_lsp_count
                                
                                	Router LSPs
                                	**type**\:  :py:class:`RouteLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount>`
                                
                                .. attribute:: pseudo_node_lsp_count
                                
                                	Pseudonode LSPs
                                	**type**\:  :py:class:`PseudoNodeLspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters, self).__init__()

                                    self.yang_name = "node-counters"
                                    self.yang_parent_name = "all-fragment-lsp-stats"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("route-lsp-count", ("route_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount)), ("pseudo-node-lsp-count", ("pseudo_node_lsp_count", Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.route_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount()
                                    self.route_lsp_count.parent = self
                                    self._children_name_map["route_lsp_count"] = "route-lsp-count"
                                    self._children_yang_names.add("route-lsp-count")

                                    self.pseudo_node_lsp_count = Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount()
                                    self.pseudo_node_lsp_count.parent = self
                                    self._children_name_map["pseudo_node_lsp_count"] = "pseudo-node-lsp-count"
                                    self._children_yang_names.add("pseudo-node-lsp-count")
                                    self._segment_path = lambda: "node-counters"


                                class RouteLspCount(Entity):
                                    """
                                    Router LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount, self).__init__()

                                        self.yang_name = "route-lsp-count"
                                        self.yang_parent_name = "node-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "route-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.RouteLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                                class PseudoNodeLspCount(Entity):
                                    """
                                    Pseudonode LSPs
                                    
                                    .. attribute:: active_lsp_count
                                    
                                    	Number of active LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: purged_lsp_count
                                    
                                    	Number of purged LSPs
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount, self).__init__()

                                        self.yang_name = "pseudo-node-lsp-count"
                                        self.yang_parent_name = "node-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('active_lsp_count', YLeaf(YType.uint32, 'active-lsp-count')),
                                            ('purged_lsp_count', YLeaf(YType.uint32, 'purged-lsp-count')),
                                        ])
                                        self.active_lsp_count = None
                                        self.purged_lsp_count = None
                                        self._segment_path = lambda: "pseudo-node-lsp-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspTableSummary.AllFragmentLspStats.NodeCounters.PseudoNodeLspCount, ['active_lsp_count', 'purged_lsp_count'], name, value)


                    class Adjacencies(Entity):
                        """
                        Adjacency table
                        
                        .. attribute:: adjacency
                        
                        	A single IS\-IS adjacency
                        	**type**\: list of  		 :py:class:`Adjacency <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.Adjacencies, self).__init__()

                            self.yang_name = "adjacencies"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("adjacency", ("adjacency", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency))])
                            self._leafs = OrderedDict()

                            self.adjacency = YList(self)
                            self._segment_path = lambda: "adjacencies"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies, [], name, value)


                        class Adjacency(Entity):
                            """
                            A single IS\-IS adjacency
                            
                            .. attribute:: system_id
                            
                            	System ID
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: adjacency_system_id
                            
                            	Neighbor system ID
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: adjacency_snpa
                            
                            	Neighbor SNPA
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                            
                            .. attribute:: adjacency_interface
                            
                            	Local interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: adjacency_media_type
                            
                            	Link media type
                            	**type**\:  :py:class:`IsisMediaClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClass>`
                            
                            .. attribute:: adjacency_state
                            
                            	Adjacency state
                            	**type**\:  :py:class:`IsisAdjState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjState>`
                            
                            .. attribute:: adjacency_bfd_state
                            
                            	Adjacency IPv4 BFD state
                            	**type**\:  :py:class:`IsisAdjBfdState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjBfdState>`
                            
                            .. attribute:: adjacency_ipv6bfd_state
                            
                            	Adjacency IPv6 BFD state
                            	**type**\:  :py:class:`IsisAdjBfdState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjBfdState>`
                            
                            .. attribute:: adj_ipv4bfd_retry_running
                            
                            	Is IPv4 BFD retry timer running
                            	**type**\: bool
                            
                            .. attribute:: adj_ipv6bfd_retry_running
                            
                            	Is IPv6 BFD retry timer running
                            	**type**\: bool
                            
                            .. attribute:: adj_ipv4bfd_retry_exp
                            
                            	Time to expiration of IPv4 BFD retry timer (s)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adj_ipv6bfd_retry_exp
                            
                            	Time to expiration of IPv6 BFD retry timer (s)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adj_ipv4bfd_retry_count
                            
                            	IPv4 BFD retry counter
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adj_ipv6bfd_retry_count
                            
                            	IPv6 BFD retry counter
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_uptime_valid_flag
                            
                            	TRUE if AdjacencyUptime is set
                            	**type**\: bool
                            
                            .. attribute:: adjacency_uptime
                            
                            	How long the adjacency has been up (s)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_holdtime
                            
                            	Time (s) until adjacency declared down if no IIH received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_checkpoint_object_id
                            
                            	Adjacency checkpoint object ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: adjacency_ietf_nsf_capable_flag
                            
                            	TRUE if neighbor is IETF\-NSF capable
                            	**type**\: bool
                            
                            .. attribute:: adjacency_dispriority
                            
                            	Priority of DIS on this LAN. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_neighbor_priority
                            
                            	Neighbor IS priority. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_local_priority
                            
                            	Local IS priority. Valid only if aj\_media\_class is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: local_dis_flag
                            
                            	TRUE if local system is DIS. Valid only if AdjacencyMediaType is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\: bool
                            
                            .. attribute:: neighbor_dis_flag
                            
                            	TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is ISIS\_MEDIA\_CLASS\_LAN
                            	**type**\: bool
                            
                            .. attribute:: nsr_standby
                            
                            	ISIS NSR STANDBY
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: adjacency_area_address
                            
                            	Area addresses active over this adjacency
                            	**type**\: list of  		 :py:class:`AdjacencyAreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyAreaAddress>`
                            
                            .. attribute:: adjacency_topology
                            
                            	Per\-topology data
                            	**type**\: list of  		 :py:class:`AdjacencyTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology>`
                            
                            .. attribute:: adjacency_per_address_family_data
                            
                            	Per\-address\-family data
                            	**type**\: list of  		 :py:class:`AdjacencyPerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency, self).__init__()

                                self.yang_name = "adjacency"
                                self.yang_parent_name = "adjacencies"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("adjacency-area-address", ("adjacency_area_address", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyAreaAddress)), ("adjacency-topology", ("adjacency_topology", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology)), ("adjacency-per-address-family-data", ("adjacency_per_address_family_data", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData))])
                                self._leafs = OrderedDict([
                                    ('system_id', YLeaf(YType.str, 'system-id')),
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ('adjacency_system_id', YLeaf(YType.str, 'adjacency-system-id')),
                                    ('adjacency_snpa', YLeaf(YType.str, 'adjacency-snpa')),
                                    ('adjacency_interface', YLeaf(YType.str, 'adjacency-interface')),
                                    ('adjacency_media_type', YLeaf(YType.enumeration, 'adjacency-media-type')),
                                    ('adjacency_state', YLeaf(YType.enumeration, 'adjacency-state')),
                                    ('adjacency_bfd_state', YLeaf(YType.enumeration, 'adjacency-bfd-state')),
                                    ('adjacency_ipv6bfd_state', YLeaf(YType.enumeration, 'adjacency-ipv6bfd-state')),
                                    ('adj_ipv4bfd_retry_running', YLeaf(YType.boolean, 'adj-ipv4bfd-retry-running')),
                                    ('adj_ipv6bfd_retry_running', YLeaf(YType.boolean, 'adj-ipv6bfd-retry-running')),
                                    ('adj_ipv4bfd_retry_exp', YLeaf(YType.uint32, 'adj-ipv4bfd-retry-exp')),
                                    ('adj_ipv6bfd_retry_exp', YLeaf(YType.uint32, 'adj-ipv6bfd-retry-exp')),
                                    ('adj_ipv4bfd_retry_count', YLeaf(YType.uint32, 'adj-ipv4bfd-retry-count')),
                                    ('adj_ipv6bfd_retry_count', YLeaf(YType.uint32, 'adj-ipv6bfd-retry-count')),
                                    ('adjacency_uptime_valid_flag', YLeaf(YType.boolean, 'adjacency-uptime-valid-flag')),
                                    ('adjacency_uptime', YLeaf(YType.uint32, 'adjacency-uptime')),
                                    ('adjacency_holdtime', YLeaf(YType.uint32, 'adjacency-holdtime')),
                                    ('adjacency_checkpoint_object_id', YLeaf(YType.uint32, 'adjacency-checkpoint-object-id')),
                                    ('adjacency_ietf_nsf_capable_flag', YLeaf(YType.boolean, 'adjacency-ietf-nsf-capable-flag')),
                                    ('adjacency_dispriority', YLeaf(YType.uint8, 'adjacency-dispriority')),
                                    ('adjacency_neighbor_priority', YLeaf(YType.uint8, 'adjacency-neighbor-priority')),
                                    ('adjacency_local_priority', YLeaf(YType.uint8, 'adjacency-local-priority')),
                                    ('local_dis_flag', YLeaf(YType.boolean, 'local-dis-flag')),
                                    ('neighbor_dis_flag', YLeaf(YType.boolean, 'neighbor-dis-flag')),
                                    ('nsr_standby', YLeaf(YType.uint8, 'nsr-standby')),
                                ])
                                self.system_id = None
                                self.interface_name = None
                                self.adjacency_system_id = None
                                self.adjacency_snpa = None
                                self.adjacency_interface = None
                                self.adjacency_media_type = None
                                self.adjacency_state = None
                                self.adjacency_bfd_state = None
                                self.adjacency_ipv6bfd_state = None
                                self.adj_ipv4bfd_retry_running = None
                                self.adj_ipv6bfd_retry_running = None
                                self.adj_ipv4bfd_retry_exp = None
                                self.adj_ipv6bfd_retry_exp = None
                                self.adj_ipv4bfd_retry_count = None
                                self.adj_ipv6bfd_retry_count = None
                                self.adjacency_uptime_valid_flag = None
                                self.adjacency_uptime = None
                                self.adjacency_holdtime = None
                                self.adjacency_checkpoint_object_id = None
                                self.adjacency_ietf_nsf_capable_flag = None
                                self.adjacency_dispriority = None
                                self.adjacency_neighbor_priority = None
                                self.adjacency_local_priority = None
                                self.local_dis_flag = None
                                self.neighbor_dis_flag = None
                                self.nsr_standby = None

                                self.adjacency_area_address = YList(self)
                                self.adjacency_topology = YList(self)
                                self.adjacency_per_address_family_data = YList(self)
                                self._segment_path = lambda: "adjacency"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency, ['system_id', 'interface_name', 'adjacency_system_id', 'adjacency_snpa', 'adjacency_interface', 'adjacency_media_type', 'adjacency_state', 'adjacency_bfd_state', 'adjacency_ipv6bfd_state', 'adj_ipv4bfd_retry_running', 'adj_ipv6bfd_retry_running', 'adj_ipv4bfd_retry_exp', 'adj_ipv6bfd_retry_exp', 'adj_ipv4bfd_retry_count', 'adj_ipv6bfd_retry_count', 'adjacency_uptime_valid_flag', 'adjacency_uptime', 'adjacency_holdtime', 'adjacency_checkpoint_object_id', 'adjacency_ietf_nsf_capable_flag', 'adjacency_dispriority', 'adjacency_neighbor_priority', 'adjacency_local_priority', 'local_dis_flag', 'neighbor_dis_flag', 'nsr_standby'], name, value)


                            class AdjacencyAreaAddress(Entity):
                                """
                                Area addresses active over this adjacency
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyAreaAddress, self).__init__()

                                    self.yang_name = "adjacency-area-address"
                                    self.yang_parent_name = "adjacency"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.str, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "adjacency-area-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyAreaAddress, ['entry'], name, value)


                            class AdjacencyTopology(Entity):
                                """
                                Per\-topology data
                                
                                .. attribute:: id
                                
                                	Topology ID
                                	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id>`
                                
                                .. attribute:: topology_status
                                
                                	Status of topology in adjacency
                                	**type**\:  :py:class:`IsisAdjTopoStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAdjTopoStatus>`
                                
                                .. attribute:: parallel_p2p_link_suppressed_flag
                                
                                	TRUE if suppressed parallel point\-to\-point link
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology, self).__init__()

                                    self.yang_name = "adjacency-topology"
                                    self.yang_parent_name = "adjacency"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("id", ("id", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('topology_status', YLeaf(YType.enumeration, 'topology-status')),
                                        ('parallel_p2p_link_suppressed_flag', YLeaf(YType.boolean, 'parallel-p2p-link-suppressed-flag')),
                                    ])
                                    self.topology_status = None
                                    self.parallel_p2p_link_suppressed_flag = None

                                    self.id = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id()
                                    self.id.parent = self
                                    self._children_name_map["id"] = "id"
                                    self._children_yang_names.add("id")
                                    self._segment_path = lambda: "adjacency-topology"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology, ['topology_status', 'parallel_p2p_link_suppressed_flag'], name, value)


                                class Id(Entity):
                                    """
                                    Topology ID
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id, self).__init__()

                                        self.yang_name = "id"
                                        self.yang_parent_name = "adjacency-topology"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                            ('topology_name', YLeaf(YType.str, 'topology-name')),
                                        ])
                                        self.af_name = None
                                        self.saf_name = None
                                        self.vrf_name = None
                                        self.topology_name = None
                                        self._segment_path = lambda: "id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyTopology.Id, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                            class AdjacencyPerAddressFamilyData(Entity):
                                """
                                Per\-address\-family data
                                
                                .. attribute:: ipv4
                                
                                	IPV4 neighbor info
                                	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4>`
                                
                                .. attribute:: ipv6
                                
                                	IPV6 neighbor info
                                	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6>`
                                
                                .. attribute:: af_name
                                
                                	AFName
                                	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData, self).__init__()

                                    self.yang_name = "adjacency-per-address-family-data"
                                    self.yang_parent_name = "adjacency"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4)), ("ipv6", ("ipv6", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                    ])
                                    self.af_name = None

                                    self.ipv4 = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4()
                                    self.ipv4.parent = self
                                    self._children_name_map["ipv4"] = "ipv4"
                                    self._children_yang_names.add("ipv4")

                                    self.ipv6 = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6()
                                    self.ipv6.parent = self
                                    self._children_name_map["ipv6"] = "ipv6"
                                    self._children_yang_names.add("ipv6")
                                    self._segment_path = lambda: "adjacency-per-address-family-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData, ['af_name'], name, value)


                                class Ipv4(Entity):
                                    """
                                    IPV4 neighbor info
                                    
                                    .. attribute:: adjacency_sid
                                    
                                    	Adjacency SID
                                    	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid>`
                                    
                                    .. attribute:: non_frr_adjacency_sid
                                    
                                    	Adjacency SID not eligible for FRR protection
                                    	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid>`
                                    
                                    .. attribute:: next_hop
                                    
                                    	Adjacency next hop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: interface_address
                                    
                                    	Adjacency interface addresses
                                    	**type**\: list of  		 :py:class:`InterfaceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.InterfaceAddress>`
                                    
                                    .. attribute:: underlying_adjacency_sid
                                    
                                    	Per bundle member Adjacency sid
                                    	**type**\: list of  		 :py:class:`UnderlyingAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid>`
                                    
                                    .. attribute:: underlying_interface
                                    
                                    	Underlying interface list for bundle interfaces
                                    	**type**\: list of  		 :py:class:`UnderlyingInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingInterface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4, self).__init__()

                                        self.yang_name = "ipv4"
                                        self.yang_parent_name = "adjacency-per-address-family-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("adjacency-sid", ("adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid)), ("non-frr-adjacency-sid", ("non_frr_adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid))])
                                        self._child_list_classes = OrderedDict([("interface-address", ("interface_address", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.InterfaceAddress)), ("underlying-adjacency-sid", ("underlying_adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid)), ("underlying-interface", ("underlying_interface", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingInterface))])
                                        self._leafs = OrderedDict([
                                            ('next_hop', YLeaf(YType.str, 'next-hop')),
                                        ])
                                        self.next_hop = None

                                        self.adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid()
                                        self.adjacency_sid.parent = self
                                        self._children_name_map["adjacency_sid"] = "adjacency-sid"
                                        self._children_yang_names.add("adjacency-sid")

                                        self.non_frr_adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid()
                                        self.non_frr_adjacency_sid.parent = self
                                        self._children_name_map["non_frr_adjacency_sid"] = "non-frr-adjacency-sid"
                                        self._children_yang_names.add("non-frr-adjacency-sid")

                                        self.interface_address = YList(self)
                                        self.underlying_adjacency_sid = YList(self)
                                        self.underlying_interface = YList(self)
                                        self._segment_path = lambda: "ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4, ['next_hop'], name, value)


                                    class AdjacencySid(Entity):
                                        """
                                        Adjacency SID
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_backup_te
                                        
                                        	Adjacency SID Backup Info TE
                                        	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid, self).__init__()

                                            self.yang_name = "adjacency-sid"
                                            self.yang_parent_name = "ipv4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                            ])
                                            self.adjacency_sid_value = None

                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                            self._children_yang_names.add("adjacency-sid-backup")

                                            self.adjacency_sid_backup_te = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe()
                                            self.adjacency_sid_backup_te.parent = self
                                            self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                            self._children_yang_names.add("adjacency-sid-backup-te")
                                            self._segment_path = lambda: "adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid, ['adjacency_sid_value'], name, value)


                                        class AdjacencySidBackup(Entity):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup, self).__init__()

                                                self.yang_name = "adjacency-sid-backup"
                                                self.yang_parent_name = "adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                        class AdjacencySidBackupTe(Entity):
                                            """
                                            Adjacency SID Backup Info TE
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe, self).__init__()

                                                self.yang_name = "adjacency-sid-backup-te"
                                                self.yang_parent_name = "adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup-te"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup-te"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                                    class NonFrrAdjacencySid(Entity):
                                        """
                                        Adjacency SID not eligible for FRR protection
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_backup_te
                                        
                                        	Adjacency SID Backup Info TE
                                        	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid, self).__init__()

                                            self.yang_name = "non-frr-adjacency-sid"
                                            self.yang_parent_name = "ipv4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                            ])
                                            self.adjacency_sid_value = None

                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                            self._children_yang_names.add("adjacency-sid-backup")

                                            self.adjacency_sid_backup_te = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe()
                                            self.adjacency_sid_backup_te.parent = self
                                            self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                            self._children_yang_names.add("adjacency-sid-backup-te")
                                            self._segment_path = lambda: "non-frr-adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid, ['adjacency_sid_value'], name, value)


                                        class AdjacencySidBackup(Entity):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup, self).__init__()

                                                self.yang_name = "adjacency-sid-backup"
                                                self.yang_parent_name = "non-frr-adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                        class AdjacencySidBackupTe(Entity):
                                            """
                                            Adjacency SID Backup Info TE
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe, self).__init__()

                                                self.yang_name = "adjacency-sid-backup-te"
                                                self.yang_parent_name = "non-frr-adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup-te"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup-te"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                                    class InterfaceAddress(Entity):
                                        """
                                        Adjacency interface addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.InterfaceAddress, self).__init__()

                                            self.yang_name = "interface-address"
                                            self.yang_parent_name = "ipv4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface-address"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.InterfaceAddress, ['entry'], name, value)


                                    class UnderlyingAdjacencySid(Entity):
                                        """
                                        Per bundle member Adjacency sid
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid, self).__init__()

                                            self.yang_name = "underlying-adjacency-sid"
                                            self.yang_parent_name = "ipv4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "underlying-adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingAdjacencySid, ['entry'], name, value)


                                    class UnderlyingInterface(Entity):
                                        """
                                        Underlying interface list for bundle interfaces
                                        
                                        .. attribute:: interface_handle
                                        
                                        	Local interface handle
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: interface_name
                                        
                                        	Interface name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingInterface, self).__init__()

                                            self.yang_name = "underlying-interface"
                                            self.yang_parent_name = "ipv4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_handle = None
                                            self.interface_name = None
                                            self._segment_path = lambda: "underlying-interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv4.UnderlyingInterface, ['interface_handle', 'interface_name'], name, value)


                                class Ipv6(Entity):
                                    """
                                    IPV6 neighbor info
                                    
                                    .. attribute:: adjacency_sid
                                    
                                    	Adjacency SID
                                    	**type**\:  :py:class:`AdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid>`
                                    
                                    .. attribute:: non_frr_adjacency_sid
                                    
                                    	Adjacency SID not eligible for FRR protection
                                    	**type**\:  :py:class:`NonFrrAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid>`
                                    
                                    .. attribute:: next_hop
                                    
                                    	Adjacency next hop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: interface_address
                                    
                                    	Adjacency interface addresses
                                    	**type**\: list of  		 :py:class:`InterfaceAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.InterfaceAddress>`
                                    
                                    .. attribute:: underlying_adjacency_sid
                                    
                                    	Per bundle member Adjacency sid
                                    	**type**\: list of  		 :py:class:`UnderlyingAdjacencySid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid>`
                                    
                                    .. attribute:: underlying_interface
                                    
                                    	Underlying interface list for bundle interfaces
                                    	**type**\: list of  		 :py:class:`UnderlyingInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingInterface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6, self).__init__()

                                        self.yang_name = "ipv6"
                                        self.yang_parent_name = "adjacency-per-address-family-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("adjacency-sid", ("adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid)), ("non-frr-adjacency-sid", ("non_frr_adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid))])
                                        self._child_list_classes = OrderedDict([("interface-address", ("interface_address", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.InterfaceAddress)), ("underlying-adjacency-sid", ("underlying_adjacency_sid", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid)), ("underlying-interface", ("underlying_interface", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingInterface))])
                                        self._leafs = OrderedDict([
                                            ('next_hop', YLeaf(YType.str, 'next-hop')),
                                        ])
                                        self.next_hop = None

                                        self.adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid()
                                        self.adjacency_sid.parent = self
                                        self._children_name_map["adjacency_sid"] = "adjacency-sid"
                                        self._children_yang_names.add("adjacency-sid")

                                        self.non_frr_adjacency_sid = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid()
                                        self.non_frr_adjacency_sid.parent = self
                                        self._children_name_map["non_frr_adjacency_sid"] = "non-frr-adjacency-sid"
                                        self._children_yang_names.add("non-frr-adjacency-sid")

                                        self.interface_address = YList(self)
                                        self.underlying_adjacency_sid = YList(self)
                                        self.underlying_interface = YList(self)
                                        self._segment_path = lambda: "ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6, ['next_hop'], name, value)


                                    class AdjacencySid(Entity):
                                        """
                                        Adjacency SID
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_backup_te
                                        
                                        	Adjacency SID Backup Info TE
                                        	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid, self).__init__()

                                            self.yang_name = "adjacency-sid"
                                            self.yang_parent_name = "ipv6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                            ])
                                            self.adjacency_sid_value = None

                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                            self._children_yang_names.add("adjacency-sid-backup")

                                            self.adjacency_sid_backup_te = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe()
                                            self.adjacency_sid_backup_te.parent = self
                                            self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                            self._children_yang_names.add("adjacency-sid-backup-te")
                                            self._segment_path = lambda: "adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid, ['adjacency_sid_value'], name, value)


                                        class AdjacencySidBackup(Entity):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup, self).__init__()

                                                self.yang_name = "adjacency-sid-backup"
                                                self.yang_parent_name = "adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                        class AdjacencySidBackupTe(Entity):
                                            """
                                            Adjacency SID Backup Info TE
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe, self).__init__()

                                                self.yang_name = "adjacency-sid-backup-te"
                                                self.yang_parent_name = "adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup-te"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup-te"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.AdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                                    class NonFrrAdjacencySid(Entity):
                                        """
                                        Adjacency SID not eligible for FRR protection
                                        
                                        .. attribute:: adjacency_sid_backup
                                        
                                        	Adjacency SID Backup Info
                                        	**type**\:  :py:class:`AdjacencySidBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup>`
                                        
                                        .. attribute:: adjacency_sid_backup_te
                                        
                                        	Adjacency SID Backup Info TE
                                        	**type**\:  :py:class:`AdjacencySidBackupTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe>`
                                        
                                        .. attribute:: adjacency_sid_value
                                        
                                        	Adjacency SID value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid, self).__init__()

                                            self.yang_name = "non-frr-adjacency-sid"
                                            self.yang_parent_name = "ipv6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("adjacency-sid-backup", ("adjacency_sid_backup", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup)), ("adjacency-sid-backup-te", ("adjacency_sid_backup_te", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('adjacency_sid_value', YLeaf(YType.uint32, 'adjacency-sid-value')),
                                            ])
                                            self.adjacency_sid_value = None

                                            self.adjacency_sid_backup = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup()
                                            self.adjacency_sid_backup.parent = self
                                            self._children_name_map["adjacency_sid_backup"] = "adjacency-sid-backup"
                                            self._children_yang_names.add("adjacency-sid-backup")

                                            self.adjacency_sid_backup_te = Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe()
                                            self.adjacency_sid_backup_te.parent = self
                                            self._children_name_map["adjacency_sid_backup_te"] = "adjacency-sid-backup-te"
                                            self._children_yang_names.add("adjacency-sid-backup-te")
                                            self._segment_path = lambda: "non-frr-adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid, ['adjacency_sid_value'], name, value)


                                        class AdjacencySidBackup(Entity):
                                            """
                                            Adjacency SID Backup Info
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup, self).__init__()

                                                self.yang_name = "adjacency-sid-backup"
                                                self.yang_parent_name = "non-frr-adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackup.BackupLabelStack, ['entry'], name, value)


                                        class AdjacencySidBackupTe(Entity):
                                            """
                                            Adjacency SID Backup Info TE
                                            
                                            .. attribute:: backup_label_stack_size
                                            
                                            	Number of labels in the backup path label stack
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: backup_node_address
                                            
                                            	Neighbor address used as adjacency backup target
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_nexthop
                                            
                                            	Backup path nexthop address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: backup_interface
                                            
                                            	Backup path interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            .. attribute:: backup_label_stack
                                            
                                            	Backup path label stack
                                            	**type**\: list of  		 :py:class:`BackupLabelStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe, self).__init__()

                                                self.yang_name = "adjacency-sid-backup-te"
                                                self.yang_parent_name = "non-frr-adjacency-sid"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("backup-label-stack", ("backup_label_stack", Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack))])
                                                self._leafs = OrderedDict([
                                                    ('backup_label_stack_size', YLeaf(YType.uint8, 'backup-label-stack-size')),
                                                    ('backup_node_address', YLeaf(YType.str, 'backup-node-address')),
                                                    ('backup_nexthop', YLeaf(YType.str, 'backup-nexthop')),
                                                    ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                                ])
                                                self.backup_label_stack_size = None
                                                self.backup_node_address = None
                                                self.backup_nexthop = None
                                                self.backup_interface = None

                                                self.backup_label_stack = YList(self)
                                                self._segment_path = lambda: "adjacency-sid-backup-te"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe, ['backup_label_stack_size', 'backup_node_address', 'backup_nexthop', 'backup_interface'], name, value)


                                            class BackupLabelStack(Entity):
                                                """
                                                Backup path label stack
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, self).__init__()

                                                    self.yang_name = "backup-label-stack"
                                                    self.yang_parent_name = "adjacency-sid-backup-te"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "backup-label-stack"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.NonFrrAdjacencySid.AdjacencySidBackupTe.BackupLabelStack, ['entry'], name, value)


                                    class InterfaceAddress(Entity):
                                        """
                                        Adjacency interface addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.InterfaceAddress, self).__init__()

                                            self.yang_name = "interface-address"
                                            self.yang_parent_name = "ipv6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface-address"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.InterfaceAddress, ['entry'], name, value)


                                    class UnderlyingAdjacencySid(Entity):
                                        """
                                        Per bundle member Adjacency sid
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid, self).__init__()

                                            self.yang_name = "underlying-adjacency-sid"
                                            self.yang_parent_name = "ipv6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "underlying-adjacency-sid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingAdjacencySid, ['entry'], name, value)


                                    class UnderlyingInterface(Entity):
                                        """
                                        Underlying interface list for bundle interfaces
                                        
                                        .. attribute:: interface_handle
                                        
                                        	Local interface handle
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: interface_name
                                        
                                        	Interface name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingInterface, self).__init__()

                                            self.yang_name = "underlying-interface"
                                            self.yang_parent_name = "ipv6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ])
                                            self.interface_handle = None
                                            self.interface_name = None
                                            self._segment_path = lambda: "underlying-interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Adjacencies.Adjacency.AdjacencyPerAddressFamilyData.Ipv6.UnderlyingInterface, ['interface_handle', 'interface_name'], name, value)


                    class DetailedLsps(Entity):
                        """
                        Detailed LSP table. Use to retrieve LSPs
                        with TLV content.
                        
                        .. attribute:: detailed_lsp
                        
                        	An IS\-IS LSP with detailed TLV data included
                        	**type**\: list of  		 :py:class:`DetailedLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.DetailedLsps, self).__init__()

                            self.yang_name = "detailed-lsps"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("detailed-lsp", ("detailed_lsp", Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp))])
                            self._leafs = OrderedDict()

                            self.detailed_lsp = YList(self)
                            self._segment_path = lambda: "detailed-lsps"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.DetailedLsps, [], name, value)


                        class DetailedLsp(Entity):
                            """
                            An IS\-IS LSP with detailed TLV data
                            included
                            
                            .. attribute:: lsp_id  (key)
                            
                            	LSP ID
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                            
                            .. attribute:: lsp_header_data
                            
                            	Information from the LSP header
                            	**type**\:  :py:class:`LspHeaderData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData>`
                            
                            .. attribute:: lsp_body
                            
                            	LSP as received/sent over the wire, starting from the LSP ID field
                            	**type**\: str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp, self).__init__()

                                self.yang_name = "detailed-lsp"
                                self.yang_parent_name = "detailed-lsps"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['lsp_id']
                                self._child_container_classes = OrderedDict([("lsp-header-data", ("lsp_header_data", Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                    ('lsp_body', YLeaf(YType.str, 'lsp-body')),
                                ])
                                self.lsp_id = None
                                self.lsp_body = None

                                self.lsp_header_data = Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData()
                                self.lsp_header_data.parent = self
                                self._children_name_map["lsp_header_data"] = "lsp-header-data"
                                self._children_yang_names.add("lsp-header-data")
                                self._segment_path = lambda: "detailed-lsp" + "[lsp-id='" + str(self.lsp_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp, ['lsp_id', 'lsp_body'], name, value)


                            class LspHeaderData(Entity):
                                """
                                Information from the LSP header
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\: bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\: bool
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_partition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\: bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: max_area_addresses
                                
                                	max area addresses
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: id_length
                                
                                	System Id length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	isis version
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version2
                                
                                	isis version2
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData, self).__init__()

                                    self.yang_name = "lsp-header-data"
                                    self.yang_parent_name = "detailed-lsp"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                        ('local_lsp_flag', YLeaf(YType.boolean, 'local-lsp-flag')),
                                        ('lsp_active_flag', YLeaf(YType.boolean, 'lsp-active-flag')),
                                        ('lsp_holdtime', YLeaf(YType.uint16, 'lsp-holdtime')),
                                        ('lsp_sequence_number', YLeaf(YType.uint32, 'lsp-sequence-number')),
                                        ('lsp_checksum', YLeaf(YType.uint16, 'lsp-checksum')),
                                        ('lsp_partition_repair_supported_flag', YLeaf(YType.boolean, 'lsp-partition-repair-supported-flag')),
                                        ('lsp_attached_flag', YLeaf(YType.boolean, 'lsp-attached-flag')),
                                        ('lsp_overloaded_flag', YLeaf(YType.boolean, 'lsp-overloaded-flag')),
                                        ('lsp_nonv1a_flag', YLeaf(YType.uint16, 'lsp-nonv1a-flag')),
                                        ('lsp_level', YLeaf(YType.enumeration, 'lsp-level')),
                                        ('lsp_length', YLeaf(YType.uint16, 'lsp-length')),
                                        ('max_area_addresses', YLeaf(YType.uint8, 'max-area-addresses')),
                                        ('id_length', YLeaf(YType.uint8, 'id-length')),
                                        ('version', YLeaf(YType.uint8, 'version')),
                                        ('version2', YLeaf(YType.uint8, 'version2')),
                                    ])
                                    self.lsp_id = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_holdtime = None
                                    self.lsp_sequence_number = None
                                    self.lsp_checksum = None
                                    self.lsp_partition_repair_supported_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_level = None
                                    self.lsp_length = None
                                    self.max_area_addresses = None
                                    self.id_length = None
                                    self.version = None
                                    self.version2 = None
                                    self._segment_path = lambda: "lsp-header-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.DetailedLsps.DetailedLsp.LspHeaderData, ['lsp_id', 'local_lsp_flag', 'lsp_active_flag', 'lsp_holdtime', 'lsp_sequence_number', 'lsp_checksum', 'lsp_partition_repair_supported_flag', 'lsp_attached_flag', 'lsp_overloaded_flag', 'lsp_nonv1a_flag', 'lsp_level', 'lsp_length', 'max_area_addresses', 'id_length', 'version', 'version2'], name, value)


                    class Lsps(Entity):
                        """
                        LSP table
                        
                        .. attribute:: lsp
                        
                        	An IS\-IS LSP (header information only)
                        	**type**\: list of  		 :py:class:`Lsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps.Lsp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.Lsps, self).__init__()

                            self.yang_name = "lsps"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("lsp", ("lsp", Isis.Instances.Instance.Levels.Level.Lsps.Lsp))])
                            self._leafs = OrderedDict()

                            self.lsp = YList(self)
                            self._segment_path = lambda: "lsps"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.Lsps, [], name, value)


                        class Lsp(Entity):
                            """
                            An IS\-IS LSP (header information only)
                            
                            .. attribute:: lsp_id  (key)
                            
                            	LSP ID
                            	**type**\: str
                            
                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                            
                            .. attribute:: lsp_header_data
                            
                            	Information from the LSP header
                            	**type**\:  :py:class:`LspHeaderData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData>`
                            
                            .. attribute:: lsp_body
                            
                            	LSP as received/sent over the wire, starting from the LSP ID field
                            	**type**\: str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.Lsps.Lsp, self).__init__()

                                self.yang_name = "lsp"
                                self.yang_parent_name = "lsps"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['lsp_id']
                                self._child_container_classes = OrderedDict([("lsp-header-data", ("lsp_header_data", Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                    ('lsp_body', YLeaf(YType.str, 'lsp-body')),
                                ])
                                self.lsp_id = None
                                self.lsp_body = None

                                self.lsp_header_data = Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData()
                                self.lsp_header_data.parent = self
                                self._children_name_map["lsp_header_data"] = "lsp-header-data"
                                self._children_yang_names.add("lsp-header-data")
                                self._segment_path = lambda: "lsp" + "[lsp-id='" + str(self.lsp_id) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.Lsps.Lsp, ['lsp_id', 'lsp_body'], name, value)


                            class LspHeaderData(Entity):
                                """
                                Information from the LSP header
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\: bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\: bool
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_partition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\: bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: max_area_addresses
                                
                                	max area addresses
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: id_length
                                
                                	System Id length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	isis version
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version2
                                
                                	isis version2
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData, self).__init__()

                                    self.yang_name = "lsp-header-data"
                                    self.yang_parent_name = "lsp"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                        ('local_lsp_flag', YLeaf(YType.boolean, 'local-lsp-flag')),
                                        ('lsp_active_flag', YLeaf(YType.boolean, 'lsp-active-flag')),
                                        ('lsp_holdtime', YLeaf(YType.uint16, 'lsp-holdtime')),
                                        ('lsp_sequence_number', YLeaf(YType.uint32, 'lsp-sequence-number')),
                                        ('lsp_checksum', YLeaf(YType.uint16, 'lsp-checksum')),
                                        ('lsp_partition_repair_supported_flag', YLeaf(YType.boolean, 'lsp-partition-repair-supported-flag')),
                                        ('lsp_attached_flag', YLeaf(YType.boolean, 'lsp-attached-flag')),
                                        ('lsp_overloaded_flag', YLeaf(YType.boolean, 'lsp-overloaded-flag')),
                                        ('lsp_nonv1a_flag', YLeaf(YType.uint16, 'lsp-nonv1a-flag')),
                                        ('lsp_level', YLeaf(YType.enumeration, 'lsp-level')),
                                        ('lsp_length', YLeaf(YType.uint16, 'lsp-length')),
                                        ('max_area_addresses', YLeaf(YType.uint8, 'max-area-addresses')),
                                        ('id_length', YLeaf(YType.uint8, 'id-length')),
                                        ('version', YLeaf(YType.uint8, 'version')),
                                        ('version2', YLeaf(YType.uint8, 'version2')),
                                    ])
                                    self.lsp_id = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_holdtime = None
                                    self.lsp_sequence_number = None
                                    self.lsp_checksum = None
                                    self.lsp_partition_repair_supported_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_level = None
                                    self.lsp_length = None
                                    self.max_area_addresses = None
                                    self.id_length = None
                                    self.version = None
                                    self.version2 = None
                                    self._segment_path = lambda: "lsp-header-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.Lsps.Lsp.LspHeaderData, ['lsp_id', 'local_lsp_flag', 'lsp_active_flag', 'lsp_holdtime', 'lsp_sequence_number', 'lsp_checksum', 'lsp_partition_repair_supported_flag', 'lsp_attached_flag', 'lsp_overloaded_flag', 'lsp_nonv1a_flag', 'lsp_level', 'lsp_length', 'max_area_addresses', 'id_length', 'version', 'version2'], name, value)


                    class LspLog(Entity):
                        """
                        LSP\-log for a single level
                        
                        .. attribute:: log_entry
                        
                        	Log entries
                        	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.LspLog, self).__init__()

                            self.yang_name = "lsp-log"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.Levels.Level.LspLog.LogEntry))])
                            self._leafs = OrderedDict()

                            self.log_entry = YList(self)
                            self._segment_path = lambda: "lsp-log"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspLog, [], name, value)


                        class LogEntry(Entity):
                            """
                            Log entries
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData>`
                            
                            .. attribute:: trigger_count
                            
                            	Number of triggers on this run. May not be equal to the number of trigger event types if one or more trigger events has occurred more than once
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: delayed_trigger_count
                            
                            	Number of delayed triggers
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: log_interface
                            
                            	Appropriate interface, if any
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: pseudo_node_number
                            
                            	Pseudo\-node number
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: trigger
                            
                            	Triggers applying to this log entry
                            	**type**\: list of  		 :py:class:`Trigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.Trigger>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry, self).__init__()

                                self.yang_name = "log-entry"
                                self.yang_parent_name = "lsp-log"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData))])
                                self._child_list_classes = OrderedDict([("trigger", ("trigger", Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.Trigger))])
                                self._leafs = OrderedDict([
                                    ('trigger_count', YLeaf(YType.uint32, 'trigger-count')),
                                    ('delayed_trigger_count', YLeaf(YType.uint32, 'delayed-trigger-count')),
                                    ('log_interface', YLeaf(YType.str, 'log-interface')),
                                    ('pseudo_node_number', YLeaf(YType.uint8, 'pseudo-node-number')),
                                ])
                                self.trigger_count = None
                                self.delayed_trigger_count = None
                                self.log_interface = None
                                self.pseudo_node_number = None

                                self.generic_data = Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self._children_name_map["generic_data"] = "generic-data"
                                self._children_yang_names.add("generic-data")

                                self.trigger = YList(self)
                                self._segment_path = lambda: "log-entry"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry, ['trigger_count', 'delayed_trigger_count', 'log_interface', 'pseudo_node_number'], name, value)


                            class GenericData(Entity):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData, self).__init__()

                                    self.yang_name = "generic-data"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.timestamp = Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self
                                    self._children_name_map["timestamp"] = "timestamp"
                                    self._children_yang_names.add("timestamp")
                                    self._segment_path = lambda: "generic-data"


                                class Timestamp(Entity):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp, self).__init__()

                                        self.yang_name = "timestamp"
                                        self.yang_parent_name = "generic-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('seconds', YLeaf(YType.uint32, 'seconds')),
                                            ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                        ])
                                        self.seconds = None
                                        self.nano_seconds = None
                                        self._segment_path = lambda: "timestamp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


                            class Trigger(Entity):
                                """
                                Triggers applying to this log entry.
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\:  :py:class:`IsisLspTrigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLspTrigger>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.Trigger, self).__init__()

                                    self.yang_name = "trigger"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.enumeration, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "trigger"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.LspLog.LogEntry.Trigger, ['entry'], name, value)


                    class DatabaseLog(Entity):
                        """
                        Database\-log for a single level
                        
                        .. attribute:: log_entry
                        
                        	Entries
                        	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Levels.Level.DatabaseLog, self).__init__()

                            self.yang_name = "database-log"
                            self.yang_parent_name = "level"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry))])
                            self._leafs = OrderedDict()

                            self.log_entry = YList(self)
                            self._segment_path = lambda: "database-log"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Levels.Level.DatabaseLog, [], name, value)


                        class LogEntry(Entity):
                            """
                            Entries
                            
                            .. attribute:: generic_data
                            
                            	Generic entry data
                            	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData>`
                            
                            .. attribute:: new_lsp_entry
                            
                            	Entry being inserted or the updated version of an old entry
                            	**type**\:  :py:class:`NewLspEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry>`
                            
                            .. attribute:: old_lsp_entry
                            
                            	Entry being replaced
                            	**type**\:  :py:class:`OldLspEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry>`
                            
                            .. attribute:: lspdb_operation
                            
                            	Operation applying to this entry
                            	**type**\:  :py:class:`IsisLspDbOp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLspDbOp>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry, self).__init__()

                                self.yang_name = "log-entry"
                                self.yang_parent_name = "database-log"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData)), ("new-lsp-entry", ("new_lsp_entry", Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry)), ("old-lsp-entry", ("old_lsp_entry", Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lspdb_operation', YLeaf(YType.enumeration, 'lspdb-operation')),
                                ])
                                self.lspdb_operation = None

                                self.generic_data = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData()
                                self.generic_data.parent = self
                                self._children_name_map["generic_data"] = "generic-data"
                                self._children_yang_names.add("generic-data")

                                self.new_lsp_entry = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry()
                                self.new_lsp_entry.parent = self
                                self._children_name_map["new_lsp_entry"] = "new-lsp-entry"
                                self._children_yang_names.add("new-lsp-entry")

                                self.old_lsp_entry = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry()
                                self.old_lsp_entry.parent = self
                                self._children_name_map["old_lsp_entry"] = "old-lsp-entry"
                                self._children_yang_names.add("old-lsp-entry")
                                self._segment_path = lambda: "log-entry"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry, ['lspdb_operation'], name, value)


                            class GenericData(Entity):
                                """
                                Generic entry data
                                
                                .. attribute:: timestamp
                                
                                	Time in UTC relative to Jan 1st, 1970
                                	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData, self).__init__()

                                    self.yang_name = "generic-data"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.timestamp = Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp()
                                    self.timestamp.parent = self
                                    self._children_name_map["timestamp"] = "timestamp"
                                    self._children_yang_names.add("timestamp")
                                    self._segment_path = lambda: "generic-data"


                                class Timestamp(Entity):
                                    """
                                    Time in UTC relative to Jan 1st, 1970
                                    
                                    .. attribute:: seconds
                                    
                                    	Timestamp value (seconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: nano_seconds
                                    
                                    	Timestamp value (nanoseconds)
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp, self).__init__()

                                        self.yang_name = "timestamp"
                                        self.yang_parent_name = "generic-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('seconds', YLeaf(YType.uint32, 'seconds')),
                                            ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                        ])
                                        self.seconds = None
                                        self.nano_seconds = None
                                        self._segment_path = lambda: "timestamp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


                            class NewLspEntry(Entity):
                                """
                                Entry being inserted or the updated version of
                                an old entry.
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\: bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\: bool
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_partition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\: bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: max_area_addresses
                                
                                	max area addresses
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: id_length
                                
                                	System Id length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	isis version
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version2
                                
                                	isis version2
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry, self).__init__()

                                    self.yang_name = "new-lsp-entry"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                        ('local_lsp_flag', YLeaf(YType.boolean, 'local-lsp-flag')),
                                        ('lsp_active_flag', YLeaf(YType.boolean, 'lsp-active-flag')),
                                        ('lsp_holdtime', YLeaf(YType.uint16, 'lsp-holdtime')),
                                        ('lsp_sequence_number', YLeaf(YType.uint32, 'lsp-sequence-number')),
                                        ('lsp_checksum', YLeaf(YType.uint16, 'lsp-checksum')),
                                        ('lsp_partition_repair_supported_flag', YLeaf(YType.boolean, 'lsp-partition-repair-supported-flag')),
                                        ('lsp_attached_flag', YLeaf(YType.boolean, 'lsp-attached-flag')),
                                        ('lsp_overloaded_flag', YLeaf(YType.boolean, 'lsp-overloaded-flag')),
                                        ('lsp_nonv1a_flag', YLeaf(YType.uint16, 'lsp-nonv1a-flag')),
                                        ('lsp_level', YLeaf(YType.enumeration, 'lsp-level')),
                                        ('lsp_length', YLeaf(YType.uint16, 'lsp-length')),
                                        ('max_area_addresses', YLeaf(YType.uint8, 'max-area-addresses')),
                                        ('id_length', YLeaf(YType.uint8, 'id-length')),
                                        ('version', YLeaf(YType.uint8, 'version')),
                                        ('version2', YLeaf(YType.uint8, 'version2')),
                                    ])
                                    self.lsp_id = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_holdtime = None
                                    self.lsp_sequence_number = None
                                    self.lsp_checksum = None
                                    self.lsp_partition_repair_supported_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_level = None
                                    self.lsp_length = None
                                    self.max_area_addresses = None
                                    self.id_length = None
                                    self.version = None
                                    self.version2 = None
                                    self._segment_path = lambda: "new-lsp-entry"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.NewLspEntry, ['lsp_id', 'local_lsp_flag', 'lsp_active_flag', 'lsp_holdtime', 'lsp_sequence_number', 'lsp_checksum', 'lsp_partition_repair_supported_flag', 'lsp_attached_flag', 'lsp_overloaded_flag', 'lsp_nonv1a_flag', 'lsp_level', 'lsp_length', 'max_area_addresses', 'id_length', 'version', 'version2'], name, value)


                            class OldLspEntry(Entity):
                                """
                                Entry being replaced.
                                
                                .. attribute:: lsp_id
                                
                                	The LSP ID
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                .. attribute:: local_lsp_flag
                                
                                	TRUE if this is a locally generated LSP
                                	**type**\: bool
                                
                                .. attribute:: lsp_active_flag
                                
                                	TRUE if this LSP has not expired
                                	**type**\: bool
                                
                                .. attribute:: lsp_holdtime
                                
                                	Time, in seconds, until LSP expiry (if active) or deletion (if expired) 
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                .. attribute:: lsp_sequence_number
                                
                                	The LSP sequence number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_checksum
                                
                                	The LSP checksum
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_partition_repair_supported_flag
                                
                                	TRUE if partition repair is supported
                                	**type**\: bool
                                
                                .. attribute:: lsp_attached_flag
                                
                                	TRUE if attached bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_overloaded_flag
                                
                                	TRUE if the overload bit is set
                                	**type**\: bool
                                
                                .. attribute:: lsp_nonv1a_flag
                                
                                	TRUE if the LSP is non\-v1a, XXX for testing
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_level
                                
                                	The type of the IS sourcing the LSP
                                	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                                
                                .. attribute:: lsp_length
                                
                                	The total length of the LSP
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: max_area_addresses
                                
                                	max area addresses
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: id_length
                                
                                	System Id length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	isis version
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version2
                                
                                	isis version2
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry, self).__init__()

                                    self.yang_name = "old-lsp-entry"
                                    self.yang_parent_name = "log-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                                        ('local_lsp_flag', YLeaf(YType.boolean, 'local-lsp-flag')),
                                        ('lsp_active_flag', YLeaf(YType.boolean, 'lsp-active-flag')),
                                        ('lsp_holdtime', YLeaf(YType.uint16, 'lsp-holdtime')),
                                        ('lsp_sequence_number', YLeaf(YType.uint32, 'lsp-sequence-number')),
                                        ('lsp_checksum', YLeaf(YType.uint16, 'lsp-checksum')),
                                        ('lsp_partition_repair_supported_flag', YLeaf(YType.boolean, 'lsp-partition-repair-supported-flag')),
                                        ('lsp_attached_flag', YLeaf(YType.boolean, 'lsp-attached-flag')),
                                        ('lsp_overloaded_flag', YLeaf(YType.boolean, 'lsp-overloaded-flag')),
                                        ('lsp_nonv1a_flag', YLeaf(YType.uint16, 'lsp-nonv1a-flag')),
                                        ('lsp_level', YLeaf(YType.enumeration, 'lsp-level')),
                                        ('lsp_length', YLeaf(YType.uint16, 'lsp-length')),
                                        ('max_area_addresses', YLeaf(YType.uint8, 'max-area-addresses')),
                                        ('id_length', YLeaf(YType.uint8, 'id-length')),
                                        ('version', YLeaf(YType.uint8, 'version')),
                                        ('version2', YLeaf(YType.uint8, 'version2')),
                                    ])
                                    self.lsp_id = None
                                    self.local_lsp_flag = None
                                    self.lsp_active_flag = None
                                    self.lsp_holdtime = None
                                    self.lsp_sequence_number = None
                                    self.lsp_checksum = None
                                    self.lsp_partition_repair_supported_flag = None
                                    self.lsp_attached_flag = None
                                    self.lsp_overloaded_flag = None
                                    self.lsp_nonv1a_flag = None
                                    self.lsp_level = None
                                    self.lsp_length = None
                                    self.max_area_addresses = None
                                    self.id_length = None
                                    self.version = None
                                    self.version2 = None
                                    self._segment_path = lambda: "old-lsp-entry"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Levels.Level.DatabaseLog.LogEntry.OldLspEntry, ['lsp_id', 'local_lsp_flag', 'lsp_active_flag', 'lsp_holdtime', 'lsp_sequence_number', 'lsp_checksum', 'lsp_partition_repair_supported_flag', 'lsp_attached_flag', 'lsp_overloaded_flag', 'lsp_nonv1a_flag', 'lsp_level', 'lsp_length', 'max_area_addresses', 'id_length', 'version', 'version2'], name, value)


            class Topologies(Entity):
                """
                Topology table
                
                .. attribute:: topology
                
                	Per\-topology data
                	**type**\: list of  		 :py:class:`Topology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Topologies, self).__init__()

                    self.yang_name = "topologies"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("topology", ("topology", Isis.Instances.Instance.Topologies.Topology))])
                    self._leafs = OrderedDict()

                    self.topology = YList(self)
                    self._segment_path = lambda: "topologies"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.Topologies, [], name, value)


                class Topology(Entity):
                    """
                    Per\-topology data
                    
                    .. attribute:: frr_summary
                    
                    	FRR summary information for a particular IS\-IS topology
                    	**type**\:  :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary>`
                    
                    .. attribute:: topology_levels
                    
                    	Per\-topology level table
                    	**type**\:  :py:class:`TopologyLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels>`
                    
                    .. attribute:: ipv6_routes
                    
                    	IPv6 local route
                    	**type**\:  :py:class:`Ipv6Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes>`
                    
                    .. attribute:: ipv6frr_backups
                    
                    	IPv6 FRR table
                    	**type**\:  :py:class:`Ipv6FrrBackups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups>`
                    
                    .. attribute:: ipv4frr_backups
                    
                    	IPv4 FRR table
                    	**type**\:  :py:class:`Ipv4FrrBackups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups>`
                    
                    .. attribute:: ipv4_routes
                    
                    	IPv4 local route table
                    	**type**\:  :py:class:`Ipv4Routes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes>`
                    
                    .. attribute:: af_name
                    
                    	Address family
                    	**type**\:  :py:class:`IsisAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisAddressFamily>`
                    
                    .. attribute:: saf_name
                    
                    	Sub address family
                    	**type**\:  :py:class:`IsisSubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisSubAddressFamily>`
                    
                    .. attribute:: topology_name
                    
                    	Topology Name
                    	**type**\: str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Topologies.Topology, self).__init__()

                        self.yang_name = "topology"
                        self.yang_parent_name = "topologies"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("frr-summary", ("frr_summary", Isis.Instances.Instance.Topologies.Topology.FrrSummary)), ("topology-levels", ("topology_levels", Isis.Instances.Instance.Topologies.Topology.TopologyLevels)), ("ipv6-routes", ("ipv6_routes", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes)), ("ipv6frr-backups", ("ipv6frr_backups", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups)), ("ipv4frr-backups", ("ipv4frr_backups", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups)), ("ipv4-routes", ("ipv4_routes", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                            ('topology_name', YLeaf(YType.str, 'topology-name')),
                        ])
                        self.af_name = None
                        self.saf_name = None
                        self.topology_name = None

                        self.frr_summary = Isis.Instances.Instance.Topologies.Topology.FrrSummary()
                        self.frr_summary.parent = self
                        self._children_name_map["frr_summary"] = "frr-summary"
                        self._children_yang_names.add("frr-summary")

                        self.topology_levels = Isis.Instances.Instance.Topologies.Topology.TopologyLevels()
                        self.topology_levels.parent = self
                        self._children_name_map["topology_levels"] = "topology-levels"
                        self._children_yang_names.add("topology-levels")

                        self.ipv6_routes = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes()
                        self.ipv6_routes.parent = self
                        self._children_name_map["ipv6_routes"] = "ipv6-routes"
                        self._children_yang_names.add("ipv6-routes")

                        self.ipv6frr_backups = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups()
                        self.ipv6frr_backups.parent = self
                        self._children_name_map["ipv6frr_backups"] = "ipv6frr-backups"
                        self._children_yang_names.add("ipv6frr-backups")

                        self.ipv4frr_backups = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups()
                        self.ipv4frr_backups.parent = self
                        self._children_name_map["ipv4frr_backups"] = "ipv4frr-backups"
                        self._children_yang_names.add("ipv4frr-backups")

                        self.ipv4_routes = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes()
                        self.ipv4_routes.parent = self
                        self._children_name_map["ipv4_routes"] = "ipv4-routes"
                        self._children_yang_names.add("ipv4-routes")
                        self._segment_path = lambda: "topology"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology, ['af_name', 'saf_name', 'topology_name'], name, value)


                    class FrrSummary(Entity):
                        """
                        FRR summary information for a particular
                        IS\-IS topology
                        
                        .. attribute:: level1_prefixes
                        
                        	FRR summary for prefixes reachable in L1
                        	**type**\:  :py:class:`Level1Prefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes>`
                        
                        .. attribute:: level2_prefixes
                        
                        	FRR summary for prefixes reachable in L2
                        	**type**\:  :py:class:`Level2Prefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes>`
                        
                        .. attribute:: unreachable_prefixes
                        
                        	Unreachable prefixes
                        	**type**\:  :py:class:`UnreachablePrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.FrrSummary, self).__init__()

                            self.yang_name = "frr-summary"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("level1-prefixes", ("level1_prefixes", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes)), ("level2-prefixes", ("level2_prefixes", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes)), ("unreachable-prefixes", ("unreachable_prefixes", Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.level1_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes()
                            self.level1_prefixes.parent = self
                            self._children_name_map["level1_prefixes"] = "level1-prefixes"
                            self._children_yang_names.add("level1-prefixes")

                            self.level2_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes()
                            self.level2_prefixes.parent = self
                            self._children_name_map["level2_prefixes"] = "level2-prefixes"
                            self._children_yang_names.add("level2-prefixes")

                            self.unreachable_prefixes = Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes()
                            self.unreachable_prefixes.parent = self
                            self._children_name_map["unreachable_prefixes"] = "unreachable-prefixes"
                            self._children_yang_names.add("unreachable-prefixes")
                            self._segment_path = lambda: "frr-summary"


                        class Level1Prefixes(Entity):
                            """
                            FRR summary for prefixes reachable in L1
                            
                            .. attribute:: all_paths_protected
                            
                            	Number of prefixes with all paths having FRR backup
                            	**type**\:  :py:class:`AllPathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected>`
                            
                            .. attribute:: some_paths_protected
                            
                            	Number of prefixes with some paths having FRR backup
                            	**type**\:  :py:class:`SomePathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected>`
                            
                            .. attribute:: unprotected
                            
                            	Number of reachable prefixes without FRR backup
                            	**type**\:  :py:class:`Unprotected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes, self).__init__()

                                self.yang_name = "level1-prefixes"
                                self.yang_parent_name = "frr-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("all-paths-protected", ("all_paths_protected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected)), ("some-paths-protected", ("some_paths_protected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected)), ("unprotected", ("unprotected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.all_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected()
                                self.all_paths_protected.parent = self
                                self._children_name_map["all_paths_protected"] = "all-paths-protected"
                                self._children_yang_names.add("all-paths-protected")

                                self.some_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected()
                                self.some_paths_protected.parent = self
                                self._children_name_map["some_paths_protected"] = "some-paths-protected"
                                self._children_yang_names.add("some-paths-protected")

                                self.unprotected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected()
                                self.unprotected.parent = self
                                self._children_name_map["unprotected"] = "unprotected"
                                self._children_yang_names.add("unprotected")
                                self._segment_path = lambda: "level1-prefixes"


                            class AllPathsProtected(Entity):
                                """
                                Number of prefixes with all paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected, self).__init__()

                                    self.yang_name = "all-paths-protected"
                                    self.yang_parent_name = "level1-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "all-paths-protected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.AllPathsProtected, ['critical', 'high', 'medium', 'low'], name, value)


                            class SomePathsProtected(Entity):
                                """
                                Number of prefixes with some paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected, self).__init__()

                                    self.yang_name = "some-paths-protected"
                                    self.yang_parent_name = "level1-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "some-paths-protected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.SomePathsProtected, ['critical', 'high', 'medium', 'low'], name, value)


                            class Unprotected(Entity):
                                """
                                Number of reachable prefixes without FRR backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected, self).__init__()

                                    self.yang_name = "unprotected"
                                    self.yang_parent_name = "level1-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "unprotected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level1Prefixes.Unprotected, ['critical', 'high', 'medium', 'low'], name, value)


                        class Level2Prefixes(Entity):
                            """
                            FRR summary for prefixes reachable in L2
                            
                            .. attribute:: all_paths_protected
                            
                            	Number of prefixes with all paths having FRR backup
                            	**type**\:  :py:class:`AllPathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected>`
                            
                            .. attribute:: some_paths_protected
                            
                            	Number of prefixes with some paths having FRR backup
                            	**type**\:  :py:class:`SomePathsProtected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected>`
                            
                            .. attribute:: unprotected
                            
                            	Number of reachable prefixes without FRR backup
                            	**type**\:  :py:class:`Unprotected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes, self).__init__()

                                self.yang_name = "level2-prefixes"
                                self.yang_parent_name = "frr-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("all-paths-protected", ("all_paths_protected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected)), ("some-paths-protected", ("some_paths_protected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected)), ("unprotected", ("unprotected", Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.all_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected()
                                self.all_paths_protected.parent = self
                                self._children_name_map["all_paths_protected"] = "all-paths-protected"
                                self._children_yang_names.add("all-paths-protected")

                                self.some_paths_protected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected()
                                self.some_paths_protected.parent = self
                                self._children_name_map["some_paths_protected"] = "some-paths-protected"
                                self._children_yang_names.add("some-paths-protected")

                                self.unprotected = Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected()
                                self.unprotected.parent = self
                                self._children_name_map["unprotected"] = "unprotected"
                                self._children_yang_names.add("unprotected")
                                self._segment_path = lambda: "level2-prefixes"


                            class AllPathsProtected(Entity):
                                """
                                Number of prefixes with all paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected, self).__init__()

                                    self.yang_name = "all-paths-protected"
                                    self.yang_parent_name = "level2-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "all-paths-protected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.AllPathsProtected, ['critical', 'high', 'medium', 'low'], name, value)


                            class SomePathsProtected(Entity):
                                """
                                Number of prefixes with some paths having FRR
                                backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected, self).__init__()

                                    self.yang_name = "some-paths-protected"
                                    self.yang_parent_name = "level2-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "some-paths-protected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.SomePathsProtected, ['critical', 'high', 'medium', 'low'], name, value)


                            class Unprotected(Entity):
                                """
                                Number of reachable prefixes without FRR backup
                                
                                .. attribute:: critical
                                
                                	Critical priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: high
                                
                                	High priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: medium
                                
                                	Medium priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: low
                                
                                	Low priority
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected, self).__init__()

                                    self.yang_name = "unprotected"
                                    self.yang_parent_name = "level2-prefixes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                        ('high', YLeaf(YType.uint32, 'high')),
                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                        ('low', YLeaf(YType.uint32, 'low')),
                                    ])
                                    self.critical = None
                                    self.high = None
                                    self.medium = None
                                    self.low = None
                                    self._segment_path = lambda: "unprotected"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.Level2Prefixes.Unprotected, ['critical', 'high', 'medium', 'low'], name, value)


                        class UnreachablePrefixes(Entity):
                            """
                            Unreachable prefixes
                            
                            .. attribute:: critical
                            
                            	Critical priority
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: high
                            
                            	High priority
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: medium
                            
                            	Medium priority
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: low
                            
                            	Low priority
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes, self).__init__()

                                self.yang_name = "unreachable-prefixes"
                                self.yang_parent_name = "frr-summary"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('critical', YLeaf(YType.uint32, 'critical')),
                                    ('high', YLeaf(YType.uint32, 'high')),
                                    ('medium', YLeaf(YType.uint32, 'medium')),
                                    ('low', YLeaf(YType.uint32, 'low')),
                                ])
                                self.critical = None
                                self.high = None
                                self.medium = None
                                self.low = None
                                self._segment_path = lambda: "unreachable-prefixes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.FrrSummary.UnreachablePrefixes, ['critical', 'high', 'medium', 'low'], name, value)


                    class TopologyLevels(Entity):
                        """
                        Per\-topology level table
                        
                        .. attribute:: topology_level
                        
                        	Per\-level topology operational data
                        	**type**\: list of  		 :py:class:`TopologyLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels, self).__init__()

                            self.yang_name = "topology-levels"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("topology-level", ("topology_level", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel))])
                            self._leafs = OrderedDict()

                            self.topology_level = YList(self)
                            self._segment_path = lambda: "topology-levels"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels, [], name, value)


                        class TopologyLevel(Entity):
                            """
                            Per\-level topology operational data
                            
                            .. attribute:: level  (key)
                            
                            	Level
                            	**type**\:  :py:class:`IsisInternalLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevel>`
                            
                            .. attribute:: te_advertisements
                            
                            	TE advertisements for a single level and topology. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeAdvertisements <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements>`
                            
                            .. attribute:: te_adjacency_log
                            
                            	TE adjacency\-log for a single level and topology. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeAdjacencyLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog>`
                            
                            .. attribute:: spf_log
                            
                            	Log of route calculations for a single level and topology
                            	**type**\:  :py:class:`SpfLog <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog>`
                            
                            .. attribute:: te_tunnels
                            
                            	TE tunnels table. Only available within the IPv4 Unicast topology
                            	**type**\:  :py:class:`TeTunnels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels>`
                            
                            .. attribute:: ipv4_link_topologies
                            
                            	IPv4 IS Topology table
                            	**type**\:  :py:class:`Ipv4LinkTopologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies>`
                            
                            .. attribute:: topology_summary
                            
                            	Summary information for a particular IS Topology
                            	**type**\:  :py:class:`TopologySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary>`
                            
                            .. attribute:: ipv6_link_topologies
                            
                            	IPv6 IS Topology table
                            	**type**\:  :py:class:`Ipv6LinkTopologies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel, self).__init__()

                                self.yang_name = "topology-level"
                                self.yang_parent_name = "topology-levels"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['level']
                                self._child_container_classes = OrderedDict([("te-advertisements", ("te_advertisements", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements)), ("te-adjacency-log", ("te_adjacency_log", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog)), ("spf-log", ("spf_log", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog)), ("te-tunnels", ("te_tunnels", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels)), ("ipv4-link-topologies", ("ipv4_link_topologies", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies)), ("topology-summary", ("topology_summary", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary)), ("ipv6-link-topologies", ("ipv6_link_topologies", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('level', YLeaf(YType.enumeration, 'level')),
                                ])
                                self.level = None

                                self.te_advertisements = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements()
                                self.te_advertisements.parent = self
                                self._children_name_map["te_advertisements"] = "te-advertisements"
                                self._children_yang_names.add("te-advertisements")

                                self.te_adjacency_log = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog()
                                self.te_adjacency_log.parent = self
                                self._children_name_map["te_adjacency_log"] = "te-adjacency-log"
                                self._children_yang_names.add("te-adjacency-log")

                                self.spf_log = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog()
                                self.spf_log.parent = self
                                self._children_name_map["spf_log"] = "spf-log"
                                self._children_yang_names.add("spf-log")

                                self.te_tunnels = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels()
                                self.te_tunnels.parent = self
                                self._children_name_map["te_tunnels"] = "te-tunnels"
                                self._children_yang_names.add("te-tunnels")

                                self.ipv4_link_topologies = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies()
                                self.ipv4_link_topologies.parent = self
                                self._children_name_map["ipv4_link_topologies"] = "ipv4-link-topologies"
                                self._children_yang_names.add("ipv4-link-topologies")

                                self.topology_summary = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary()
                                self.topology_summary.parent = self
                                self._children_name_map["topology_summary"] = "topology-summary"
                                self._children_yang_names.add("topology-summary")

                                self.ipv6_link_topologies = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies()
                                self.ipv6_link_topologies.parent = self
                                self._children_name_map["ipv6_link_topologies"] = "ipv6-link-topologies"
                                self._children_yang_names.add("ipv6-link-topologies")
                                self._segment_path = lambda: "topology-level" + "[level='" + str(self.level) + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel, ['level'], name, value)


                            class TeAdvertisements(Entity):
                                """
                                TE advertisements for a single level and
                                topology. Only available within the IPv4
                                Unicast topology.
                                
                                .. attribute:: tepceadv
                                
                                	TE PCE advertisements
                                	**type**\:  :py:class:`Tepceadv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv>`
                                
                                .. attribute:: te_adv_data_present
                                
                                	Indicates whether any TE advertisements are present
                                	**type**\: bool
                                
                                .. attribute:: te_system_id
                                
                                	Local system ID
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                
                                .. attribute:: te_local_router_id
                                
                                	Local TE router ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: te_adv
                                
                                	List of TE advertisement entries
                                	**type**\: list of  		 :py:class:`TeAdv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements, self).__init__()

                                    self.yang_name = "te-advertisements"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("tepceadv", ("tepceadv", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv))])
                                    self._child_list_classes = OrderedDict([("te-adv", ("te_adv", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv))])
                                    self._leafs = OrderedDict([
                                        ('te_adv_data_present', YLeaf(YType.boolean, 'te-adv-data-present')),
                                        ('te_system_id', YLeaf(YType.str, 'te-system-id')),
                                        ('te_local_router_id', YLeaf(YType.str, 'te-local-router-id')),
                                    ])
                                    self.te_adv_data_present = None
                                    self.te_system_id = None
                                    self.te_local_router_id = None

                                    self.tepceadv = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv()
                                    self.tepceadv.parent = self
                                    self._children_name_map["tepceadv"] = "tepceadv"
                                    self._children_yang_names.add("tepceadv")

                                    self.te_adv = YList(self)
                                    self._segment_path = lambda: "te-advertisements"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements, ['te_adv_data_present', 'te_system_id', 'te_local_router_id'], name, value)


                                class Tepceadv(Entity):
                                    """
                                    TE PCE advertisements
                                    
                                    .. attribute:: pce_adv_data_present
                                    
                                    	Indicates whether any PCE advertisements are present
                                    	**type**\: bool
                                    
                                    .. attribute:: pce_flooding_scope
                                    
                                    	Flooding scope for PCE advertisement
                                    	**type**\:  :py:class:`IsisShTePceFloodingScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShTePceFloodingScope>`
                                    
                                    .. attribute:: pce_address_ipv4
                                    
                                    	IPv4 PCE address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pce_path_scope_bits
                                    
                                    	PCE path scope bits
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pce_path_scope_prefs
                                    
                                    	PCE path scope preferences
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv, self).__init__()

                                        self.yang_name = "tepceadv"
                                        self.yang_parent_name = "te-advertisements"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('pce_adv_data_present', YLeaf(YType.boolean, 'pce-adv-data-present')),
                                            ('pce_flooding_scope', YLeaf(YType.enumeration, 'pce-flooding-scope')),
                                            ('pce_address_ipv4', YLeaf(YType.str, 'pce-address-ipv4')),
                                            ('pce_path_scope_bits', YLeaf(YType.uint8, 'pce-path-scope-bits')),
                                            ('pce_path_scope_prefs', YLeaf(YType.uint16, 'pce-path-scope-prefs')),
                                        ])
                                        self.pce_adv_data_present = None
                                        self.pce_flooding_scope = None
                                        self.pce_address_ipv4 = None
                                        self.pce_path_scope_bits = None
                                        self.pce_path_scope_prefs = None
                                        self._segment_path = lambda: "tepceadv"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.Tepceadv, ['pce_adv_data_present', 'pce_flooding_scope', 'pce_address_ipv4', 'pce_path_scope_bits', 'pce_path_scope_prefs'], name, value)


                                class TeAdv(Entity):
                                    """
                                    List of TE advertisement entries
                                    
                                    .. attribute:: te_neighbor_system_id
                                    
                                    	Neighbor system ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: link_type
                                    
                                    	Link type
                                    	**type**\:  :py:class:`IsisShTeLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShTeLink>`
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local IP address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_neighbor_ip_address
                                    
                                    	Neighbor IP address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_metric
                                    
                                    	TE metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_physical_link_bandwidth
                                    
                                    	Physical link bandwidth
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_reserved_link_bandwidth
                                    
                                    	Reservable link bandwidth in global pool
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_subpool_reserved_link_bandwidth
                                    
                                    	Reservable link bandwidth in subpool
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_affinity
                                    
                                    	Affinity bits
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_ext_admin_num
                                    
                                    	TE Ext Admin Number
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_sub_tlv_data_present
                                    
                                    	Indicates whether any TE sub TLVs are present
                                    	**type**\: bool
                                    
                                    .. attribute:: te_transmitted_bandwidth
                                    
                                    	Bandwidth in use in global pool
                                    	**type**\: list of  		 :py:class:`TeTransmittedBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeTransmittedBandwidth>`
                                    
                                    .. attribute:: te_subpool_transmitted_bandwidth
                                    
                                    	Bandwidth in use in subpool
                                    	**type**\: list of  		 :py:class:`TeSubpoolTransmittedBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubpoolTransmittedBandwidth>`
                                    
                                    .. attribute:: te_ext_admin_sub
                                    
                                    	TE Extended Admin Group
                                    	**type**\: list of  		 :py:class:`TeExtAdminSub <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeExtAdminSub>`
                                    
                                    .. attribute:: te_sub_tlv
                                    
                                    	List of TE sub TLVs
                                    	**type**\: list of  		 :py:class:`TeSubTlv <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv, self).__init__()

                                        self.yang_name = "te-adv"
                                        self.yang_parent_name = "te-advertisements"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("te-transmitted-bandwidth", ("te_transmitted_bandwidth", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeTransmittedBandwidth)), ("te-subpool-transmitted-bandwidth", ("te_subpool_transmitted_bandwidth", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubpoolTransmittedBandwidth)), ("te-ext-admin-sub", ("te_ext_admin_sub", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeExtAdminSub)), ("te-sub-tlv", ("te_sub_tlv", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv))])
                                        self._leafs = OrderedDict([
                                            ('te_neighbor_system_id', YLeaf(YType.str, 'te-neighbor-system-id')),
                                            ('link_type', YLeaf(YType.enumeration, 'link-type')),
                                            ('local_ip_address', YLeaf(YType.str, 'local-ip-address')),
                                            ('te_neighbor_ip_address', YLeaf(YType.str, 'te-neighbor-ip-address')),
                                            ('te_metric', YLeaf(YType.uint32, 'te-metric')),
                                            ('te_physical_link_bandwidth', YLeaf(YType.uint32, 'te-physical-link-bandwidth')),
                                            ('te_reserved_link_bandwidth', YLeaf(YType.uint32, 'te-reserved-link-bandwidth')),
                                            ('te_subpool_reserved_link_bandwidth', YLeaf(YType.uint32, 'te-subpool-reserved-link-bandwidth')),
                                            ('te_affinity', YLeaf(YType.uint32, 'te-affinity')),
                                            ('te_ext_admin_num', YLeaf(YType.uint32, 'te-ext-admin-num')),
                                            ('te_sub_tlv_data_present', YLeaf(YType.boolean, 'te-sub-tlv-data-present')),
                                        ])
                                        self.te_neighbor_system_id = None
                                        self.link_type = None
                                        self.local_ip_address = None
                                        self.te_neighbor_ip_address = None
                                        self.te_metric = None
                                        self.te_physical_link_bandwidth = None
                                        self.te_reserved_link_bandwidth = None
                                        self.te_subpool_reserved_link_bandwidth = None
                                        self.te_affinity = None
                                        self.te_ext_admin_num = None
                                        self.te_sub_tlv_data_present = None

                                        self.te_transmitted_bandwidth = YList(self)
                                        self.te_subpool_transmitted_bandwidth = YList(self)
                                        self.te_ext_admin_sub = YList(self)
                                        self.te_sub_tlv = YList(self)
                                        self._segment_path = lambda: "te-adv"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv, ['te_neighbor_system_id', 'link_type', 'local_ip_address', 'te_neighbor_ip_address', 'te_metric', 'te_physical_link_bandwidth', 'te_reserved_link_bandwidth', 'te_subpool_reserved_link_bandwidth', 'te_affinity', 'te_ext_admin_num', 'te_sub_tlv_data_present'], name, value)


                                    class TeTransmittedBandwidth(Entity):
                                        """
                                        Bandwidth in use in global pool
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeTransmittedBandwidth, self).__init__()

                                            self.yang_name = "te-transmitted-bandwidth"
                                            self.yang_parent_name = "te-adv"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "te-transmitted-bandwidth"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeTransmittedBandwidth, ['entry'], name, value)


                                    class TeSubpoolTransmittedBandwidth(Entity):
                                        """
                                        Bandwidth in use in subpool
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubpoolTransmittedBandwidth, self).__init__()

                                            self.yang_name = "te-subpool-transmitted-bandwidth"
                                            self.yang_parent_name = "te-adv"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "te-subpool-transmitted-bandwidth"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubpoolTransmittedBandwidth, ['entry'], name, value)


                                    class TeExtAdminSub(Entity):
                                        """
                                        TE Extended Admin Group
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeExtAdminSub, self).__init__()

                                            self.yang_name = "te-ext-admin-sub"
                                            self.yang_parent_name = "te-adv"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "te-ext-admin-sub"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeExtAdminSub, ['entry'], name, value)


                                    class TeSubTlv(Entity):
                                        """
                                        List of TE sub TLVs
                                        
                                        .. attribute:: te_sub_tlv_type
                                        
                                        	Type of sub TLV
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: te_sub_tlv_length
                                        
                                        	Length of sub TLV
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: te_sub_tlv_value
                                        
                                        	Value of sub TLV
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv, self).__init__()

                                            self.yang_name = "te-sub-tlv"
                                            self.yang_parent_name = "te-adv"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('te_sub_tlv_type', YLeaf(YType.uint16, 'te-sub-tlv-type')),
                                                ('te_sub_tlv_length', YLeaf(YType.uint16, 'te-sub-tlv-length')),
                                                ('te_sub_tlv_value', YLeaf(YType.str, 'te-sub-tlv-value')),
                                            ])
                                            self.te_sub_tlv_type = None
                                            self.te_sub_tlv_length = None
                                            self.te_sub_tlv_value = None
                                            self._segment_path = lambda: "te-sub-tlv"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdvertisements.TeAdv.TeSubTlv, ['te_sub_tlv_type', 'te_sub_tlv_length', 'te_sub_tlv_value'], name, value)


                            class TeAdjacencyLog(Entity):
                                """
                                TE adjacency\-log for a single level and
                                topology. Only available within the IPv4
                                Unicast topology.
                                
                                .. attribute:: log_entry
                                
                                	Log entries
                                	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog, self).__init__()

                                    self.yang_name = "te-adjacency-log"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry))])
                                    self._leafs = OrderedDict()

                                    self.log_entry = YList(self)
                                    self._segment_path = lambda: "te-adjacency-log"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog, [], name, value)


                                class LogEntry(Entity):
                                    """
                                    Log entries
                                    
                                    .. attribute:: generic_data
                                    
                                    	Generic entry data
                                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData>`
                                    
                                    .. attribute:: neighbor_ip_address
                                    
                                    	Neighbor ip address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: status
                                    
                                    	Up (TRUE) or down
                                    	**type**\: bool
                                    
                                    .. attribute:: log_interface
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: te_log_neighbor_system_id
                                    
                                    	Neighbor system ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry, self).__init__()

                                        self.yang_name = "log-entry"
                                        self.yang_parent_name = "te-adjacency-log"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('neighbor_ip_address', YLeaf(YType.str, 'neighbor-ip-address')),
                                            ('status', YLeaf(YType.boolean, 'status')),
                                            ('log_interface', YLeaf(YType.str, 'log-interface')),
                                            ('te_log_neighbor_system_id', YLeaf(YType.str, 'te-log-neighbor-system-id')),
                                        ])
                                        self.neighbor_ip_address = None
                                        self.status = None
                                        self.log_interface = None
                                        self.te_log_neighbor_system_id = None

                                        self.generic_data = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData()
                                        self.generic_data.parent = self
                                        self._children_name_map["generic_data"] = "generic-data"
                                        self._children_yang_names.add("generic-data")
                                        self._segment_path = lambda: "log-entry"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry, ['neighbor_ip_address', 'status', 'log_interface', 'te_log_neighbor_system_id'], name, value)


                                    class GenericData(Entity):
                                        """
                                        Generic entry data
                                        
                                        .. attribute:: timestamp
                                        
                                        	Time in UTC relative to Jan 1st, 1970
                                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData, self).__init__()

                                            self.yang_name = "generic-data"
                                            self.yang_parent_name = "log-entry"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.timestamp = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp()
                                            self.timestamp.parent = self
                                            self._children_name_map["timestamp"] = "timestamp"
                                            self._children_yang_names.add("timestamp")
                                            self._segment_path = lambda: "generic-data"


                                        class Timestamp(Entity):
                                            """
                                            Time in UTC relative to Jan 1st, 1970
                                            
                                            .. attribute:: seconds
                                            
                                            	Timestamp value (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: nano_seconds
                                            
                                            	Timestamp value (nanoseconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: nanosecond
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp, self).__init__()

                                                self.yang_name = "timestamp"
                                                self.yang_parent_name = "generic-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                                ])
                                                self.seconds = None
                                                self.nano_seconds = None
                                                self._segment_path = lambda: "timestamp"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeAdjacencyLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


                            class SpfLog(Entity):
                                """
                                Log of route calculations for a single
                                level and topology
                                
                                .. attribute:: log_entry
                                
                                	SPF Log entries
                                	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog, self).__init__()

                                    self.yang_name = "spf-log"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry))])
                                    self._leafs = OrderedDict()

                                    self.log_entry = YList(self)
                                    self._segment_path = lambda: "spf-log"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog, [], name, value)


                                class LogEntry(Entity):
                                    """
                                    SPF Log entries
                                    
                                    .. attribute:: generic_data
                                    
                                    	Generic entry data
                                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData>`
                                    
                                    .. attribute:: triggers
                                    
                                    	Trigger information
                                    	**type**\:  :py:class:`Triggers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers>`
                                    
                                    .. attribute:: spt_calculation_statistics
                                    
                                    	Statistics for the SPT calculation phase
                                    	**type**\:  :py:class:`SptCalculationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics>`
                                    
                                    .. attribute:: route_update_statistics
                                    
                                    	Statistics for the route update phase
                                    	**type**\:  :py:class:`RouteUpdateStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics>`
                                    
                                    .. attribute:: class_
                                    
                                    	Type of calculation
                                    	**type**\:  :py:class:`IsisSpfClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSpfClass>`
                                    
                                    .. attribute:: wait_enforced
                                    
                                    	Time between the first trigger and the start of the route calculation, in milliseconds
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: next_wait_interval
                                    
                                    	Minimum time from end of this route calculation until the start of the next, in milliseconds
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: updated_lsp_count
                                    
                                    	Number of LSPs which arrived during the route calculation
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry, self).__init__()

                                        self.yang_name = "log-entry"
                                        self.yang_parent_name = "spf-log"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData)), ("triggers", ("triggers", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers)), ("spt-calculation-statistics", ("spt_calculation_statistics", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics)), ("route-update-statistics", ("route_update_statistics", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('class_', YLeaf(YType.enumeration, 'class')),
                                            ('wait_enforced', YLeaf(YType.uint32, 'wait-enforced')),
                                            ('next_wait_interval', YLeaf(YType.uint32, 'next-wait-interval')),
                                            ('updated_lsp_count', YLeaf(YType.uint32, 'updated-lsp-count')),
                                        ])
                                        self.class_ = None
                                        self.wait_enforced = None
                                        self.next_wait_interval = None
                                        self.updated_lsp_count = None

                                        self.generic_data = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData()
                                        self.generic_data.parent = self
                                        self._children_name_map["generic_data"] = "generic-data"
                                        self._children_yang_names.add("generic-data")

                                        self.triggers = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers()
                                        self.triggers.parent = self
                                        self._children_name_map["triggers"] = "triggers"
                                        self._children_yang_names.add("triggers")

                                        self.spt_calculation_statistics = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics()
                                        self.spt_calculation_statistics.parent = self
                                        self._children_name_map["spt_calculation_statistics"] = "spt-calculation-statistics"
                                        self._children_yang_names.add("spt-calculation-statistics")

                                        self.route_update_statistics = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics()
                                        self.route_update_statistics.parent = self
                                        self._children_name_map["route_update_statistics"] = "route-update-statistics"
                                        self._children_yang_names.add("route-update-statistics")
                                        self._segment_path = lambda: "log-entry"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry, ['class_', 'wait_enforced', 'next_wait_interval', 'updated_lsp_count'], name, value)


                                    class GenericData(Entity):
                                        """
                                        Generic entry data.
                                        
                                        .. attribute:: timestamp
                                        
                                        	Time in UTC relative to Jan 1st, 1970
                                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData, self).__init__()

                                            self.yang_name = "generic-data"
                                            self.yang_parent_name = "log-entry"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.timestamp = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp()
                                            self.timestamp.parent = self
                                            self._children_name_map["timestamp"] = "timestamp"
                                            self._children_yang_names.add("timestamp")
                                            self._segment_path = lambda: "generic-data"


                                        class Timestamp(Entity):
                                            """
                                            Time in UTC relative to Jan 1st, 1970
                                            
                                            .. attribute:: seconds
                                            
                                            	Timestamp value (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: nano_seconds
                                            
                                            	Timestamp value (nanoseconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: nanosecond
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp, self).__init__()

                                                self.yang_name = "timestamp"
                                                self.yang_parent_name = "generic-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                                ])
                                                self.seconds = None
                                                self.nano_seconds = None
                                                self._segment_path = lambda: "timestamp"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


                                    class Triggers(Entity):
                                        """
                                        Trigger information
                                        
                                        .. attribute:: trigger_prefix
                                        
                                        	ID of a changed prefix in the first trigger LSP, if any
                                        	**type**\:  :py:class:`TriggerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix>`
                                        
                                        .. attribute:: unique_trigger_count
                                        
                                        	Number of unique triggers on this run
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: first_trigger_lsp_id
                                        
                                        	ID of the first LSP to trigger the calculation, if any
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                        
                                        .. attribute:: trigger_link
                                        
                                        	ID of a changed link in the first trigger LSP, if any
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                        
                                        .. attribute:: trigger_next_hop_id
                                        
                                        	ID of a changed next hop, if any
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                        
                                        .. attribute:: is_sr_uloop_calculation
                                        
                                        	Is this SR micro loop calculation?
                                        	**type**\: bool
                                        
                                        .. attribute:: is_sr_uloop_link_down
                                        
                                        	Is this SR micro loop calculation for link down?
                                        	**type**\: bool
                                        
                                        .. attribute:: trigger
                                        
                                        	Triggers applying to this log entry
                                        	**type**\: list of  		 :py:class:`Trigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.Trigger>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers, self).__init__()

                                            self.yang_name = "triggers"
                                            self.yang_parent_name = "log-entry"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("trigger-prefix", ("trigger_prefix", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix))])
                                            self._child_list_classes = OrderedDict([("trigger", ("trigger", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.Trigger))])
                                            self._leafs = OrderedDict([
                                                ('unique_trigger_count', YLeaf(YType.uint32, 'unique-trigger-count')),
                                                ('first_trigger_lsp_id', YLeaf(YType.str, 'first-trigger-lsp-id')),
                                                ('trigger_link', YLeaf(YType.str, 'trigger-link')),
                                                ('trigger_next_hop_id', YLeaf(YType.str, 'trigger-next-hop-id')),
                                                ('is_sr_uloop_calculation', YLeaf(YType.boolean, 'is-sr-uloop-calculation')),
                                                ('is_sr_uloop_link_down', YLeaf(YType.boolean, 'is-sr-uloop-link-down')),
                                            ])
                                            self.unique_trigger_count = None
                                            self.first_trigger_lsp_id = None
                                            self.trigger_link = None
                                            self.trigger_next_hop_id = None
                                            self.is_sr_uloop_calculation = None
                                            self.is_sr_uloop_link_down = None

                                            self.trigger_prefix = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix()
                                            self.trigger_prefix.parent = self
                                            self._children_name_map["trigger_prefix"] = "trigger-prefix"
                                            self._children_yang_names.add("trigger-prefix")

                                            self.trigger = YList(self)
                                            self._segment_path = lambda: "triggers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers, ['unique_trigger_count', 'first_trigger_lsp_id', 'trigger_link', 'trigger_next_hop_id', 'is_sr_uloop_calculation', 'is_sr_uloop_link_down'], name, value)


                                        class TriggerPrefix(Entity):
                                            """
                                            ID of a changed prefix in the first trigger LSP,
                                            if any
                                            
                                            .. attribute:: ipv4
                                            
                                            	ipv4
                                            	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4>`
                                            
                                            .. attribute:: ipv6
                                            
                                            	ipv6
                                            	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6>`
                                            
                                            .. attribute:: af_name
                                            
                                            	AFName
                                            	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix, self).__init__()

                                                self.yang_name = "trigger-prefix"
                                                self.yang_parent_name = "triggers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4)), ("ipv6", ("ipv6", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                                ])
                                                self.af_name = None

                                                self.ipv4 = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4()
                                                self.ipv4.parent = self
                                                self._children_name_map["ipv4"] = "ipv4"
                                                self._children_yang_names.add("ipv4")

                                                self.ipv6 = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6()
                                                self.ipv6.parent = self
                                                self._children_name_map["ipv6"] = "ipv6"
                                                self._children_yang_names.add("ipv6")
                                                self._segment_path = lambda: "trigger-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix, ['af_name'], name, value)


                                            class Ipv4(Entity):
                                                """
                                                ipv4
                                                
                                                .. attribute:: prefix
                                                
                                                	prefix
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: prefix_length
                                                
                                                	prefix length
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4, self).__init__()

                                                    self.yang_name = "ipv4"
                                                    self.yang_parent_name = "trigger-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                                    ])
                                                    self.prefix = None
                                                    self.prefix_length = None
                                                    self._segment_path = lambda: "ipv4"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv4, ['prefix', 'prefix_length'], name, value)


                                            class Ipv6(Entity):
                                                """
                                                ipv6
                                                
                                                .. attribute:: prefix
                                                
                                                	prefix
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: prefix_length
                                                
                                                	prefix length
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6, self).__init__()

                                                    self.yang_name = "ipv6"
                                                    self.yang_parent_name = "trigger-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                                    ])
                                                    self.prefix = None
                                                    self.prefix_length = None
                                                    self._segment_path = lambda: "ipv6"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.TriggerPrefix.Ipv6, ['prefix', 'prefix_length'], name, value)


                                        class Trigger(Entity):
                                            """
                                            Triggers applying to this log entry
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\:  :py:class:`IsisSpfTrigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSpfTrigger>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.Trigger, self).__init__()

                                                self.yang_name = "trigger"
                                                self.yang_parent_name = "triggers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.enumeration, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "trigger"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.Triggers.Trigger, ['entry'], name, value)


                                    class SptCalculationStatistics(Entity):
                                        """
                                        Statistics for the SPT calculation phase
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of the SPT calculation
                                        	**type**\:  :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration>`
                                        
                                        .. attribute:: node_counts
                                        
                                        	Node counts
                                        	**type**\:  :py:class:`NodeCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics, self).__init__()

                                            self.yang_name = "spt-calculation-statistics"
                                            self.yang_parent_name = "log-entry"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("duration", ("duration", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration)), ("node-counts", ("node_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.duration = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration()
                                            self.duration.parent = self
                                            self._children_name_map["duration"] = "duration"
                                            self._children_yang_names.add("duration")

                                            self.node_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts()
                                            self.node_counts.parent = self
                                            self._children_name_map["node_counts"] = "node-counts"
                                            self._children_yang_names.add("node-counts")
                                            self._segment_path = lambda: "spt-calculation-statistics"


                                        class Duration(Entity):
                                            """
                                            Duration of the SPT calculation
                                            
                                            .. attribute:: real_duration
                                            
                                            	Real time duration in milliseconds
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: cpu_duration
                                            
                                            	CPU time duration in milliseconds
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: millisecond
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration, self).__init__()

                                                self.yang_name = "duration"
                                                self.yang_parent_name = "spt-calculation-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                    ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                ])
                                                self.real_duration = None
                                                self.cpu_duration = None
                                                self._segment_path = lambda: "duration"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.Duration, ['real_duration', 'cpu_duration'], name, value)


                                        class NodeCounts(Entity):
                                            """
                                            Node counts
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable nodes in the database
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable nodes in the database
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: added
                                            
                                            	Number of nodes added to the SPT
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of nodes deleted from the SPT
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: modified
                                            
                                            	Number of modified nodes (first hop and/or metric change)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: touched
                                            
                                            	Number of nodes touched whilst calculating the SPT
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts, self).__init__()

                                                self.yang_name = "node-counts"
                                                self.yang_parent_name = "spt-calculation-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('unreachable', YLeaf(YType.uint32, 'unreachable')),
                                                    ('reachable', YLeaf(YType.uint32, 'reachable')),
                                                    ('added', YLeaf(YType.uint32, 'added')),
                                                    ('deleted', YLeaf(YType.uint32, 'deleted')),
                                                    ('modified', YLeaf(YType.uint32, 'modified')),
                                                    ('touched', YLeaf(YType.uint32, 'touched')),
                                                ])
                                                self.unreachable = None
                                                self.reachable = None
                                                self.added = None
                                                self.deleted = None
                                                self.modified = None
                                                self.touched = None
                                                self._segment_path = lambda: "node-counts"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.SptCalculationStatistics.NodeCounts, ['unreachable', 'reachable', 'added', 'deleted', 'modified', 'touched'], name, value)


                                    class RouteUpdateStatistics(Entity):
                                        """
                                        Statistics for the route update phase
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of the routing table update
                                        	**type**\:  :py:class:`Duration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration>`
                                        
                                        .. attribute:: duration_breakdown
                                        
                                        	Breakdown of the time taken by the routing table update
                                        	**type**\:  :py:class:`DurationBreakdown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown>`
                                        
                                        .. attribute:: node_counts
                                        
                                        	Node counts
                                        	**type**\:  :py:class:`NodeCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts>`
                                        
                                        .. attribute:: item_counts
                                        
                                        	Prefix item counts
                                        	**type**\:  :py:class:`ItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts>`
                                        
                                        .. attribute:: route_counts
                                        
                                        	Distinct prefix counts
                                        	**type**\:  :py:class:`RouteCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts>`
                                        
                                        .. attribute:: rib_batch_counts
                                        
                                        	Number of RIB batches sent
                                        	**type**\:  :py:class:`RibBatchCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics, self).__init__()

                                            self.yang_name = "route-update-statistics"
                                            self.yang_parent_name = "log-entry"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("duration", ("duration", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration)), ("duration-breakdown", ("duration_breakdown", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown)), ("node-counts", ("node_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts)), ("item-counts", ("item_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts)), ("route-counts", ("route_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts)), ("rib-batch-counts", ("rib_batch_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.duration = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration()
                                            self.duration.parent = self
                                            self._children_name_map["duration"] = "duration"
                                            self._children_yang_names.add("duration")

                                            self.duration_breakdown = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown()
                                            self.duration_breakdown.parent = self
                                            self._children_name_map["duration_breakdown"] = "duration-breakdown"
                                            self._children_yang_names.add("duration-breakdown")

                                            self.node_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts()
                                            self.node_counts.parent = self
                                            self._children_name_map["node_counts"] = "node-counts"
                                            self._children_yang_names.add("node-counts")

                                            self.item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts()
                                            self.item_counts.parent = self
                                            self._children_name_map["item_counts"] = "item-counts"
                                            self._children_yang_names.add("item-counts")

                                            self.route_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts()
                                            self.route_counts.parent = self
                                            self._children_name_map["route_counts"] = "route-counts"
                                            self._children_yang_names.add("route-counts")

                                            self.rib_batch_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts()
                                            self.rib_batch_counts.parent = self
                                            self._children_name_map["rib_batch_counts"] = "rib-batch-counts"
                                            self._children_yang_names.add("rib-batch-counts")
                                            self._segment_path = lambda: "route-update-statistics"


                                        class Duration(Entity):
                                            """
                                            Duration of the routing table update
                                            
                                            .. attribute:: real_duration
                                            
                                            	Real time duration in milliseconds
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: millisecond
                                            
                                            .. attribute:: cpu_duration
                                            
                                            	CPU time duration in milliseconds
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: millisecond
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration, self).__init__()

                                                self.yang_name = "duration"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                    ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                ])
                                                self.real_duration = None
                                                self.cpu_duration = None
                                                self._segment_path = lambda: "duration"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.Duration, ['real_duration', 'cpu_duration'], name, value)


                                        class DurationBreakdown(Entity):
                                            """
                                            Breakdown of the time taken by the routing table
                                            update
                                            
                                            .. attribute:: local_rib_update
                                            
                                            	Time to update IS\-IS's local RIB
                                            	**type**\:  :py:class:`LocalRibUpdate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate>`
                                            
                                            .. attribute:: global_rib_build
                                            
                                            	Time to build the update to send to the global RIB
                                            	**type**\:  :py:class:`GlobalRibBuild <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild>`
                                            
                                            .. attribute:: global_rib_send
                                            
                                            	Time to send the update to the global RIB
                                            	**type**\:  :py:class:`GlobalRibSend <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown, self).__init__()

                                                self.yang_name = "duration-breakdown"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("local-rib-update", ("local_rib_update", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate)), ("global-rib-build", ("global_rib_build", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild)), ("global-rib-send", ("global_rib_send", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict()

                                                self.local_rib_update = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate()
                                                self.local_rib_update.parent = self
                                                self._children_name_map["local_rib_update"] = "local-rib-update"
                                                self._children_yang_names.add("local-rib-update")

                                                self.global_rib_build = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild()
                                                self.global_rib_build.parent = self
                                                self._children_name_map["global_rib_build"] = "global-rib-build"
                                                self._children_yang_names.add("global-rib-build")

                                                self.global_rib_send = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend()
                                                self.global_rib_send.parent = self
                                                self._children_name_map["global_rib_send"] = "global-rib-send"
                                                self._children_yang_names.add("global-rib-send")
                                                self._segment_path = lambda: "duration-breakdown"


                                            class LocalRibUpdate(Entity):
                                                """
                                                Time to update IS\-IS's local RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate, self).__init__()

                                                    self.yang_name = "local-rib-update"
                                                    self.yang_parent_name = "duration-breakdown"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("critical", ("critical", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical)), ("high", ("high", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High)), ("medium", ("medium", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium)), ("low", ("low", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low))])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict()

                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical()
                                                    self.critical.parent = self
                                                    self._children_name_map["critical"] = "critical"
                                                    self._children_yang_names.add("critical")

                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High()
                                                    self.high.parent = self
                                                    self._children_name_map["high"] = "high"
                                                    self._children_yang_names.add("high")

                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium()
                                                    self.medium.parent = self
                                                    self._children_name_map["medium"] = "medium"
                                                    self._children_yang_names.add("medium")

                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low()
                                                    self.low.parent = self
                                                    self._children_name_map["low"] = "low"
                                                    self._children_yang_names.add("low")
                                                    self._segment_path = lambda: "local-rib-update"


                                                class Critical(Entity):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical, self).__init__()

                                                        self.yang_name = "critical"
                                                        self.yang_parent_name = "local-rib-update"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "critical"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Critical, ['real_duration', 'cpu_duration'], name, value)


                                                class High(Entity):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High, self).__init__()

                                                        self.yang_name = "high"
                                                        self.yang_parent_name = "local-rib-update"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "high"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.High, ['real_duration', 'cpu_duration'], name, value)


                                                class Medium(Entity):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium, self).__init__()

                                                        self.yang_name = "medium"
                                                        self.yang_parent_name = "local-rib-update"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "medium"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Medium, ['real_duration', 'cpu_duration'], name, value)


                                                class Low(Entity):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low, self).__init__()

                                                        self.yang_name = "low"
                                                        self.yang_parent_name = "local-rib-update"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "low"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.LocalRibUpdate.Low, ['real_duration', 'cpu_duration'], name, value)


                                            class GlobalRibBuild(Entity):
                                                """
                                                Time to build the update to send to the global
                                                RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild, self).__init__()

                                                    self.yang_name = "global-rib-build"
                                                    self.yang_parent_name = "duration-breakdown"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("critical", ("critical", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical)), ("high", ("high", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High)), ("medium", ("medium", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium)), ("low", ("low", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low))])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict()

                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical()
                                                    self.critical.parent = self
                                                    self._children_name_map["critical"] = "critical"
                                                    self._children_yang_names.add("critical")

                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High()
                                                    self.high.parent = self
                                                    self._children_name_map["high"] = "high"
                                                    self._children_yang_names.add("high")

                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium()
                                                    self.medium.parent = self
                                                    self._children_name_map["medium"] = "medium"
                                                    self._children_yang_names.add("medium")

                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low()
                                                    self.low.parent = self
                                                    self._children_name_map["low"] = "low"
                                                    self._children_yang_names.add("low")
                                                    self._segment_path = lambda: "global-rib-build"


                                                class Critical(Entity):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical, self).__init__()

                                                        self.yang_name = "critical"
                                                        self.yang_parent_name = "global-rib-build"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "critical"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Critical, ['real_duration', 'cpu_duration'], name, value)


                                                class High(Entity):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High, self).__init__()

                                                        self.yang_name = "high"
                                                        self.yang_parent_name = "global-rib-build"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "high"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.High, ['real_duration', 'cpu_duration'], name, value)


                                                class Medium(Entity):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium, self).__init__()

                                                        self.yang_name = "medium"
                                                        self.yang_parent_name = "global-rib-build"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "medium"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Medium, ['real_duration', 'cpu_duration'], name, value)


                                                class Low(Entity):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low, self).__init__()

                                                        self.yang_name = "low"
                                                        self.yang_parent_name = "global-rib-build"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "low"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibBuild.Low, ['real_duration', 'cpu_duration'], name, value)


                                            class GlobalRibSend(Entity):
                                                """
                                                Time to send the update to the global RIB
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\:  :py:class:`Critical <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical>`
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\:  :py:class:`High <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High>`
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\:  :py:class:`Medium <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium>`
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\:  :py:class:`Low <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend, self).__init__()

                                                    self.yang_name = "global-rib-send"
                                                    self.yang_parent_name = "duration-breakdown"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("critical", ("critical", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical)), ("high", ("high", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High)), ("medium", ("medium", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium)), ("low", ("low", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low))])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict()

                                                    self.critical = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical()
                                                    self.critical.parent = self
                                                    self._children_name_map["critical"] = "critical"
                                                    self._children_yang_names.add("critical")

                                                    self.high = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High()
                                                    self.high.parent = self
                                                    self._children_name_map["high"] = "high"
                                                    self._children_yang_names.add("high")

                                                    self.medium = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium()
                                                    self.medium.parent = self
                                                    self._children_name_map["medium"] = "medium"
                                                    self._children_yang_names.add("medium")

                                                    self.low = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low()
                                                    self.low.parent = self
                                                    self._children_name_map["low"] = "low"
                                                    self._children_yang_names.add("low")
                                                    self._segment_path = lambda: "global-rib-send"


                                                class Critical(Entity):
                                                    """
                                                    Critical priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical, self).__init__()

                                                        self.yang_name = "critical"
                                                        self.yang_parent_name = "global-rib-send"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "critical"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Critical, ['real_duration', 'cpu_duration'], name, value)


                                                class High(Entity):
                                                    """
                                                    High priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High, self).__init__()

                                                        self.yang_name = "high"
                                                        self.yang_parent_name = "global-rib-send"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "high"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.High, ['real_duration', 'cpu_duration'], name, value)


                                                class Medium(Entity):
                                                    """
                                                    Medium priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium, self).__init__()

                                                        self.yang_name = "medium"
                                                        self.yang_parent_name = "global-rib-send"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "medium"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Medium, ['real_duration', 'cpu_duration'], name, value)


                                                class Low(Entity):
                                                    """
                                                    Low priority
                                                    
                                                    .. attribute:: real_duration
                                                    
                                                    	Real time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    .. attribute:: cpu_duration
                                                    
                                                    	CPU time duration in milliseconds
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    	**units**\: millisecond
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low, self).__init__()

                                                        self.yang_name = "low"
                                                        self.yang_parent_name = "global-rib-send"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('real_duration', YLeaf(YType.uint32, 'real-duration')),
                                                            ('cpu_duration', YLeaf(YType.uint32, 'cpu-duration')),
                                                        ])
                                                        self.real_duration = None
                                                        self.cpu_duration = None
                                                        self._segment_path = lambda: "low"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.DurationBreakdown.GlobalRibSend.Low, ['real_duration', 'cpu_duration'], name, value)


                                        class NodeCounts(Entity):
                                            """
                                            Node counts
                                            
                                            .. attribute:: per_priority_touched
                                            
                                            	Per\-priority count of nodes considered during route update
                                            	**type**\:  :py:class:`PerPriorityTouched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched>`
                                            
                                            .. attribute:: total_touched
                                            
                                            	Total number of nodes considered during route update
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts, self).__init__()

                                                self.yang_name = "node-counts"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("per-priority-touched", ("per_priority_touched", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('total_touched', YLeaf(YType.uint32, 'total-touched')),
                                                ])
                                                self.total_touched = None

                                                self.per_priority_touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched()
                                                self.per_priority_touched.parent = self
                                                self._children_name_map["per_priority_touched"] = "per-priority-touched"
                                                self._children_yang_names.add("per-priority-touched")
                                                self._segment_path = lambda: "node-counts"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts, ['total_touched'], name, value)


                                            class PerPriorityTouched(Entity):
                                                """
                                                Per\-priority count of nodes considered during
                                                route update
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched, self).__init__()

                                                    self.yang_name = "per-priority-touched"
                                                    self.yang_parent_name = "node-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "per-priority-touched"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.NodeCounts.PerPriorityTouched, ['critical', 'high', 'medium', 'low'], name, value)


                                        class ItemCounts(Entity):
                                            """
                                            Prefix item counts
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable prefixes in the database
                                            	**type**\:  :py:class:`Unreachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable>`
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable prefixes in the database
                                            	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable>`
                                            
                                            .. attribute:: added
                                            
                                            	Number of prefixes added during calculation
                                            	**type**\:  :py:class:`Added <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added>`
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of prefixes deleted during calculation
                                            	**type**\:  :py:class:`Deleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted>`
                                            
                                            .. attribute:: modified
                                            
                                            	Number of prefixes modified, i.e. a first hop and/or metric change
                                            	**type**\:  :py:class:`Modified <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified>`
                                            
                                            .. attribute:: touched
                                            
                                            	Number of prefixes considered whilst updating the routing table
                                            	**type**\:  :py:class:`Touched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts, self).__init__()

                                                self.yang_name = "item-counts"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("unreachable", ("unreachable", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable)), ("reachable", ("reachable", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable)), ("added", ("added", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added)), ("deleted", ("deleted", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted)), ("modified", ("modified", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified)), ("touched", ("touched", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict()

                                                self.unreachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable()
                                                self.unreachable.parent = self
                                                self._children_name_map["unreachable"] = "unreachable"
                                                self._children_yang_names.add("unreachable")

                                                self.reachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable()
                                                self.reachable.parent = self
                                                self._children_name_map["reachable"] = "reachable"
                                                self._children_yang_names.add("reachable")

                                                self.added = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added()
                                                self.added.parent = self
                                                self._children_name_map["added"] = "added"
                                                self._children_yang_names.add("added")

                                                self.deleted = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted()
                                                self.deleted.parent = self
                                                self._children_name_map["deleted"] = "deleted"
                                                self._children_yang_names.add("deleted")

                                                self.modified = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified()
                                                self.modified.parent = self
                                                self._children_name_map["modified"] = "modified"
                                                self._children_yang_names.add("modified")

                                                self.touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched()
                                                self.touched.parent = self
                                                self._children_name_map["touched"] = "touched"
                                                self._children_yang_names.add("touched")
                                                self._segment_path = lambda: "item-counts"


                                            class Unreachable(Entity):
                                                """
                                                Number of unreachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable, self).__init__()

                                                    self.yang_name = "unreachable"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "unreachable"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Unreachable, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Reachable(Entity):
                                                """
                                                Number of reachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable, self).__init__()

                                                    self.yang_name = "reachable"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "reachable"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Reachable, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Added(Entity):
                                                """
                                                Number of prefixes added during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added, self).__init__()

                                                    self.yang_name = "added"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "added"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Added, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Deleted(Entity):
                                                """
                                                Number of prefixes deleted during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted, self).__init__()

                                                    self.yang_name = "deleted"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "deleted"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Deleted, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Modified(Entity):
                                                """
                                                Number of prefixes modified, i.e. a first hop
                                                and/or metric change
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified, self).__init__()

                                                    self.yang_name = "modified"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "modified"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Modified, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Touched(Entity):
                                                """
                                                Number of prefixes considered whilst updating
                                                the routing table
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched, self).__init__()

                                                    self.yang_name = "touched"
                                                    self.yang_parent_name = "item-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "touched"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.ItemCounts.Touched, ['critical', 'high', 'medium', 'low'], name, value)


                                        class RouteCounts(Entity):
                                            """
                                            Distinct prefix counts
                                            
                                            .. attribute:: unreachable
                                            
                                            	Number of unreachable prefixes in the database
                                            	**type**\:  :py:class:`Unreachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable>`
                                            
                                            .. attribute:: reachable
                                            
                                            	Number of reachable prefixes in the database
                                            	**type**\:  :py:class:`Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable>`
                                            
                                            .. attribute:: added
                                            
                                            	Number of prefixes added during calculation
                                            	**type**\:  :py:class:`Added <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added>`
                                            
                                            .. attribute:: deleted
                                            
                                            	Number of prefixes deleted during calculation
                                            	**type**\:  :py:class:`Deleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted>`
                                            
                                            .. attribute:: modified
                                            
                                            	Number of prefixes modified, i.e. a first hop and/or metric change
                                            	**type**\:  :py:class:`Modified <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified>`
                                            
                                            .. attribute:: touched
                                            
                                            	Number of prefixes considered whilst updating the routing table
                                            	**type**\:  :py:class:`Touched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts, self).__init__()

                                                self.yang_name = "route-counts"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("unreachable", ("unreachable", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable)), ("reachable", ("reachable", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable)), ("added", ("added", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added)), ("deleted", ("deleted", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted)), ("modified", ("modified", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified)), ("touched", ("touched", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict()

                                                self.unreachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable()
                                                self.unreachable.parent = self
                                                self._children_name_map["unreachable"] = "unreachable"
                                                self._children_yang_names.add("unreachable")

                                                self.reachable = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable()
                                                self.reachable.parent = self
                                                self._children_name_map["reachable"] = "reachable"
                                                self._children_yang_names.add("reachable")

                                                self.added = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added()
                                                self.added.parent = self
                                                self._children_name_map["added"] = "added"
                                                self._children_yang_names.add("added")

                                                self.deleted = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted()
                                                self.deleted.parent = self
                                                self._children_name_map["deleted"] = "deleted"
                                                self._children_yang_names.add("deleted")

                                                self.modified = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified()
                                                self.modified.parent = self
                                                self._children_name_map["modified"] = "modified"
                                                self._children_yang_names.add("modified")

                                                self.touched = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched()
                                                self.touched.parent = self
                                                self._children_name_map["touched"] = "touched"
                                                self._children_yang_names.add("touched")
                                                self._segment_path = lambda: "route-counts"


                                            class Unreachable(Entity):
                                                """
                                                Number of unreachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable, self).__init__()

                                                    self.yang_name = "unreachable"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "unreachable"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Unreachable, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Reachable(Entity):
                                                """
                                                Number of reachable prefixes in the database
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable, self).__init__()

                                                    self.yang_name = "reachable"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "reachable"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Reachable, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Added(Entity):
                                                """
                                                Number of prefixes added during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added, self).__init__()

                                                    self.yang_name = "added"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "added"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Added, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Deleted(Entity):
                                                """
                                                Number of prefixes deleted during calculation
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted, self).__init__()

                                                    self.yang_name = "deleted"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "deleted"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Deleted, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Modified(Entity):
                                                """
                                                Number of prefixes modified, i.e. a first hop
                                                and/or metric change
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified, self).__init__()

                                                    self.yang_name = "modified"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "modified"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Modified, ['critical', 'high', 'medium', 'low'], name, value)


                                            class Touched(Entity):
                                                """
                                                Number of prefixes considered whilst updating
                                                the routing table
                                                
                                                .. attribute:: critical
                                                
                                                	Critical priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: high
                                                
                                                	High priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: medium
                                                
                                                	Medium priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: low
                                                
                                                	Low priority
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched, self).__init__()

                                                    self.yang_name = "touched"
                                                    self.yang_parent_name = "route-counts"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('critical', YLeaf(YType.uint32, 'critical')),
                                                        ('high', YLeaf(YType.uint32, 'high')),
                                                        ('medium', YLeaf(YType.uint32, 'medium')),
                                                        ('low', YLeaf(YType.uint32, 'low')),
                                                    ])
                                                    self.critical = None
                                                    self.high = None
                                                    self.medium = None
                                                    self.low = None
                                                    self._segment_path = lambda: "touched"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RouteCounts.Touched, ['critical', 'high', 'medium', 'low'], name, value)


                                        class RibBatchCounts(Entity):
                                            """
                                            Number of RIB batches sent
                                            
                                            .. attribute:: critical
                                            
                                            	Critical priority
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: high
                                            
                                            	High priority
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: medium
                                            
                                            	Medium priority
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: low
                                            
                                            	Low priority
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts, self).__init__()

                                                self.yang_name = "rib-batch-counts"
                                                self.yang_parent_name = "route-update-statistics"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('critical', YLeaf(YType.uint32, 'critical')),
                                                    ('high', YLeaf(YType.uint32, 'high')),
                                                    ('medium', YLeaf(YType.uint32, 'medium')),
                                                    ('low', YLeaf(YType.uint32, 'low')),
                                                ])
                                                self.critical = None
                                                self.high = None
                                                self.medium = None
                                                self.low = None
                                                self._segment_path = lambda: "rib-batch-counts"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.SpfLog.LogEntry.RouteUpdateStatistics.RibBatchCounts, ['critical', 'high', 'medium', 'low'], name, value)


                            class TeTunnels(Entity):
                                """
                                TE tunnels table. Only available within
                                the IPv4 Unicast topology.
                                
                                .. attribute:: te_tunnel
                                
                                	A single TE tunnel advertized by IS\-IS
                                	**type**\: list of  		 :py:class:`TeTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels, self).__init__()

                                    self.yang_name = "te-tunnels"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("te-tunnel", ("te_tunnel", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel))])
                                    self._leafs = OrderedDict()

                                    self.te_tunnel = YList(self)
                                    self._segment_path = lambda: "te-tunnels"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels, [], name, value)


                                class TeTunnel(Entity):
                                    """
                                    A single TE tunnel advertized by IS\-IS
                                    
                                    .. attribute:: system_id
                                    
                                    	System ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: interface_name
                                    
                                    	Interface name
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: te_system_id
                                    
                                    	Destination system ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: te_interface
                                    
                                    	Tunnel interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: te_bandwidth
                                    
                                    	Tunnel bandwidth
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: teigp_metric
                                    
                                    	Tunnel metric
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: te_next_hop_ip_address
                                    
                                    	Tunnel next\-hop IP address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: te_mode_type
                                    
                                    	Tunnel metric mode
                                    	**type**\:  :py:class:`IsisMetricMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricMode>`
                                    
                                    .. attribute:: teipv4fa_enabled
                                    
                                    	Indicates whether MPLS TE IPv4 forwarding adjacency is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: teipv6fa_enabled
                                    
                                    	Indicates whether MPLS TE IPv6 forwarding adjacency is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: teipv4aa_enabled
                                    
                                    	Indicates whether MPLS TE IPv4 autoroute announce is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: teipv6aa_enabled
                                    
                                    	Indicates whether MPLS TE IPv6 autoroute announce is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: te_checkpoint_object_id
                                    
                                    	Tunnel checkpoint object ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_segment_routing_enabled
                                    
                                    	Indicates whether MPLS TE segment routing is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: te_segment_routing_strict_spf
                                    
                                    	Indicates whether MPLS TE segment routing strict SPF is enabled
                                    	**type**\: bool
                                    
                                    .. attribute:: te_segment_routing_exclude
                                    
                                    	Indicates whether Segment routing labeled traffic exclusion is enabled
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel, self).__init__()

                                        self.yang_name = "te-tunnel"
                                        self.yang_parent_name = "te-tunnels"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_id', YLeaf(YType.str, 'system-id')),
                                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                                            ('te_system_id', YLeaf(YType.str, 'te-system-id')),
                                            ('te_interface', YLeaf(YType.str, 'te-interface')),
                                            ('te_bandwidth', YLeaf(YType.uint32, 'te-bandwidth')),
                                            ('teigp_metric', YLeaf(YType.int32, 'teigp-metric')),
                                            ('te_next_hop_ip_address', YLeaf(YType.str, 'te-next-hop-ip-address')),
                                            ('te_mode_type', YLeaf(YType.enumeration, 'te-mode-type')),
                                            ('teipv4fa_enabled', YLeaf(YType.boolean, 'teipv4fa-enabled')),
                                            ('teipv6fa_enabled', YLeaf(YType.boolean, 'teipv6fa-enabled')),
                                            ('teipv4aa_enabled', YLeaf(YType.boolean, 'teipv4aa-enabled')),
                                            ('teipv6aa_enabled', YLeaf(YType.boolean, 'teipv6aa-enabled')),
                                            ('te_checkpoint_object_id', YLeaf(YType.uint32, 'te-checkpoint-object-id')),
                                            ('te_segment_routing_enabled', YLeaf(YType.boolean, 'te-segment-routing-enabled')),
                                            ('te_segment_routing_strict_spf', YLeaf(YType.boolean, 'te-segment-routing-strict-spf')),
                                            ('te_segment_routing_exclude', YLeaf(YType.boolean, 'te-segment-routing-exclude')),
                                        ])
                                        self.system_id = None
                                        self.interface_name = None
                                        self.te_system_id = None
                                        self.te_interface = None
                                        self.te_bandwidth = None
                                        self.teigp_metric = None
                                        self.te_next_hop_ip_address = None
                                        self.te_mode_type = None
                                        self.teipv4fa_enabled = None
                                        self.teipv6fa_enabled = None
                                        self.teipv4aa_enabled = None
                                        self.teipv6aa_enabled = None
                                        self.te_checkpoint_object_id = None
                                        self.te_segment_routing_enabled = None
                                        self.te_segment_routing_strict_spf = None
                                        self.te_segment_routing_exclude = None
                                        self._segment_path = lambda: "te-tunnel"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TeTunnels.TeTunnel, ['system_id', 'interface_name', 'te_system_id', 'te_interface', 'te_bandwidth', 'teigp_metric', 'te_next_hop_ip_address', 'te_mode_type', 'teipv4fa_enabled', 'teipv6fa_enabled', 'teipv4aa_enabled', 'teipv6aa_enabled', 'te_checkpoint_object_id', 'te_segment_routing_enabled', 'te_segment_routing_strict_spf', 'te_segment_routing_exclude'], name, value)


                            class Ipv4LinkTopologies(Entity):
                                """
                                IPv4 IS Topology table
                                
                                .. attribute:: ipv4_link_topology
                                
                                	An IS in an IPv4 Link Topology
                                	**type**\: list of  		 :py:class:`Ipv4LinkTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies, self).__init__()

                                    self.yang_name = "ipv4-link-topologies"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("ipv4-link-topology", ("ipv4_link_topology", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology))])
                                    self._leafs = OrderedDict()

                                    self.ipv4_link_topology = YList(self)
                                    self._segment_path = lambda: "ipv4-link-topologies"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies, [], name, value)


                                class Ipv4LinkTopology(Entity):
                                    """
                                    An IS in an IPv4 Link Topology
                                    
                                    .. attribute:: system_id  (key)
                                    
                                    	System ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: reachability_status
                                    
                                    	Is the IS reachable, and, if so, its status within the SPT
                                    	**type**\:  :py:class:`ReachabilityStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus>`
                                    
                                    .. attribute:: advertised_prefix_item_counts
                                    
                                    	Per\-priority counts of prefix items advertised by the IS
                                    	**type**\:  :py:class:`AdvertisedPrefixItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts>`
                                    
                                    .. attribute:: source_address
                                    
                                    	Source Address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: is_participant
                                    
                                    	Does the IS participate in the topology?
                                    	**type**\: bool
                                    
                                    .. attribute:: is_overloaded
                                    
                                    	Is the IS overloaded?
                                    	**type**\: bool
                                    
                                    .. attribute:: is_attached
                                    
                                    	Is the IS attached?
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology, self).__init__()

                                        self.yang_name = "ipv4-link-topology"
                                        self.yang_parent_name = "ipv4-link-topologies"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['system_id']
                                        self._child_container_classes = OrderedDict([("reachability-status", ("reachability_status", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus)), ("advertised-prefix-item-counts", ("advertised_prefix_item_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_id', YLeaf(YType.str, 'system-id')),
                                            ('source_address', YLeaf(YType.str, 'source-address')),
                                            ('is_participant', YLeaf(YType.boolean, 'is-participant')),
                                            ('is_overloaded', YLeaf(YType.boolean, 'is-overloaded')),
                                            ('is_attached', YLeaf(YType.boolean, 'is-attached')),
                                        ])
                                        self.system_id = None
                                        self.source_address = None
                                        self.is_participant = None
                                        self.is_overloaded = None
                                        self.is_attached = None

                                        self.reachability_status = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus()
                                        self.reachability_status.parent = self
                                        self._children_name_map["reachability_status"] = "reachability-status"
                                        self._children_yang_names.add("reachability-status")

                                        self.advertised_prefix_item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts()
                                        self.advertised_prefix_item_counts.parent = self
                                        self._children_name_map["advertised_prefix_item_counts"] = "advertised-prefix-item-counts"
                                        self._children_yang_names.add("advertised-prefix-item-counts")
                                        self._segment_path = lambda: "ipv4-link-topology" + "[system-id='" + str(self.system_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology, ['system_id', 'source_address', 'is_participant', 'is_overloaded', 'is_attached'], name, value)


                                    class ReachabilityStatus(Entity):
                                        """
                                        Is the IS reachable, and, if so, its status
                                        within the SPT
                                        
                                        .. attribute:: reachable_details
                                        
                                        	Status of the IS within the SPT
                                        	**type**\:  :py:class:`ReachableDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails>`
                                        
                                        .. attribute:: reachable_status
                                        
                                        	ReachableStatus
                                        	**type**\:  :py:class:`IsisReachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisReachable>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus, self).__init__()

                                            self.yang_name = "reachability-status"
                                            self.yang_parent_name = "ipv4-link-topology"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("reachable-details", ("reachable_details", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reachable_status', YLeaf(YType.enumeration, 'reachable-status')),
                                            ])
                                            self.reachable_status = None

                                            self.reachable_details = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails()
                                            self.reachable_details.parent = self
                                            self._children_name_map["reachable_details"] = "reachable-details"
                                            self._children_yang_names.add("reachable-details")
                                            self._segment_path = lambda: "reachability-status"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus, ['reachable_status'], name, value)


                                        class ReachableDetails(Entity):
                                            """
                                            Status of the IS within the SPT
                                            
                                            .. attribute:: root_distance
                                            
                                            	Distance to the IS
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: multicast_root_distance
                                            
                                            	Distance to the IS
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: paths
                                            
                                            	First hops towards the IS
                                            	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths>`
                                            
                                            .. attribute:: multicast_path
                                            
                                            	Multicast intact first hops towards the IS
                                            	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath>`
                                            
                                            .. attribute:: parent_
                                            
                                            	Parents of the IS within the SPT
                                            	**type**\: list of  		 :py:class:`Parent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent>`
                                            
                                            .. attribute:: children_
                                            
                                            	Children of the IS within the SPT
                                            	**type**\: list of  		 :py:class:`Children <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails, self).__init__()

                                                self.yang_name = "reachable-details"
                                                self.yang_parent_name = "reachability-status"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath)), ("parent", ("parent_", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent)), ("children", ("children_", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children))])
                                                self._leafs = OrderedDict([
                                                    ('root_distance', YLeaf(YType.uint32, 'root-distance')),
                                                    ('multicast_root_distance', YLeaf(YType.uint32, 'multicast-root-distance')),
                                                ])
                                                self.root_distance = None
                                                self.multicast_root_distance = None

                                                self.paths = YList(self)
                                                self.multicast_path = YList(self)
                                                self.parent_ = YList(self)
                                                self.children_ = YList(self)
                                                self._segment_path = lambda: "reachable-details"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails, ['root_distance', 'multicast_root_distance'], name, value)


                                            class Paths(Entity):
                                                """
                                                First hops towards the IS
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup>`
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tunnel_interface
                                                
                                                	Explicit path tunnel interface
                                                	**type**\: str
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: is_te_tunnel_interface
                                                
                                                	Is path via a TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: is_sr_exclude_tunnel_interface
                                                
                                                	Is path via an SR\-exclude TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: uloop_explicit
                                                
                                                	Uloop Explicit List
                                                	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths, self).__init__()

                                                    self.yang_name = "paths"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup))])
                                                    self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                        ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.neighbor_snpa = None
                                                    self.tag = None
                                                    self.tunnel_interface = None
                                                    self.segment_routing_sid_value = None
                                                    self.weight = None
                                                    self.is_te_tunnel_interface = None
                                                    self.is_sr_exclude_tunnel_interface = None

                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self._children_name_map["frr_backup"] = "frr-backup"
                                                    self._children_yang_names.add("frr-backup")

                                                    self.uloop_explicit = YList(self)
                                                    self._segment_path = lambda: "paths"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                                class FrrBackup(Entity):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: tunnel_egress_interface
                                                    
                                                    	Tunnel Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: backup_repair_list_size
                                                    
                                                    	Backup Repair List Size
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: tilfa_computation
                                                    
                                                    	Ti LFA computation which provided backup path
                                                    	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                    
                                                    .. attribute:: prefix_source_node_id
                                                    
                                                    	PrefixSourceNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_strict_spflfa
                                                    
                                                    	Is the backup path TI\-LFA strict SPF?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_tunnel_requested
                                                    
                                                    	Is SR TE tunnel requested
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                    
                                                    .. attribute:: backup_repair
                                                    
                                                    	Backup Repair List
                                                    	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup, self).__init__()

                                                        self.yang_name = "frr-backup"
                                                        self.yang_parent_name = "paths"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair))])
                                                        self._leafs = OrderedDict([
                                                            ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                            ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                            ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                            ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                            ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                            ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                            ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                            ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                            ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                            ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                            ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                            ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                            ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                            ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                            ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                            ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                            ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                            ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                            ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                            ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                            ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                            ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                            ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                            ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                            ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ])
                                                        self.neighbor_id = None
                                                        self.egress_interface = None
                                                        self.neighbor_address = None
                                                        self.tunnel_egress_interface = None
                                                        self.neighbor_snpa = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.remote_lfa_router_pid = None
                                                        self.total_backup_distance = None
                                                        self.segment_routing_sid_value = None
                                                        self.num_sid = None
                                                        self.backup_repair_list_size = None
                                                        self.tilfa_computation = None
                                                        self.prefix_source_node_id = None
                                                        self.is_downstream = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_srlg_disjoint = None
                                                        self.is_remote_lfa = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_strict_spflfa = None
                                                        self.is_tunnel_requested = None
                                                        self.weight = None

                                                        self.segment_routing_sid_value_entry = YList(self)
                                                        self.backup_repair = YList(self)
                                                        self._segment_path = lambda: "frr-backup"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                    class SegmentRoutingSidValueEntry(Entity):
                                                        """
                                                        Segment routing sid values for TI\-LFA/rLFA
                                                        
                                                        .. attribute:: entry
                                                        
                                                        	
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                            self.yang_name = "segment-routing-sid-value-entry"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                                            ])
                                                            self.entry = None
                                                            self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                    class BackupRepair(Entity):
                                                        """
                                                        Backup Repair List
                                                        
                                                        .. attribute:: repair_element_node_id
                                                        
                                                        	RepairElementNodeID
                                                        	**type**\: str
                                                        
                                                        .. attribute:: repair_ipv4_addr
                                                        
                                                        	RepairIPv4Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_ipv6_addr
                                                        
                                                        	RepairIPv6Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_label
                                                        
                                                        	Repair Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_element_type
                                                        
                                                        	Repair Element Type
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_strict_spf_label
                                                        
                                                        	Repair Strict SPF Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair, self).__init__()

                                                            self.yang_name = "backup-repair"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                                ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                                ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                                ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                                ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                                ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                            ])
                                                            self.repair_element_node_id = None
                                                            self.repair_ipv4_addr = None
                                                            self.repair_ipv6_addr = None
                                                            self.repair_label = None
                                                            self.repair_element_type = None
                                                            self.repair_strict_spf_label = None
                                                            self._segment_path = lambda: "backup-repair"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                                class UloopExplicit(Entity):
                                                    """
                                                    Uloop Explicit List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit, self).__init__()

                                                        self.yang_name = "uloop-explicit"
                                                        self.yang_parent_name = "paths"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "uloop-explicit"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class MulticastPath(Entity):
                                                """
                                                Multicast intact first hops towards the IS
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup>`
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tunnel_interface
                                                
                                                	Explicit path tunnel interface
                                                	**type**\: str
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: is_te_tunnel_interface
                                                
                                                	Is path via a TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: is_sr_exclude_tunnel_interface
                                                
                                                	Is path via an SR\-exclude TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: uloop_explicit
                                                
                                                	Uloop Explicit List
                                                	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath, self).__init__()

                                                    self.yang_name = "multicast-path"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup))])
                                                    self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                        ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.neighbor_snpa = None
                                                    self.tag = None
                                                    self.tunnel_interface = None
                                                    self.segment_routing_sid_value = None
                                                    self.weight = None
                                                    self.is_te_tunnel_interface = None
                                                    self.is_sr_exclude_tunnel_interface = None

                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self._children_name_map["frr_backup"] = "frr-backup"
                                                    self._children_yang_names.add("frr-backup")

                                                    self.uloop_explicit = YList(self)
                                                    self._segment_path = lambda: "multicast-path"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                                class FrrBackup(Entity):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: tunnel_egress_interface
                                                    
                                                    	Tunnel Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: backup_repair_list_size
                                                    
                                                    	Backup Repair List Size
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: tilfa_computation
                                                    
                                                    	Ti LFA computation which provided backup path
                                                    	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                    
                                                    .. attribute:: prefix_source_node_id
                                                    
                                                    	PrefixSourceNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_strict_spflfa
                                                    
                                                    	Is the backup path TI\-LFA strict SPF?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_tunnel_requested
                                                    
                                                    	Is SR TE tunnel requested
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                    
                                                    .. attribute:: backup_repair
                                                    
                                                    	Backup Repair List
                                                    	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup, self).__init__()

                                                        self.yang_name = "frr-backup"
                                                        self.yang_parent_name = "multicast-path"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair))])
                                                        self._leafs = OrderedDict([
                                                            ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                            ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                            ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                            ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                            ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                            ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                            ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                            ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                            ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                            ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                            ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                            ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                            ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                            ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                            ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                            ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                            ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                            ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                            ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                            ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                            ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                            ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                            ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                            ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                            ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ])
                                                        self.neighbor_id = None
                                                        self.egress_interface = None
                                                        self.neighbor_address = None
                                                        self.tunnel_egress_interface = None
                                                        self.neighbor_snpa = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.remote_lfa_router_pid = None
                                                        self.total_backup_distance = None
                                                        self.segment_routing_sid_value = None
                                                        self.num_sid = None
                                                        self.backup_repair_list_size = None
                                                        self.tilfa_computation = None
                                                        self.prefix_source_node_id = None
                                                        self.is_downstream = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_srlg_disjoint = None
                                                        self.is_remote_lfa = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_strict_spflfa = None
                                                        self.is_tunnel_requested = None
                                                        self.weight = None

                                                        self.segment_routing_sid_value_entry = YList(self)
                                                        self.backup_repair = YList(self)
                                                        self._segment_path = lambda: "frr-backup"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                    class SegmentRoutingSidValueEntry(Entity):
                                                        """
                                                        Segment routing sid values for TI\-LFA/rLFA
                                                        
                                                        .. attribute:: entry
                                                        
                                                        	
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                            self.yang_name = "segment-routing-sid-value-entry"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                                            ])
                                                            self.entry = None
                                                            self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                    class BackupRepair(Entity):
                                                        """
                                                        Backup Repair List
                                                        
                                                        .. attribute:: repair_element_node_id
                                                        
                                                        	RepairElementNodeID
                                                        	**type**\: str
                                                        
                                                        .. attribute:: repair_ipv4_addr
                                                        
                                                        	RepairIPv4Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_ipv6_addr
                                                        
                                                        	RepairIPv6Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_label
                                                        
                                                        	Repair Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_element_type
                                                        
                                                        	Repair Element Type
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_strict_spf_label
                                                        
                                                        	Repair Strict SPF Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                            self.yang_name = "backup-repair"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                                ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                                ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                                ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                                ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                                ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                            ])
                                                            self.repair_element_node_id = None
                                                            self.repair_ipv4_addr = None
                                                            self.repair_ipv6_addr = None
                                                            self.repair_label = None
                                                            self.repair_element_type = None
                                                            self.repair_strict_spf_label = None
                                                            self._segment_path = lambda: "backup-repair"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                                class UloopExplicit(Entity):
                                                    """
                                                    Uloop Explicit List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit, self).__init__()

                                                        self.yang_name = "uloop-explicit"
                                                        self.yang_parent_name = "multicast-path"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "uloop-explicit"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class Parent(Entity):
                                                """
                                                Parents of the IS within the SPT
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent, self).__init__()

                                                    self.yang_name = "parent"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('intermediate_pseudonode', YLeaf(YType.str, 'intermediate-pseudonode')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.intermediate_pseudonode = None
                                                    self._segment_path = lambda: "parent"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Parent, ['neighbor_id', 'intermediate_pseudonode'], name, value)


                                            class Children(Entity):
                                                """
                                                Children of the IS within the SPT
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children, self).__init__()

                                                    self.yang_name = "children"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('intermediate_pseudonode', YLeaf(YType.str, 'intermediate-pseudonode')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.intermediate_pseudonode = None
                                                    self._segment_path = lambda: "children"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.ReachabilityStatus.ReachableDetails.Children, ['neighbor_id', 'intermediate_pseudonode'], name, value)


                                    class AdvertisedPrefixItemCounts(Entity):
                                        """
                                        Per\-priority counts of prefix items advertised
                                        by the IS
                                        
                                        .. attribute:: critical
                                        
                                        	Critical priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: high
                                        
                                        	High priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: medium
                                        
                                        	Medium priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: low
                                        
                                        	Low priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts, self).__init__()

                                            self.yang_name = "advertised-prefix-item-counts"
                                            self.yang_parent_name = "ipv4-link-topology"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('critical', YLeaf(YType.uint32, 'critical')),
                                                ('high', YLeaf(YType.uint32, 'high')),
                                                ('medium', YLeaf(YType.uint32, 'medium')),
                                                ('low', YLeaf(YType.uint32, 'low')),
                                            ])
                                            self.critical = None
                                            self.high = None
                                            self.medium = None
                                            self.low = None
                                            self._segment_path = lambda: "advertised-prefix-item-counts"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv4LinkTopologies.Ipv4LinkTopology.AdvertisedPrefixItemCounts, ['critical', 'high', 'medium', 'low'], name, value)


                            class TopologySummary(Entity):
                                """
                                Summary information for a particular IS
                                Topology
                                
                                .. attribute:: router_node_count
                                
                                	Node Counts for System nodes
                                	**type**\:  :py:class:`RouterNodeCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount>`
                                
                                .. attribute:: pseudonode_node_count
                                
                                	Node Counts for Pseudonode nodes
                                	**type**\:  :py:class:`PseudonodeNodeCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary, self).__init__()

                                    self.yang_name = "topology-summary"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("router-node-count", ("router_node_count", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount)), ("pseudonode-node-count", ("pseudonode_node_count", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.router_node_count = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount()
                                    self.router_node_count.parent = self
                                    self._children_name_map["router_node_count"] = "router-node-count"
                                    self._children_yang_names.add("router-node-count")

                                    self.pseudonode_node_count = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount()
                                    self.pseudonode_node_count.parent = self
                                    self._children_name_map["pseudonode_node_count"] = "pseudonode-node-count"
                                    self._children_yang_names.add("pseudonode-node-count")
                                    self._segment_path = lambda: "topology-summary"


                                class RouterNodeCount(Entity):
                                    """
                                    Node Counts for System nodes
                                    
                                    .. attribute:: reachable_node_count
                                    
                                    	Number of nodes reachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_node_count
                                    
                                    	Number of nodes unreachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_participant_node_count
                                    
                                    	Number of participating nodes unreachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount, self).__init__()

                                        self.yang_name = "router-node-count"
                                        self.yang_parent_name = "topology-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('reachable_node_count', YLeaf(YType.uint32, 'reachable-node-count')),
                                            ('unreachable_node_count', YLeaf(YType.uint32, 'unreachable-node-count')),
                                            ('unreachable_participant_node_count', YLeaf(YType.uint32, 'unreachable-participant-node-count')),
                                        ])
                                        self.reachable_node_count = None
                                        self.unreachable_node_count = None
                                        self.unreachable_participant_node_count = None
                                        self._segment_path = lambda: "router-node-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.RouterNodeCount, ['reachable_node_count', 'unreachable_node_count', 'unreachable_participant_node_count'], name, value)


                                class PseudonodeNodeCount(Entity):
                                    """
                                    Node Counts for Pseudonode nodes
                                    
                                    .. attribute:: reachable_node_count
                                    
                                    	Number of nodes reachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_node_count
                                    
                                    	Number of nodes unreachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachable_participant_node_count
                                    
                                    	Number of participating nodes unreachable in SPT
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount, self).__init__()

                                        self.yang_name = "pseudonode-node-count"
                                        self.yang_parent_name = "topology-summary"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('reachable_node_count', YLeaf(YType.uint32, 'reachable-node-count')),
                                            ('unreachable_node_count', YLeaf(YType.uint32, 'unreachable-node-count')),
                                            ('unreachable_participant_node_count', YLeaf(YType.uint32, 'unreachable-participant-node-count')),
                                        ])
                                        self.reachable_node_count = None
                                        self.unreachable_node_count = None
                                        self.unreachable_participant_node_count = None
                                        self._segment_path = lambda: "pseudonode-node-count"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.TopologySummary.PseudonodeNodeCount, ['reachable_node_count', 'unreachable_node_count', 'unreachable_participant_node_count'], name, value)


                            class Ipv6LinkTopologies(Entity):
                                """
                                IPv6 IS Topology table
                                
                                .. attribute:: ipv6_link_topology
                                
                                	An IS in an IPv6 Link Topology
                                	**type**\: list of  		 :py:class:`Ipv6LinkTopology <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies, self).__init__()

                                    self.yang_name = "ipv6-link-topologies"
                                    self.yang_parent_name = "topology-level"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("ipv6-link-topology", ("ipv6_link_topology", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology))])
                                    self._leafs = OrderedDict()

                                    self.ipv6_link_topology = YList(self)
                                    self._segment_path = lambda: "ipv6-link-topologies"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies, [], name, value)


                                class Ipv6LinkTopology(Entity):
                                    """
                                    An IS in an IPv6 Link Topology
                                    
                                    .. attribute:: system_id  (key)
                                    
                                    	System ID
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                    
                                    .. attribute:: reachability_status
                                    
                                    	Is the IS reachable, and, if so, its status within the SPT
                                    	**type**\:  :py:class:`ReachabilityStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus>`
                                    
                                    .. attribute:: advertised_prefix_item_counts
                                    
                                    	Per\-priority counts of prefix items advertised by the IS
                                    	**type**\:  :py:class:`AdvertisedPrefixItemCounts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts>`
                                    
                                    .. attribute:: source_address
                                    
                                    	Source Address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: is_participant
                                    
                                    	Does the IS participate in the topology?
                                    	**type**\: bool
                                    
                                    .. attribute:: is_overloaded
                                    
                                    	Is the IS overloaded?
                                    	**type**\: bool
                                    
                                    .. attribute:: is_attached
                                    
                                    	Is the IS attached?
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology, self).__init__()

                                        self.yang_name = "ipv6-link-topology"
                                        self.yang_parent_name = "ipv6-link-topologies"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['system_id']
                                        self._child_container_classes = OrderedDict([("reachability-status", ("reachability_status", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus)), ("advertised-prefix-item-counts", ("advertised_prefix_item_counts", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_id', YLeaf(YType.str, 'system-id')),
                                            ('source_address', YLeaf(YType.str, 'source-address')),
                                            ('is_participant', YLeaf(YType.boolean, 'is-participant')),
                                            ('is_overloaded', YLeaf(YType.boolean, 'is-overloaded')),
                                            ('is_attached', YLeaf(YType.boolean, 'is-attached')),
                                        ])
                                        self.system_id = None
                                        self.source_address = None
                                        self.is_participant = None
                                        self.is_overloaded = None
                                        self.is_attached = None

                                        self.reachability_status = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus()
                                        self.reachability_status.parent = self
                                        self._children_name_map["reachability_status"] = "reachability-status"
                                        self._children_yang_names.add("reachability-status")

                                        self.advertised_prefix_item_counts = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts()
                                        self.advertised_prefix_item_counts.parent = self
                                        self._children_name_map["advertised_prefix_item_counts"] = "advertised-prefix-item-counts"
                                        self._children_yang_names.add("advertised-prefix-item-counts")
                                        self._segment_path = lambda: "ipv6-link-topology" + "[system-id='" + str(self.system_id) + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology, ['system_id', 'source_address', 'is_participant', 'is_overloaded', 'is_attached'], name, value)


                                    class ReachabilityStatus(Entity):
                                        """
                                        Is the IS reachable, and, if so, its status
                                        within the SPT
                                        
                                        .. attribute:: reachable_details
                                        
                                        	Status of the IS within the SPT
                                        	**type**\:  :py:class:`ReachableDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails>`
                                        
                                        .. attribute:: reachable_status
                                        
                                        	ReachableStatus
                                        	**type**\:  :py:class:`IsisReachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisReachable>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus, self).__init__()

                                            self.yang_name = "reachability-status"
                                            self.yang_parent_name = "ipv6-link-topology"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("reachable-details", ("reachable_details", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reachable_status', YLeaf(YType.enumeration, 'reachable-status')),
                                            ])
                                            self.reachable_status = None

                                            self.reachable_details = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails()
                                            self.reachable_details.parent = self
                                            self._children_name_map["reachable_details"] = "reachable-details"
                                            self._children_yang_names.add("reachable-details")
                                            self._segment_path = lambda: "reachability-status"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus, ['reachable_status'], name, value)


                                        class ReachableDetails(Entity):
                                            """
                                            Status of the IS within the SPT
                                            
                                            .. attribute:: root_distance
                                            
                                            	Distance to the IS
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: multicast_root_distance
                                            
                                            	Distance to the IS
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: paths
                                            
                                            	First hops towards the IS
                                            	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths>`
                                            
                                            .. attribute:: multicast_path
                                            
                                            	Multicast intact first hops towards the IS
                                            	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath>`
                                            
                                            .. attribute:: parent_
                                            
                                            	Parents of the IS within the SPT
                                            	**type**\: list of  		 :py:class:`Parent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent>`
                                            
                                            .. attribute:: children_
                                            
                                            	Children of the IS within the SPT
                                            	**type**\: list of  		 :py:class:`Children <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails, self).__init__()

                                                self.yang_name = "reachable-details"
                                                self.yang_parent_name = "reachability-status"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath)), ("parent", ("parent_", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent)), ("children", ("children_", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children))])
                                                self._leafs = OrderedDict([
                                                    ('root_distance', YLeaf(YType.uint32, 'root-distance')),
                                                    ('multicast_root_distance', YLeaf(YType.uint32, 'multicast-root-distance')),
                                                ])
                                                self.root_distance = None
                                                self.multicast_root_distance = None

                                                self.paths = YList(self)
                                                self.multicast_path = YList(self)
                                                self.parent_ = YList(self)
                                                self.children_ = YList(self)
                                                self._segment_path = lambda: "reachable-details"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails, ['root_distance', 'multicast_root_distance'], name, value)


                                            class Paths(Entity):
                                                """
                                                First hops towards the IS
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup>`
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tunnel_interface
                                                
                                                	Explicit path tunnel interface
                                                	**type**\: str
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: is_te_tunnel_interface
                                                
                                                	Is path via a TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: is_sr_exclude_tunnel_interface
                                                
                                                	Is path via an SR\-exclude TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: uloop_explicit
                                                
                                                	Uloop Explicit List
                                                	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths, self).__init__()

                                                    self.yang_name = "paths"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup))])
                                                    self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                        ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.neighbor_snpa = None
                                                    self.tag = None
                                                    self.tunnel_interface = None
                                                    self.segment_routing_sid_value = None
                                                    self.weight = None
                                                    self.is_te_tunnel_interface = None
                                                    self.is_sr_exclude_tunnel_interface = None

                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self._children_name_map["frr_backup"] = "frr-backup"
                                                    self._children_yang_names.add("frr-backup")

                                                    self.uloop_explicit = YList(self)
                                                    self._segment_path = lambda: "paths"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                                class FrrBackup(Entity):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: tunnel_egress_interface
                                                    
                                                    	Tunnel interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: backup_repair_list_size
                                                    
                                                    	Backup Repair List Size
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: tilfa_computation
                                                    
                                                    	Ti LFA computation which provided backup path
                                                    	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                    
                                                    .. attribute:: prefix_source_node_id
                                                    
                                                    	PrefixSourceNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_strict_spflfa
                                                    
                                                    	Is the backup path TI\-LFA strict SPF?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_tunnel_requested
                                                    
                                                    	Is SR TE tunnel requested
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                    
                                                    .. attribute:: backup_repair
                                                    
                                                    	BAckup Repair List
                                                    	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup, self).__init__()

                                                        self.yang_name = "frr-backup"
                                                        self.yang_parent_name = "paths"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair))])
                                                        self._leafs = OrderedDict([
                                                            ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                            ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                            ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                            ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                            ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                            ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                            ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                            ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                            ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                            ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                            ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                            ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                            ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                            ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                            ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                            ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                            ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                            ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                            ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                            ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                            ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                            ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                            ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                            ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                            ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ])
                                                        self.neighbor_id = None
                                                        self.egress_interface = None
                                                        self.neighbor_address = None
                                                        self.tunnel_egress_interface = None
                                                        self.neighbor_snpa = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.remote_lfa_router_pid = None
                                                        self.total_backup_distance = None
                                                        self.segment_routing_sid_value = None
                                                        self.num_sid = None
                                                        self.backup_repair_list_size = None
                                                        self.tilfa_computation = None
                                                        self.prefix_source_node_id = None
                                                        self.is_downstream = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_srlg_disjoint = None
                                                        self.is_remote_lfa = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_strict_spflfa = None
                                                        self.is_tunnel_requested = None
                                                        self.weight = None

                                                        self.segment_routing_sid_value_entry = YList(self)
                                                        self.backup_repair = YList(self)
                                                        self._segment_path = lambda: "frr-backup"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                    class SegmentRoutingSidValueEntry(Entity):
                                                        """
                                                        Segment routing sid values for TI\-LFA/rLFA
                                                        
                                                        .. attribute:: entry
                                                        
                                                        	
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                            self.yang_name = "segment-routing-sid-value-entry"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                                            ])
                                                            self.entry = None
                                                            self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                    class BackupRepair(Entity):
                                                        """
                                                        BAckup Repair List
                                                        
                                                        .. attribute:: repair_element_node_id
                                                        
                                                        	RepairElementNodeID
                                                        	**type**\: str
                                                        
                                                        .. attribute:: repair_ipv4_addr
                                                        
                                                        	RepairIPv4Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_ipv6_addr
                                                        
                                                        	RepairIPv6Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_label
                                                        
                                                        	Repair Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_element_type
                                                        
                                                        	Repair Element Type
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_strict_spf_label
                                                        
                                                        	Repair Strict SPF Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair, self).__init__()

                                                            self.yang_name = "backup-repair"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                                ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                                ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                                ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                                ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                                ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                            ])
                                                            self.repair_element_node_id = None
                                                            self.repair_ipv4_addr = None
                                                            self.repair_ipv6_addr = None
                                                            self.repair_label = None
                                                            self.repair_element_type = None
                                                            self.repair_strict_spf_label = None
                                                            self._segment_path = lambda: "backup-repair"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                                class UloopExplicit(Entity):
                                                    """
                                                    Uloop Explicit List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit, self).__init__()

                                                        self.yang_name = "uloop-explicit"
                                                        self.yang_parent_name = "paths"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "uloop-explicit"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class MulticastPath(Entity):
                                                """
                                                Multicast intact first hops towards the IS
                                                
                                                .. attribute:: frr_backup
                                                
                                                	FRR backup for this path
                                                	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup>`
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: tag
                                                
                                                	Tag associated with the path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tunnel_interface
                                                
                                                	Explicit path tunnel interface
                                                	**type**\: str
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: is_te_tunnel_interface
                                                
                                                	Is path via a TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: is_sr_exclude_tunnel_interface
                                                
                                                	Is path via an SR\-exclude TE tunnel
                                                	**type**\: bool
                                                
                                                .. attribute:: uloop_explicit
                                                
                                                	Uloop Explicit List
                                                	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath, self).__init__()

                                                    self.yang_name = "multicast-path"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup))])
                                                    self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('tag', YLeaf(YType.uint32, 'tag')),
                                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                        ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.neighbor_snpa = None
                                                    self.tag = None
                                                    self.tunnel_interface = None
                                                    self.segment_routing_sid_value = None
                                                    self.weight = None
                                                    self.is_te_tunnel_interface = None
                                                    self.is_sr_exclude_tunnel_interface = None

                                                    self.frr_backup = Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup()
                                                    self.frr_backup.parent = self
                                                    self._children_name_map["frr_backup"] = "frr-backup"
                                                    self._children_yang_names.add("frr-backup")

                                                    self.uloop_explicit = YList(self)
                                                    self._segment_path = lambda: "multicast-path"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                                class FrrBackup(Entity):
                                                    """
                                                    FRR backup for this path
                                                    
                                                    .. attribute:: neighbor_id
                                                    
                                                    	Next hop neighbor ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: egress_interface
                                                    
                                                    	Interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_address
                                                    
                                                    	Next hop neighbor's forwarding address
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: tunnel_egress_interface
                                                    
                                                    	Tunnel interface to send the packet out of
                                                    	**type**\: str
                                                    
                                                    .. attribute:: neighbor_snpa
                                                    
                                                    	Next hop neighbor's SNPA
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_system_id
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_id
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: remote_lfa_system_pid
                                                    
                                                    	Remote LFA PQ Node's ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                    
                                                    .. attribute:: remote_lfa_router_pid
                                                    
                                                    	Remote LFA Router ID
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: total_backup_distance
                                                    
                                                    	Distance to the network via this backup path
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value
                                                    
                                                    	Segment routing sid value received from first hop
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: num_sid
                                                    
                                                    	Number of SIDs in TI\-LFA/rLFA
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: backup_repair_list_size
                                                    
                                                    	Backup Repair List Size
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: tilfa_computation
                                                    
                                                    	Ti LFA computation which provided backup path
                                                    	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                    
                                                    .. attribute:: prefix_source_node_id
                                                    
                                                    	PrefixSourceNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: is_downstream
                                                    
                                                    	Is the backup path via downstream node?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_lc_disjoint
                                                    
                                                    	Is the backup path line card disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_node_protecting
                                                    
                                                    	Is the backup path node protecting?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_primary_path
                                                    
                                                    	Is the backup path an ECMP to the network?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_srlg_disjoint
                                                    
                                                    	Is the backup path SRLG disjoint with primary?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_remote_lfa
                                                    
                                                    	Is the backup path via a Remote LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_epcfrr_lfa
                                                    
                                                    	Is the backup path via a TI\-LFA?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_strict_spflfa
                                                    
                                                    	Is the backup path TI\-LFA strict SPF?
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: is_tunnel_requested
                                                    
                                                    	Is SR TE tunnel requested
                                                    	**type**\: bool
                                                    
                                                    .. attribute:: weight
                                                    
                                                    	Weight configured on the interface
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: segment_routing_sid_value_entry
                                                    
                                                    	Segment routing sid values for TI\-LFA/rLFA
                                                    	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                    
                                                    .. attribute:: backup_repair
                                                    
                                                    	BAckup Repair List
                                                    	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup, self).__init__()

                                                        self.yang_name = "frr-backup"
                                                        self.yang_parent_name = "multicast-path"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair))])
                                                        self._leafs = OrderedDict([
                                                            ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                            ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                            ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                            ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                            ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                            ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                            ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                            ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                            ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                            ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                            ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                            ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                            ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                            ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                            ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                            ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                            ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                            ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                            ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                            ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                            ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                            ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                            ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                            ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                            ('weight', YLeaf(YType.uint32, 'weight')),
                                                        ])
                                                        self.neighbor_id = None
                                                        self.egress_interface = None
                                                        self.neighbor_address = None
                                                        self.tunnel_egress_interface = None
                                                        self.neighbor_snpa = None
                                                        self.remote_lfa_system_id = None
                                                        self.remote_lfa_router_id = None
                                                        self.remote_lfa_system_pid = None
                                                        self.remote_lfa_router_pid = None
                                                        self.total_backup_distance = None
                                                        self.segment_routing_sid_value = None
                                                        self.num_sid = None
                                                        self.backup_repair_list_size = None
                                                        self.tilfa_computation = None
                                                        self.prefix_source_node_id = None
                                                        self.is_downstream = None
                                                        self.is_lc_disjoint = None
                                                        self.is_node_protecting = None
                                                        self.is_primary_path = None
                                                        self.is_srlg_disjoint = None
                                                        self.is_remote_lfa = None
                                                        self.is_epcfrr_lfa = None
                                                        self.is_strict_spflfa = None
                                                        self.is_tunnel_requested = None
                                                        self.weight = None

                                                        self.segment_routing_sid_value_entry = YList(self)
                                                        self.backup_repair = YList(self)
                                                        self._segment_path = lambda: "frr-backup"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                    class SegmentRoutingSidValueEntry(Entity):
                                                        """
                                                        Segment routing sid values for TI\-LFA/rLFA
                                                        
                                                        .. attribute:: entry
                                                        
                                                        	
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                            self.yang_name = "segment-routing-sid-value-entry"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('entry', YLeaf(YType.uint32, 'entry')),
                                                            ])
                                                            self.entry = None
                                                            self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                    class BackupRepair(Entity):
                                                        """
                                                        BAckup Repair List
                                                        
                                                        .. attribute:: repair_element_node_id
                                                        
                                                        	RepairElementNodeID
                                                        	**type**\: str
                                                        
                                                        .. attribute:: repair_ipv4_addr
                                                        
                                                        	RepairIPv4Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_ipv6_addr
                                                        
                                                        	RepairIPv6Addr
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: repair_label
                                                        
                                                        	Repair Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_element_type
                                                        
                                                        	Repair Element Type
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        .. attribute:: repair_strict_spf_label
                                                        
                                                        	Repair Strict SPF Label
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                            self.yang_name = "backup-repair"
                                                            self.yang_parent_name = "frr-backup"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                                ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                                ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                                ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                                ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                                ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                            ])
                                                            self.repair_element_node_id = None
                                                            self.repair_ipv4_addr = None
                                                            self.repair_ipv6_addr = None
                                                            self.repair_label = None
                                                            self.repair_element_type = None
                                                            self.repair_strict_spf_label = None
                                                            self._segment_path = lambda: "backup-repair"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                                class UloopExplicit(Entity):
                                                    """
                                                    Uloop Explicit List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit, self).__init__()

                                                        self.yang_name = "uloop-explicit"
                                                        self.yang_parent_name = "multicast-path"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "uloop-explicit"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class Parent(Entity):
                                                """
                                                Parents of the IS within the SPT
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent, self).__init__()

                                                    self.yang_name = "parent"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('intermediate_pseudonode', YLeaf(YType.str, 'intermediate-pseudonode')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.intermediate_pseudonode = None
                                                    self._segment_path = lambda: "parent"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Parent, ['neighbor_id', 'intermediate_pseudonode'], name, value)


                                            class Children(Entity):
                                                """
                                                Children of the IS within the SPT
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: intermediate_pseudonode
                                                
                                                	Pseudonode between system and its neighbor
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children, self).__init__()

                                                    self.yang_name = "children"
                                                    self.yang_parent_name = "reachable-details"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('intermediate_pseudonode', YLeaf(YType.str, 'intermediate-pseudonode')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.intermediate_pseudonode = None
                                                    self._segment_path = lambda: "children"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.ReachabilityStatus.ReachableDetails.Children, ['neighbor_id', 'intermediate_pseudonode'], name, value)


                                    class AdvertisedPrefixItemCounts(Entity):
                                        """
                                        Per\-priority counts of prefix items advertised
                                        by the IS
                                        
                                        .. attribute:: critical
                                        
                                        	Critical priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: high
                                        
                                        	High priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: medium
                                        
                                        	Medium priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: low
                                        
                                        	Low priority
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts, self).__init__()

                                            self.yang_name = "advertised-prefix-item-counts"
                                            self.yang_parent_name = "ipv6-link-topology"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('critical', YLeaf(YType.uint32, 'critical')),
                                                ('high', YLeaf(YType.uint32, 'high')),
                                                ('medium', YLeaf(YType.uint32, 'medium')),
                                                ('low', YLeaf(YType.uint32, 'low')),
                                            ])
                                            self.critical = None
                                            self.high = None
                                            self.medium = None
                                            self.low = None
                                            self._segment_path = lambda: "advertised-prefix-item-counts"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.TopologyLevels.TopologyLevel.Ipv6LinkTopologies.Ipv6LinkTopology.AdvertisedPrefixItemCounts, ['critical', 'high', 'medium', 'low'], name, value)


                    class Ipv6Routes(Entity):
                        """
                        IPv6 local route
                        
                        .. attribute:: ipv6_route
                        
                        	An IPv6 route known to IS\-IS
                        	**type**\: list of  		 :py:class:`Ipv6Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes, self).__init__()

                            self.yang_name = "ipv6-routes"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("ipv6-route", ("ipv6_route", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route))])
                            self._leafs = OrderedDict()

                            self.ipv6_route = YList(self)
                            self._segment_path = lambda: "ipv6-routes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes, [], name, value)


                        class Ipv6Route(Entity):
                            """
                            An IPv6 route known to IS\-IS
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..128
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus>`
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  		 :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route, self).__init__()

                                self.yang_name = "ipv6-route"
                                self.yang_parent_name = "ipv6-routes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("connected-status", ("connected_status", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus)), ("redistributed-status", ("redistributed_status", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus)), ("native-status", ("native_status", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus))])
                                self._child_list_classes = OrderedDict([("per-level-advertising-detail", ("per_level_advertising_detail", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail))])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint32, 'prefix-length')),
                                ])
                                self.prefix = None
                                self.prefix_length = None

                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus()
                                self.connected_status.parent = self
                                self._children_name_map["connected_status"] = "connected-status"
                                self._children_yang_names.add("connected-status")

                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus()
                                self.redistributed_status.parent = self
                                self._children_name_map["redistributed_status"] = "redistributed-status"
                                self._children_yang_names.add("redistributed-status")

                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus()
                                self.native_status.parent = self
                                self._children_name_map["native_status"] = "native-status"
                                self._children_yang_names.add("native-status")

                                self.per_level_advertising_detail = YList(self)
                                self._segment_path = lambda: "ipv6-route"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route, ['prefix', 'prefix_length'], name, value)


                            class ConnectedStatus(Entity):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus, self).__init__()

                                    self.yang_name = "connected-status"
                                    self.yang_parent_name = "ipv6-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("connected-details", ("connected_details", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self._children_name_map["connected_details"] = "connected-details"
                                    self._children_yang_names.add("connected-details")
                                    self._segment_path = lambda: "connected-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus, ['is_valid'], name, value)


                                class ConnectedDetails(Entity):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails.Interface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails, self).__init__()

                                        self.yang_name = "connected-details"
                                        self.yang_parent_name = "connected-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("interface", ("interface", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails.Interface))])
                                        self._leafs = OrderedDict()

                                        self.interface = YList(self)
                                        self._segment_path = lambda: "connected-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails, [], name, value)


                                    class Interface(Entity):
                                        """
                                        Interfaces
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails.Interface, self).__init__()

                                            self.yang_name = "interface"
                                            self.yang_parent_name = "connected-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.ConnectedStatus.ConnectedDetails.Interface, ['entry'], name, value)


                            class RedistributedStatus(Entity):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus, self).__init__()

                                    self.yang_name = "redistributed-status"
                                    self.yang_parent_name = "ipv6-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("redistribution-details", ("redistribution_details", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self
                                    self._children_name_map["redistribution_details"] = "redistribution-details"
                                    self._children_yang_names.add("redistribution-details")
                                    self._segment_path = lambda: "redistributed-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus, ['is_valid'], name, value)


                                class RedistributionDetails(Entity):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  		 :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails, self).__init__()

                                        self.yang_name = "redistribution-details"
                                        self.yang_parent_name = "redistributed-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("isis-sh-route-redist-detail", ("isis_sh_route_redist_detail", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail))])
                                        self._leafs = OrderedDict()

                                        self.isis_sh_route_redist_detail = YList(self)
                                        self._segment_path = lambda: "redistribution-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails, [], name, value)


                                    class IsisShRouteRedistDetail(Entity):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, self).__init__()

                                            self.yang_name = "isis-sh-route-redist-detail"
                                            self.yang_parent_name = "redistribution-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("owner", ("owner", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('level', YLeaf(YType.enumeration, 'level')),
                                            ])
                                            self.level = None

                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self
                                            self._children_name_map["owner"] = "owner"
                                            self._children_yang_names.add("owner")
                                            self._segment_path = lambda: "isis-sh-route-redist-detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, ['level'], name, value)


                                        class Owner(Entity):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProto>`
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, self).__init__()

                                                self.yang_name = "owner"
                                                self.yang_parent_name = "isis-sh-route-redist-detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('protocol', YLeaf(YType.enumeration, 'protocol')),
                                                    ('isis_instance_id', YLeaf(YType.str, 'isis-instance-id')),
                                                    ('ospf_process_id', YLeaf(YType.str, 'ospf-process-id')),
                                                    ('ospfv3_process_id', YLeaf(YType.str, 'ospfv3-process-id')),
                                                    ('bgp_as_number', YLeaf(YType.str, 'bgp-as-number')),
                                                    ('eigrp_as_number', YLeaf(YType.str, 'eigrp-as-number')),
                                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                                ])
                                                self.protocol = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.application_name = None
                                                self._segment_path = lambda: "owner"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, ['protocol', 'isis_instance_id', 'ospf_process_id', 'ospfv3_process_id', 'bgp_as_number', 'eigrp_as_number', 'application_name'], name, value)


                            class NativeStatus(Entity):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus, self).__init__()

                                    self.yang_name = "native-status"
                                    self.yang_parent_name = "ipv6-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("native-details", ("native_details", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails()
                                    self.native_details.parent = self
                                    self._children_name_map["native_details"] = "native-details"
                                    self._children_yang_names.add("native-details")
                                    self._segment_path = lambda: "native-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus, ['is_valid'], name, value)


                                class NativeDetails(Entity):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriority>`
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  		 :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails, self).__init__()

                                        self.yang_name = "native-details"
                                        self.yang_parent_name = "native-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("primary", ("primary", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary))])
                                        self._child_list_classes = OrderedDict([("backup", ("backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup))])
                                        self._leafs = OrderedDict([
                                            ('priority', YLeaf(YType.enumeration, 'priority')),
                                        ])
                                        self.priority = None

                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self._children_name_map["primary"] = "primary"
                                        self._children_yang_names.add("primary")

                                        self.backup = YList(self)
                                        self._segment_path = lambda: "native-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails, ['priority'], name, value)


                                    class Primary(Entity):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary, self).__init__()

                                            self.yang_name = "primary"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "primary"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                    class Backup(Entity):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup, self).__init__()

                                            self.yang_name = "backup"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "backup"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                            class PerLevelAdvertisingDetail(Entity):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOrigin>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\: bool
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\: bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\: bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\: bool
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.Tags>`
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail, self).__init__()

                                    self.yang_name = "per-level-advertising-detail"
                                    self.yang_parent_name = "ipv6-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("summarization-status", ("summarization_status", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus))])
                                    self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid))])
                                    self._leafs = OrderedDict([
                                        ('level', YLeaf(YType.enumeration, 'level')),
                                        ('advertising_origin', YLeaf(YType.enumeration, 'advertising-origin')),
                                        ('metric', YLeaf(YType.uint32, 'metric')),
                                        ('is_propagated', YLeaf(YType.boolean, 'is-propagated')),
                                        ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                        ('is_external_reachability', YLeaf(YType.boolean, 'is-external-reachability')),
                                        ('is_interarea', YLeaf(YType.boolean, 'is-interarea')),
                                    ])
                                    self.level = None
                                    self.advertising_origin = None
                                    self.metric = None
                                    self.is_propagated = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None

                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self._children_name_map["summarization_status"] = "summarization-status"
                                    self._children_yang_names.add("summarization-status")

                                    self.tags = YList(self)
                                    self.nodal_sid = YList(self)
                                    self._segment_path = lambda: "per-level-advertising-detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail, ['level', 'advertising_origin', 'metric', 'is_propagated', 'is_external_metric', 'is_external_reachability', 'is_interarea'], name, value)


                                class SummarizationStatus(Entity):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus, self).__init__()

                                        self.yang_name = "summarization-status"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("summary-prefix", ("summary_prefix", Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                        ])
                                        self.is_valid = None

                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self
                                        self._children_name_map["summary_prefix"] = "summary-prefix"
                                        self._children_yang_names.add("summary-prefix")
                                        self._segment_path = lambda: "summarization-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus, ['is_valid'], name, value)


                                    class SummaryPrefix(Entity):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, self).__init__()

                                            self.yang_name = "summary-prefix"
                                            self.yang_parent_name = "summarization-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ])
                                            self.prefix = None
                                            self.prefix_length = None
                                            self._segment_path = lambda: "summary-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, ['prefix', 'prefix_length'], name, value)


                                class Tags(Entity):
                                    """
                                    Tags associated with the prefix
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.Tags, self).__init__()

                                        self.yang_name = "tags"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "tags"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.Tags, ['entry'], name, value)


                                class NodalSid(Entity):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: algorithm
                                    
                                    	algorithm
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid, self).__init__()

                                        self.yang_name = "nodal-sid"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('rflag', YLeaf(YType.uint8, 'rflag')),
                                            ('nflag', YLeaf(YType.uint8, 'nflag')),
                                            ('pflag', YLeaf(YType.uint8, 'pflag')),
                                            ('eflag', YLeaf(YType.uint8, 'eflag')),
                                            ('vflag', YLeaf(YType.uint8, 'vflag')),
                                            ('lflag', YLeaf(YType.uint8, 'lflag')),
                                            ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                        ])
                                        self.sid_value = None
                                        self.rflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.eflag = None
                                        self.vflag = None
                                        self.lflag = None
                                        self.algorithm = None
                                        self._segment_path = lambda: "nodal-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6Routes.Ipv6Route.PerLevelAdvertisingDetail.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                    class Ipv6FrrBackups(Entity):
                        """
                        IPv6 FRR table
                        
                        .. attribute:: ipv6frr_backup
                        
                        	FRR backup for an IPv6 network
                        	**type**\: list of  		 :py:class:`Ipv6FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups, self).__init__()

                            self.yang_name = "ipv6frr-backups"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("ipv6frr-backup", ("ipv6frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup))])
                            self._leafs = OrderedDict()

                            self.ipv6frr_backup = YList(self)
                            self._segment_path = lambda: "ipv6frr-backups"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups, [], name, value)


                        class Ipv6FrrBackup(Entity):
                            """
                            FRR backup for an IPv6 network
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..128
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus>`
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  		 :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup, self).__init__()

                                self.yang_name = "ipv6frr-backup"
                                self.yang_parent_name = "ipv6frr-backups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("connected-status", ("connected_status", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus)), ("redistributed-status", ("redistributed_status", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus)), ("native-status", ("native_status", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus))])
                                self._child_list_classes = OrderedDict([("per-level-advertising-detail", ("per_level_advertising_detail", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail))])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint32, 'prefix-length')),
                                ])
                                self.prefix = None
                                self.prefix_length = None

                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus()
                                self.connected_status.parent = self
                                self._children_name_map["connected_status"] = "connected-status"
                                self._children_yang_names.add("connected-status")

                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus()
                                self.redistributed_status.parent = self
                                self._children_name_map["redistributed_status"] = "redistributed-status"
                                self._children_yang_names.add("redistributed-status")

                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus()
                                self.native_status.parent = self
                                self._children_name_map["native_status"] = "native-status"
                                self._children_yang_names.add("native-status")

                                self.per_level_advertising_detail = YList(self)
                                self._segment_path = lambda: "ipv6frr-backup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup, ['prefix', 'prefix_length'], name, value)


                            class ConnectedStatus(Entity):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus, self).__init__()

                                    self.yang_name = "connected-status"
                                    self.yang_parent_name = "ipv6frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("connected-details", ("connected_details", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self._children_name_map["connected_details"] = "connected-details"
                                    self._children_yang_names.add("connected-details")
                                    self._segment_path = lambda: "connected-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus, ['is_valid'], name, value)


                                class ConnectedDetails(Entity):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails.Interface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails, self).__init__()

                                        self.yang_name = "connected-details"
                                        self.yang_parent_name = "connected-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("interface", ("interface", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails.Interface))])
                                        self._leafs = OrderedDict()

                                        self.interface = YList(self)
                                        self._segment_path = lambda: "connected-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails, [], name, value)


                                    class Interface(Entity):
                                        """
                                        Interfaces
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails.Interface, self).__init__()

                                            self.yang_name = "interface"
                                            self.yang_parent_name = "connected-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.ConnectedStatus.ConnectedDetails.Interface, ['entry'], name, value)


                            class RedistributedStatus(Entity):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus, self).__init__()

                                    self.yang_name = "redistributed-status"
                                    self.yang_parent_name = "ipv6frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("redistribution-details", ("redistribution_details", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self
                                    self._children_name_map["redistribution_details"] = "redistribution-details"
                                    self._children_yang_names.add("redistribution-details")
                                    self._segment_path = lambda: "redistributed-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus, ['is_valid'], name, value)


                                class RedistributionDetails(Entity):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  		 :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails, self).__init__()

                                        self.yang_name = "redistribution-details"
                                        self.yang_parent_name = "redistributed-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("isis-sh-route-redist-detail", ("isis_sh_route_redist_detail", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail))])
                                        self._leafs = OrderedDict()

                                        self.isis_sh_route_redist_detail = YList(self)
                                        self._segment_path = lambda: "redistribution-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails, [], name, value)


                                    class IsisShRouteRedistDetail(Entity):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, self).__init__()

                                            self.yang_name = "isis-sh-route-redist-detail"
                                            self.yang_parent_name = "redistribution-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("owner", ("owner", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('level', YLeaf(YType.enumeration, 'level')),
                                            ])
                                            self.level = None

                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self
                                            self._children_name_map["owner"] = "owner"
                                            self._children_yang_names.add("owner")
                                            self._segment_path = lambda: "isis-sh-route-redist-detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, ['level'], name, value)


                                        class Owner(Entity):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProto>`
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, self).__init__()

                                                self.yang_name = "owner"
                                                self.yang_parent_name = "isis-sh-route-redist-detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('protocol', YLeaf(YType.enumeration, 'protocol')),
                                                    ('isis_instance_id', YLeaf(YType.str, 'isis-instance-id')),
                                                    ('ospf_process_id', YLeaf(YType.str, 'ospf-process-id')),
                                                    ('ospfv3_process_id', YLeaf(YType.str, 'ospfv3-process-id')),
                                                    ('bgp_as_number', YLeaf(YType.str, 'bgp-as-number')),
                                                    ('eigrp_as_number', YLeaf(YType.str, 'eigrp-as-number')),
                                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                                ])
                                                self.protocol = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.application_name = None
                                                self._segment_path = lambda: "owner"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, ['protocol', 'isis_instance_id', 'ospf_process_id', 'ospfv3_process_id', 'bgp_as_number', 'eigrp_as_number', 'application_name'], name, value)


                            class NativeStatus(Entity):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus, self).__init__()

                                    self.yang_name = "native-status"
                                    self.yang_parent_name = "ipv6frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("native-details", ("native_details", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails()
                                    self.native_details.parent = self
                                    self._children_name_map["native_details"] = "native-details"
                                    self._children_yang_names.add("native-details")
                                    self._segment_path = lambda: "native-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus, ['is_valid'], name, value)


                                class NativeDetails(Entity):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriority>`
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  		 :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails, self).__init__()

                                        self.yang_name = "native-details"
                                        self.yang_parent_name = "native-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("primary", ("primary", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary))])
                                        self._child_list_classes = OrderedDict([("backup", ("backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup))])
                                        self._leafs = OrderedDict([
                                            ('priority', YLeaf(YType.enumeration, 'priority')),
                                        ])
                                        self.priority = None

                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self._children_name_map["primary"] = "primary"
                                        self._children_yang_names.add("primary")

                                        self.backup = YList(self)
                                        self._segment_path = lambda: "native-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails, ['priority'], name, value)


                                    class Primary(Entity):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary, self).__init__()

                                            self.yang_name = "primary"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "primary"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                    class Backup(Entity):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup, self).__init__()

                                            self.yang_name = "backup"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "backup"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	BAckup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    BAckup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                            class PerLevelAdvertisingDetail(Entity):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOrigin>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\: bool
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\: bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\: bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\: bool
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.Tags>`
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail, self).__init__()

                                    self.yang_name = "per-level-advertising-detail"
                                    self.yang_parent_name = "ipv6frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("summarization-status", ("summarization_status", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus))])
                                    self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid))])
                                    self._leafs = OrderedDict([
                                        ('level', YLeaf(YType.enumeration, 'level')),
                                        ('advertising_origin', YLeaf(YType.enumeration, 'advertising-origin')),
                                        ('metric', YLeaf(YType.uint32, 'metric')),
                                        ('is_propagated', YLeaf(YType.boolean, 'is-propagated')),
                                        ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                        ('is_external_reachability', YLeaf(YType.boolean, 'is-external-reachability')),
                                        ('is_interarea', YLeaf(YType.boolean, 'is-interarea')),
                                    ])
                                    self.level = None
                                    self.advertising_origin = None
                                    self.metric = None
                                    self.is_propagated = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None

                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self._children_name_map["summarization_status"] = "summarization-status"
                                    self._children_yang_names.add("summarization-status")

                                    self.tags = YList(self)
                                    self.nodal_sid = YList(self)
                                    self._segment_path = lambda: "per-level-advertising-detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail, ['level', 'advertising_origin', 'metric', 'is_propagated', 'is_external_metric', 'is_external_reachability', 'is_interarea'], name, value)


                                class SummarizationStatus(Entity):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus, self).__init__()

                                        self.yang_name = "summarization-status"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("summary-prefix", ("summary_prefix", Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                        ])
                                        self.is_valid = None

                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self
                                        self._children_name_map["summary_prefix"] = "summary-prefix"
                                        self._children_yang_names.add("summary-prefix")
                                        self._segment_path = lambda: "summarization-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus, ['is_valid'], name, value)


                                    class SummaryPrefix(Entity):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, self).__init__()

                                            self.yang_name = "summary-prefix"
                                            self.yang_parent_name = "summarization-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ])
                                            self.prefix = None
                                            self.prefix_length = None
                                            self._segment_path = lambda: "summary-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, ['prefix', 'prefix_length'], name, value)


                                class Tags(Entity):
                                    """
                                    Tags associated with the prefix
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.Tags, self).__init__()

                                        self.yang_name = "tags"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "tags"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.Tags, ['entry'], name, value)


                                class NodalSid(Entity):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: algorithm
                                    
                                    	algorithm
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid, self).__init__()

                                        self.yang_name = "nodal-sid"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('rflag', YLeaf(YType.uint8, 'rflag')),
                                            ('nflag', YLeaf(YType.uint8, 'nflag')),
                                            ('pflag', YLeaf(YType.uint8, 'pflag')),
                                            ('eflag', YLeaf(YType.uint8, 'eflag')),
                                            ('vflag', YLeaf(YType.uint8, 'vflag')),
                                            ('lflag', YLeaf(YType.uint8, 'lflag')),
                                            ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                        ])
                                        self.sid_value = None
                                        self.rflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.eflag = None
                                        self.vflag = None
                                        self.lflag = None
                                        self.algorithm = None
                                        self._segment_path = lambda: "nodal-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv6FrrBackups.Ipv6FrrBackup.PerLevelAdvertisingDetail.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                    class Ipv4FrrBackups(Entity):
                        """
                        IPv4 FRR table
                        
                        .. attribute:: ipv4frr_backup
                        
                        	FRR backup for an IPv4 network
                        	**type**\: list of  		 :py:class:`Ipv4FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups, self).__init__()

                            self.yang_name = "ipv4frr-backups"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("ipv4frr-backup", ("ipv4frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup))])
                            self._leafs = OrderedDict()

                            self.ipv4frr_backup = YList(self)
                            self._segment_path = lambda: "ipv4frr-backups"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups, [], name, value)


                        class Ipv4FrrBackup(Entity):
                            """
                            FRR backup for an IPv4 network
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..32
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus>`
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  		 :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup, self).__init__()

                                self.yang_name = "ipv4frr-backup"
                                self.yang_parent_name = "ipv4frr-backups"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("connected-status", ("connected_status", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus)), ("redistributed-status", ("redistributed_status", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus)), ("native-status", ("native_status", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus))])
                                self._child_list_classes = OrderedDict([("per-level-advertising-detail", ("per_level_advertising_detail", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail))])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint32, 'prefix-length')),
                                ])
                                self.prefix = None
                                self.prefix_length = None

                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus()
                                self.connected_status.parent = self
                                self._children_name_map["connected_status"] = "connected-status"
                                self._children_yang_names.add("connected-status")

                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus()
                                self.redistributed_status.parent = self
                                self._children_name_map["redistributed_status"] = "redistributed-status"
                                self._children_yang_names.add("redistributed-status")

                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus()
                                self.native_status.parent = self
                                self._children_name_map["native_status"] = "native-status"
                                self._children_yang_names.add("native-status")

                                self.per_level_advertising_detail = YList(self)
                                self._segment_path = lambda: "ipv4frr-backup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup, ['prefix', 'prefix_length'], name, value)


                            class ConnectedStatus(Entity):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus, self).__init__()

                                    self.yang_name = "connected-status"
                                    self.yang_parent_name = "ipv4frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("connected-details", ("connected_details", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self._children_name_map["connected_details"] = "connected-details"
                                    self._children_yang_names.add("connected-details")
                                    self._segment_path = lambda: "connected-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus, ['is_valid'], name, value)


                                class ConnectedDetails(Entity):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails.Interface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails, self).__init__()

                                        self.yang_name = "connected-details"
                                        self.yang_parent_name = "connected-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("interface", ("interface", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails.Interface))])
                                        self._leafs = OrderedDict()

                                        self.interface = YList(self)
                                        self._segment_path = lambda: "connected-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails, [], name, value)


                                    class Interface(Entity):
                                        """
                                        Interfaces
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails.Interface, self).__init__()

                                            self.yang_name = "interface"
                                            self.yang_parent_name = "connected-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.ConnectedStatus.ConnectedDetails.Interface, ['entry'], name, value)


                            class RedistributedStatus(Entity):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus, self).__init__()

                                    self.yang_name = "redistributed-status"
                                    self.yang_parent_name = "ipv4frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("redistribution-details", ("redistribution_details", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self
                                    self._children_name_map["redistribution_details"] = "redistribution-details"
                                    self._children_yang_names.add("redistribution-details")
                                    self._segment_path = lambda: "redistributed-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus, ['is_valid'], name, value)


                                class RedistributionDetails(Entity):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  		 :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails, self).__init__()

                                        self.yang_name = "redistribution-details"
                                        self.yang_parent_name = "redistributed-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("isis-sh-route-redist-detail", ("isis_sh_route_redist_detail", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail))])
                                        self._leafs = OrderedDict()

                                        self.isis_sh_route_redist_detail = YList(self)
                                        self._segment_path = lambda: "redistribution-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails, [], name, value)


                                    class IsisShRouteRedistDetail(Entity):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, self).__init__()

                                            self.yang_name = "isis-sh-route-redist-detail"
                                            self.yang_parent_name = "redistribution-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("owner", ("owner", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('level', YLeaf(YType.enumeration, 'level')),
                                            ])
                                            self.level = None

                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self
                                            self._children_name_map["owner"] = "owner"
                                            self._children_yang_names.add("owner")
                                            self._segment_path = lambda: "isis-sh-route-redist-detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, ['level'], name, value)


                                        class Owner(Entity):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProto>`
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, self).__init__()

                                                self.yang_name = "owner"
                                                self.yang_parent_name = "isis-sh-route-redist-detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('protocol', YLeaf(YType.enumeration, 'protocol')),
                                                    ('isis_instance_id', YLeaf(YType.str, 'isis-instance-id')),
                                                    ('ospf_process_id', YLeaf(YType.str, 'ospf-process-id')),
                                                    ('ospfv3_process_id', YLeaf(YType.str, 'ospfv3-process-id')),
                                                    ('bgp_as_number', YLeaf(YType.str, 'bgp-as-number')),
                                                    ('eigrp_as_number', YLeaf(YType.str, 'eigrp-as-number')),
                                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                                ])
                                                self.protocol = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.application_name = None
                                                self._segment_path = lambda: "owner"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, ['protocol', 'isis_instance_id', 'ospf_process_id', 'ospfv3_process_id', 'bgp_as_number', 'eigrp_as_number', 'application_name'], name, value)


                            class NativeStatus(Entity):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus, self).__init__()

                                    self.yang_name = "native-status"
                                    self.yang_parent_name = "ipv4frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("native-details", ("native_details", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails()
                                    self.native_details.parent = self
                                    self._children_name_map["native_details"] = "native-details"
                                    self._children_yang_names.add("native-details")
                                    self._segment_path = lambda: "native-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus, ['is_valid'], name, value)


                                class NativeDetails(Entity):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriority>`
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  		 :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails, self).__init__()

                                        self.yang_name = "native-details"
                                        self.yang_parent_name = "native-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("primary", ("primary", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary))])
                                        self._child_list_classes = OrderedDict([("backup", ("backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup))])
                                        self._leafs = OrderedDict([
                                            ('priority', YLeaf(YType.enumeration, 'priority')),
                                        ])
                                        self.priority = None

                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self._children_name_map["primary"] = "primary"
                                        self._children_yang_names.add("primary")

                                        self.backup = YList(self)
                                        self._segment_path = lambda: "native-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails, ['priority'], name, value)


                                    class Primary(Entity):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary, self).__init__()

                                            self.yang_name = "primary"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "primary"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                    class Backup(Entity):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup, self).__init__()

                                            self.yang_name = "backup"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "backup"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                            class PerLevelAdvertisingDetail(Entity):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOrigin>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\: bool
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\: bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\: bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\: bool
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.Tags>`
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail, self).__init__()

                                    self.yang_name = "per-level-advertising-detail"
                                    self.yang_parent_name = "ipv4frr-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("summarization-status", ("summarization_status", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus))])
                                    self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid))])
                                    self._leafs = OrderedDict([
                                        ('level', YLeaf(YType.enumeration, 'level')),
                                        ('advertising_origin', YLeaf(YType.enumeration, 'advertising-origin')),
                                        ('metric', YLeaf(YType.uint32, 'metric')),
                                        ('is_propagated', YLeaf(YType.boolean, 'is-propagated')),
                                        ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                        ('is_external_reachability', YLeaf(YType.boolean, 'is-external-reachability')),
                                        ('is_interarea', YLeaf(YType.boolean, 'is-interarea')),
                                    ])
                                    self.level = None
                                    self.advertising_origin = None
                                    self.metric = None
                                    self.is_propagated = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None

                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self._children_name_map["summarization_status"] = "summarization-status"
                                    self._children_yang_names.add("summarization-status")

                                    self.tags = YList(self)
                                    self.nodal_sid = YList(self)
                                    self._segment_path = lambda: "per-level-advertising-detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail, ['level', 'advertising_origin', 'metric', 'is_propagated', 'is_external_metric', 'is_external_reachability', 'is_interarea'], name, value)


                                class SummarizationStatus(Entity):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus, self).__init__()

                                        self.yang_name = "summarization-status"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("summary-prefix", ("summary_prefix", Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                        ])
                                        self.is_valid = None

                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self
                                        self._children_name_map["summary_prefix"] = "summary-prefix"
                                        self._children_yang_names.add("summary-prefix")
                                        self._segment_path = lambda: "summarization-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus, ['is_valid'], name, value)


                                    class SummaryPrefix(Entity):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, self).__init__()

                                            self.yang_name = "summary-prefix"
                                            self.yang_parent_name = "summarization-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ])
                                            self.prefix = None
                                            self.prefix_length = None
                                            self._segment_path = lambda: "summary-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, ['prefix', 'prefix_length'], name, value)


                                class Tags(Entity):
                                    """
                                    Tags associated with the prefix
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.Tags, self).__init__()

                                        self.yang_name = "tags"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "tags"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.Tags, ['entry'], name, value)


                                class NodalSid(Entity):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: algorithm
                                    
                                    	algorithm
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid, self).__init__()

                                        self.yang_name = "nodal-sid"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('rflag', YLeaf(YType.uint8, 'rflag')),
                                            ('nflag', YLeaf(YType.uint8, 'nflag')),
                                            ('pflag', YLeaf(YType.uint8, 'pflag')),
                                            ('eflag', YLeaf(YType.uint8, 'eflag')),
                                            ('vflag', YLeaf(YType.uint8, 'vflag')),
                                            ('lflag', YLeaf(YType.uint8, 'lflag')),
                                            ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                        ])
                                        self.sid_value = None
                                        self.rflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.eflag = None
                                        self.vflag = None
                                        self.lflag = None
                                        self.algorithm = None
                                        self._segment_path = lambda: "nodal-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4FrrBackups.Ipv4FrrBackup.PerLevelAdvertisingDetail.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                    class Ipv4Routes(Entity):
                        """
                        IPv4 local route table
                        
                        .. attribute:: ipv4_route
                        
                        	An IPv4 route known to IS\-IS
                        	**type**\: list of  		 :py:class:`Ipv4Route <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes, self).__init__()

                            self.yang_name = "ipv4-routes"
                            self.yang_parent_name = "topology"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("ipv4-route", ("ipv4_route", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route))])
                            self._leafs = OrderedDict()

                            self.ipv4_route = YList(self)
                            self._segment_path = lambda: "ipv4-routes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes, [], name, value)


                        class Ipv4Route(Entity):
                            """
                            An IPv4 route known to IS\-IS
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..32
                            
                            .. attribute:: connected_status
                            
                            	Status of IS\-IS directly connected routes to the prefix
                            	**type**\:  :py:class:`ConnectedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus>`
                            
                            .. attribute:: redistributed_status
                            
                            	Status of other protocols' routes redistributed into IS\-IS
                            	**type**\:  :py:class:`RedistributedStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus>`
                            
                            .. attribute:: native_status
                            
                            	Status of native IS\-IS routes to the prefix
                            	**type**\:  :py:class:`NativeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus>`
                            
                            .. attribute:: per_level_advertising_detail
                            
                            	Per level details of how the local system advertises the prefix
                            	**type**\: list of  		 :py:class:`PerLevelAdvertisingDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route, self).__init__()

                                self.yang_name = "ipv4-route"
                                self.yang_parent_name = "ipv4-routes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("connected-status", ("connected_status", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus)), ("redistributed-status", ("redistributed_status", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus)), ("native-status", ("native_status", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus))])
                                self._child_list_classes = OrderedDict([("per-level-advertising-detail", ("per_level_advertising_detail", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail))])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint32, 'prefix-length')),
                                ])
                                self.prefix = None
                                self.prefix_length = None

                                self.connected_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus()
                                self.connected_status.parent = self
                                self._children_name_map["connected_status"] = "connected-status"
                                self._children_yang_names.add("connected-status")

                                self.redistributed_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus()
                                self.redistributed_status.parent = self
                                self._children_name_map["redistributed_status"] = "redistributed-status"
                                self._children_yang_names.add("redistributed-status")

                                self.native_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus()
                                self.native_status.parent = self
                                self._children_name_map["native_status"] = "native-status"
                                self._children_yang_names.add("native-status")

                                self.per_level_advertising_detail = YList(self)
                                self._segment_path = lambda: "ipv4-route"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route, ['prefix', 'prefix_length'], name, value)


                            class ConnectedStatus(Entity):
                                """
                                Status of IS\-IS directly connected routes to the
                                prefix
                                
                                .. attribute:: connected_details
                                
                                	Details of the directly connected prefix
                                	**type**\:  :py:class:`ConnectedDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus, self).__init__()

                                    self.yang_name = "connected-status"
                                    self.yang_parent_name = "ipv4-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("connected-details", ("connected_details", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.connected_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails()
                                    self.connected_details.parent = self
                                    self._children_name_map["connected_details"] = "connected-details"
                                    self._children_yang_names.add("connected-details")
                                    self._segment_path = lambda: "connected-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus, ['is_valid'], name, value)


                                class ConnectedDetails(Entity):
                                    """
                                    Details of the directly connected prefix
                                    
                                    .. attribute:: interface
                                    
                                    	Interfaces
                                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails.Interface>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails, self).__init__()

                                        self.yang_name = "connected-details"
                                        self.yang_parent_name = "connected-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("interface", ("interface", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails.Interface))])
                                        self._leafs = OrderedDict()

                                        self.interface = YList(self)
                                        self._segment_path = lambda: "connected-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails, [], name, value)


                                    class Interface(Entity):
                                        """
                                        Interfaces
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails.Interface, self).__init__()

                                            self.yang_name = "interface"
                                            self.yang_parent_name = "connected-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "interface"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.ConnectedStatus.ConnectedDetails.Interface, ['entry'], name, value)


                            class RedistributedStatus(Entity):
                                """
                                Status of other protocols' routes redistributed
                                into IS\-IS
                                
                                .. attribute:: redistribution_details
                                
                                	Per level details of the redistributed route
                                	**type**\:  :py:class:`RedistributionDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus, self).__init__()

                                    self.yang_name = "redistributed-status"
                                    self.yang_parent_name = "ipv4-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("redistribution-details", ("redistribution_details", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.redistribution_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails()
                                    self.redistribution_details.parent = self
                                    self._children_name_map["redistribution_details"] = "redistribution-details"
                                    self._children_yang_names.add("redistribution-details")
                                    self._segment_path = lambda: "redistributed-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus, ['is_valid'], name, value)


                                class RedistributionDetails(Entity):
                                    """
                                    Per level details of the redistributed route
                                    
                                    .. attribute:: isis_sh_route_redist_detail
                                    
                                    	isis sh route redist detail
                                    	**type**\: list of  		 :py:class:`IsisShRouteRedistDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails, self).__init__()

                                        self.yang_name = "redistribution-details"
                                        self.yang_parent_name = "redistributed-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("isis-sh-route-redist-detail", ("isis_sh_route_redist_detail", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail))])
                                        self._leafs = OrderedDict()

                                        self.isis_sh_route_redist_detail = YList(self)
                                        self._segment_path = lambda: "redistribution-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails, [], name, value)


                                    class IsisShRouteRedistDetail(Entity):
                                        """
                                        isis sh route redist detail
                                        
                                        .. attribute:: owner
                                        
                                        	Protocol redistributing the route
                                        	**type**\:  :py:class:`Owner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner>`
                                        
                                        .. attribute:: level
                                        
                                        	Level into which the route is redistributed
                                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, self).__init__()

                                            self.yang_name = "isis-sh-route-redist-detail"
                                            self.yang_parent_name = "redistribution-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("owner", ("owner", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('level', YLeaf(YType.enumeration, 'level')),
                                            ])
                                            self.level = None

                                            self.owner = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner()
                                            self.owner.parent = self
                                            self._children_name_map["owner"] = "owner"
                                            self._children_yang_names.add("owner")
                                            self._segment_path = lambda: "isis-sh-route-redist-detail"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail, ['level'], name, value)


                                        class Owner(Entity):
                                            """
                                            Protocol redistributing the route
                                            
                                            .. attribute:: protocol
                                            
                                            	Protocol
                                            	**type**\:  :py:class:`IsisRedistProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProto>`
                                            
                                            .. attribute:: isis_instance_id
                                            
                                            	IS\-IS instance identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospf_process_id
                                            
                                            	OSPF process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: ospfv3_process_id
                                            
                                            	OSPFv3 process identifier
                                            	**type**\: str
                                            
                                            .. attribute:: bgp_as_number
                                            
                                            	BGP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: eigrp_as_number
                                            
                                            	EIGRP Autonomous System number
                                            	**type**\: str
                                            
                                            .. attribute:: application_name
                                            
                                            	Application Name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, self).__init__()

                                                self.yang_name = "owner"
                                                self.yang_parent_name = "isis-sh-route-redist-detail"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('protocol', YLeaf(YType.enumeration, 'protocol')),
                                                    ('isis_instance_id', YLeaf(YType.str, 'isis-instance-id')),
                                                    ('ospf_process_id', YLeaf(YType.str, 'ospf-process-id')),
                                                    ('ospfv3_process_id', YLeaf(YType.str, 'ospfv3-process-id')),
                                                    ('bgp_as_number', YLeaf(YType.str, 'bgp-as-number')),
                                                    ('eigrp_as_number', YLeaf(YType.str, 'eigrp-as-number')),
                                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                                ])
                                                self.protocol = None
                                                self.isis_instance_id = None
                                                self.ospf_process_id = None
                                                self.ospfv3_process_id = None
                                                self.bgp_as_number = None
                                                self.eigrp_as_number = None
                                                self.application_name = None
                                                self._segment_path = lambda: "owner"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.RedistributedStatus.RedistributionDetails.IsisShRouteRedistDetail.Owner, ['protocol', 'isis_instance_id', 'ospf_process_id', 'ospfv3_process_id', 'bgp_as_number', 'eigrp_as_number', 'application_name'], name, value)


                            class NativeStatus(Entity):
                                """
                                Status of native IS\-IS routes to the prefix
                                
                                .. attribute:: native_details
                                
                                	Details of the native route
                                	**type**\:  :py:class:`NativeDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails>`
                                
                                .. attribute:: is_valid
                                
                                	IsValid
                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus, self).__init__()

                                    self.yang_name = "native-status"
                                    self.yang_parent_name = "ipv4-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("native-details", ("native_details", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                    ])
                                    self.is_valid = None

                                    self.native_details = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails()
                                    self.native_details.parent = self
                                    self._children_name_map["native_details"] = "native-details"
                                    self._children_yang_names.add("native-details")
                                    self._segment_path = lambda: "native-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus, ['is_valid'], name, value)


                                class NativeDetails(Entity):
                                    """
                                    Details of the native route
                                    
                                    .. attribute:: primary
                                    
                                    	Primary paths to prefix
                                    	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary>`
                                    
                                    .. attribute:: priority
                                    
                                    	Relative importance of the prefix
                                    	**type**\:  :py:class:`IsisPrefixPriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixPriority>`
                                    
                                    .. attribute:: backup
                                    
                                    	Backup paths to prefix
                                    	**type**\: list of  		 :py:class:`Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails, self).__init__()

                                        self.yang_name = "native-details"
                                        self.yang_parent_name = "native-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("primary", ("primary", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary))])
                                        self._child_list_classes = OrderedDict([("backup", ("backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup))])
                                        self._leafs = OrderedDict([
                                            ('priority', YLeaf(YType.enumeration, 'priority')),
                                        ])
                                        self.priority = None

                                        self.primary = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary()
                                        self.primary.parent = self
                                        self._children_name_map["primary"] = "primary"
                                        self._children_yang_names.add("primary")

                                        self.backup = YList(self)
                                        self._segment_path = lambda: "native-details"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails, ['priority'], name, value)


                                    class Primary(Entity):
                                        """
                                        Primary paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary, self).__init__()

                                            self.yang_name = "primary"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "primary"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "primary"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Primary.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                    class Backup(Entity):
                                        """
                                        Backup paths to prefix
                                        
                                        .. attribute:: origin
                                        
                                        	Origin of route
                                        	**type**\:  :py:class:`IsisPrefixOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisPrefixOrigin>`
                                        
                                        .. attribute:: metric
                                        
                                        	Distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: multicast_metric
                                        
                                        	Multicast\-intact distance to network
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: is_external_metric
                                        
                                        	Is the metric an external metric?
                                        	**type**\: bool
                                        
                                        .. attribute:: administrative_distance
                                        
                                        	Administrative Distance
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: paths
                                        
                                        	First hops toward the prefix
                                        	**type**\: list of  		 :py:class:`Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths>`
                                        
                                        .. attribute:: ucmp_next_hop
                                        
                                        	UCMP first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`UcmpNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop>`
                                        
                                        .. attribute:: multicast_path
                                        
                                        	Multicast intact first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`MulticastPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath>`
                                        
                                        .. attribute:: srte_path
                                        
                                        	SR\-TE native first hops toward the prefix
                                        	**type**\: list of  		 :py:class:`SrtePath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath>`
                                        
                                        .. attribute:: explicit_path
                                        
                                        	SR microloop avoidance paths
                                        	**type**\: list of  		 :py:class:`ExplicitPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath>`
                                        
                                        .. attribute:: source
                                        
                                        	Sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source>`
                                        
                                        .. attribute:: multicast_source
                                        
                                        	Multicast\-intact sources advertising the prefix
                                        	**type**\: list of  		 :py:class:`MulticastSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup, self).__init__()

                                            self.yang_name = "backup"
                                            self.yang_parent_name = "native-details"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("paths", ("paths", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths)), ("ucmp-next-hop", ("ucmp_next_hop", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop)), ("multicast-path", ("multicast_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath)), ("srte-path", ("srte_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath)), ("explicit-path", ("explicit_path", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath)), ("source", ("source", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source)), ("multicast-source", ("multicast_source", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource))])
                                            self._leafs = OrderedDict([
                                                ('origin', YLeaf(YType.enumeration, 'origin')),
                                                ('metric', YLeaf(YType.uint32, 'metric')),
                                                ('multicast_metric', YLeaf(YType.uint32, 'multicast-metric')),
                                                ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                                ('administrative_distance', YLeaf(YType.uint16, 'administrative-distance')),
                                            ])
                                            self.origin = None
                                            self.metric = None
                                            self.multicast_metric = None
                                            self.is_external_metric = None
                                            self.administrative_distance = None

                                            self.paths = YList(self)
                                            self.ucmp_next_hop = YList(self)
                                            self.multicast_path = YList(self)
                                            self.srte_path = YList(self)
                                            self.explicit_path = YList(self)
                                            self.source = YList(self)
                                            self.multicast_source = YList(self)
                                            self._segment_path = lambda: "backup"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup, ['origin', 'metric', 'multicast_metric', 'is_external_metric', 'administrative_distance'], name, value)


                                        class Paths(Entity):
                                            """
                                            First hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths, self).__init__()

                                                self.yang_name = "paths"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "paths"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "paths"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Paths.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class UcmpNextHop(Entity):
                                            """
                                            UCMP first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: total_ucmp_distance
                                            
                                            	Distance to the network via this UCMP next hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop, self).__init__()

                                                self.yang_name = "ucmp-next-hop"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('total_ucmp_distance', YLeaf(YType.uint32, 'total-ucmp-distance')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.total_ucmp_distance = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")
                                                self._segment_path = lambda: "ucmp-next-hop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'total_ucmp_distance', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "ucmp-next-hop"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.UcmpNextHop.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class MulticastPath(Entity):
                                            """
                                            Multicast intact first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath, self).__init__()

                                                self.yang_name = "multicast-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "multicast-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "multicast-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class SrtePath(Entity):
                                            """
                                            SR\-TE native first hops toward the prefix
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath, self).__init__()

                                                self.yang_name = "srte-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "srte-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "srte-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.SrtePath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class ExplicitPath(Entity):
                                            """
                                            SR microloop avoidance paths
                                            
                                            .. attribute:: frr_backup
                                            
                                            	FRR backup for this path
                                            	**type**\:  :py:class:`FrrBackup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup>`
                                            
                                            .. attribute:: neighbor_id
                                            
                                            	Next hop neighbor ID
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: egress_interface
                                            
                                            	Interface to send the packet out of
                                            	**type**\: str
                                            
                                            .. attribute:: neighbor_address
                                            
                                            	Next hop neighbor's forwarding address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: neighbor_snpa
                                            
                                            	Next hop neighbor's SNPA
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                            
                                            .. attribute:: tag
                                            
                                            	Tag associated with the path
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: tunnel_interface
                                            
                                            	Explicit path tunnel interface
                                            	**type**\: str
                                            
                                            .. attribute:: segment_routing_sid_value
                                            
                                            	Segment routing sid value received from first hop
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: weight
                                            
                                            	Weight configured on the interface
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: is_te_tunnel_interface
                                            
                                            	Is path via a TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: is_sr_exclude_tunnel_interface
                                            
                                            	Is path via an SR\-exclude TE tunnel
                                            	**type**\: bool
                                            
                                            .. attribute:: uloop_explicit
                                            
                                            	Uloop Explicit List
                                            	**type**\: list of  		 :py:class:`UloopExplicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath, self).__init__()

                                                self.yang_name = "explicit-path"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("frr-backup", ("frr_backup", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup))])
                                                self._child_list_classes = OrderedDict([("uloop-explicit", ("uloop_explicit", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit))])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                    ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                    ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                    ('tag', YLeaf(YType.uint32, 'tag')),
                                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                                    ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                    ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ('is_te_tunnel_interface', YLeaf(YType.boolean, 'is-te-tunnel-interface')),
                                                    ('is_sr_exclude_tunnel_interface', YLeaf(YType.boolean, 'is-sr-exclude-tunnel-interface')),
                                                ])
                                                self.neighbor_id = None
                                                self.egress_interface = None
                                                self.neighbor_address = None
                                                self.neighbor_snpa = None
                                                self.tag = None
                                                self.tunnel_interface = None
                                                self.segment_routing_sid_value = None
                                                self.weight = None
                                                self.is_te_tunnel_interface = None
                                                self.is_sr_exclude_tunnel_interface = None

                                                self.frr_backup = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup()
                                                self.frr_backup.parent = self
                                                self._children_name_map["frr_backup"] = "frr-backup"
                                                self._children_yang_names.add("frr-backup")

                                                self.uloop_explicit = YList(self)
                                                self._segment_path = lambda: "explicit-path"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath, ['neighbor_id', 'egress_interface', 'neighbor_address', 'neighbor_snpa', 'tag', 'tunnel_interface', 'segment_routing_sid_value', 'weight', 'is_te_tunnel_interface', 'is_sr_exclude_tunnel_interface'], name, value)


                                            class FrrBackup(Entity):
                                                """
                                                FRR backup for this path
                                                
                                                .. attribute:: neighbor_id
                                                
                                                	Next hop neighbor ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: egress_interface
                                                
                                                	Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_address
                                                
                                                	Next hop neighbor's forwarding address
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: tunnel_egress_interface
                                                
                                                	Tunnel Interface to send the packet out of
                                                	**type**\: str
                                                
                                                .. attribute:: neighbor_snpa
                                                
                                                	Next hop neighbor's SNPA
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_system_id
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_id
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: remote_lfa_system_pid
                                                
                                                	Remote LFA PQ Node's ID
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                                
                                                .. attribute:: remote_lfa_router_pid
                                                
                                                	Remote LFA Router ID
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: total_backup_distance
                                                
                                                	Distance to the network via this backup path
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value
                                                
                                                	Segment routing sid value received from first hop
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: num_sid
                                                
                                                	Number of SIDs in TI\-LFA/rLFA
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: backup_repair_list_size
                                                
                                                	Backup Repair List Size
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: tilfa_computation
                                                
                                                	Ti LFA computation which provided backup path
                                                	**type**\:  :py:class:`IsisTilfaComputation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisTilfaComputation>`
                                                
                                                .. attribute:: prefix_source_node_id
                                                
                                                	PrefixSourceNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: is_downstream
                                                
                                                	Is the backup path via downstream node?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_lc_disjoint
                                                
                                                	Is the backup path line card disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_node_protecting
                                                
                                                	Is the backup path node protecting?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_primary_path
                                                
                                                	Is the backup path an ECMP to the network?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_srlg_disjoint
                                                
                                                	Is the backup path SRLG disjoint with primary?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_remote_lfa
                                                
                                                	Is the backup path via a Remote LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_epcfrr_lfa
                                                
                                                	Is the backup path via a TI\-LFA?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_strict_spflfa
                                                
                                                	Is the backup path TI\-LFA strict SPF?
                                                	**type**\: bool
                                                
                                                .. attribute:: is_tunnel_requested
                                                
                                                	Is SR TE tunnel requested
                                                	**type**\: bool
                                                
                                                .. attribute:: weight
                                                
                                                	Weight configured on the interface
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: segment_routing_sid_value_entry
                                                
                                                	Segment routing sid values for TI\-LFA/rLFA
                                                	**type**\: list of  		 :py:class:`SegmentRoutingSidValueEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry>`
                                                
                                                .. attribute:: backup_repair
                                                
                                                	Backup Repair List
                                                	**type**\: list of  		 :py:class:`BackupRepair <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, self).__init__()

                                                    self.yang_name = "frr-backup"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("segment-routing-sid-value-entry", ("segment_routing_sid_value_entry", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry)), ("backup-repair", ("backup_repair", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair))])
                                                    self._leafs = OrderedDict([
                                                        ('neighbor_id', YLeaf(YType.str, 'neighbor-id')),
                                                        ('egress_interface', YLeaf(YType.str, 'egress-interface')),
                                                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                                                        ('tunnel_egress_interface', YLeaf(YType.str, 'tunnel-egress-interface')),
                                                        ('neighbor_snpa', YLeaf(YType.str, 'neighbor-snpa')),
                                                        ('remote_lfa_system_id', YLeaf(YType.str, 'remote-lfa-system-id')),
                                                        ('remote_lfa_router_id', YLeaf(YType.str, 'remote-lfa-router-id')),
                                                        ('remote_lfa_system_pid', YLeaf(YType.str, 'remote-lfa-system-pid')),
                                                        ('remote_lfa_router_pid', YLeaf(YType.str, 'remote-lfa-router-pid')),
                                                        ('total_backup_distance', YLeaf(YType.uint32, 'total-backup-distance')),
                                                        ('segment_routing_sid_value', YLeaf(YType.uint32, 'segment-routing-sid-value')),
                                                        ('num_sid', YLeaf(YType.uint32, 'num-sid')),
                                                        ('backup_repair_list_size', YLeaf(YType.uint32, 'backup-repair-list-size')),
                                                        ('tilfa_computation', YLeaf(YType.enumeration, 'tilfa-computation')),
                                                        ('prefix_source_node_id', YLeaf(YType.str, 'prefix-source-node-id')),
                                                        ('is_downstream', YLeaf(YType.boolean, 'is-downstream')),
                                                        ('is_lc_disjoint', YLeaf(YType.boolean, 'is-lc-disjoint')),
                                                        ('is_node_protecting', YLeaf(YType.boolean, 'is-node-protecting')),
                                                        ('is_primary_path', YLeaf(YType.boolean, 'is-primary-path')),
                                                        ('is_srlg_disjoint', YLeaf(YType.boolean, 'is-srlg-disjoint')),
                                                        ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                        ('is_epcfrr_lfa', YLeaf(YType.boolean, 'is-epcfrr-lfa')),
                                                        ('is_strict_spflfa', YLeaf(YType.boolean, 'is-strict-spflfa')),
                                                        ('is_tunnel_requested', YLeaf(YType.boolean, 'is-tunnel-requested')),
                                                        ('weight', YLeaf(YType.uint32, 'weight')),
                                                    ])
                                                    self.neighbor_id = None
                                                    self.egress_interface = None
                                                    self.neighbor_address = None
                                                    self.tunnel_egress_interface = None
                                                    self.neighbor_snpa = None
                                                    self.remote_lfa_system_id = None
                                                    self.remote_lfa_router_id = None
                                                    self.remote_lfa_system_pid = None
                                                    self.remote_lfa_router_pid = None
                                                    self.total_backup_distance = None
                                                    self.segment_routing_sid_value = None
                                                    self.num_sid = None
                                                    self.backup_repair_list_size = None
                                                    self.tilfa_computation = None
                                                    self.prefix_source_node_id = None
                                                    self.is_downstream = None
                                                    self.is_lc_disjoint = None
                                                    self.is_node_protecting = None
                                                    self.is_primary_path = None
                                                    self.is_srlg_disjoint = None
                                                    self.is_remote_lfa = None
                                                    self.is_epcfrr_lfa = None
                                                    self.is_strict_spflfa = None
                                                    self.is_tunnel_requested = None
                                                    self.weight = None

                                                    self.segment_routing_sid_value_entry = YList(self)
                                                    self.backup_repair = YList(self)
                                                    self._segment_path = lambda: "frr-backup"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup, ['neighbor_id', 'egress_interface', 'neighbor_address', 'tunnel_egress_interface', 'neighbor_snpa', 'remote_lfa_system_id', 'remote_lfa_router_id', 'remote_lfa_system_pid', 'remote_lfa_router_pid', 'total_backup_distance', 'segment_routing_sid_value', 'num_sid', 'backup_repair_list_size', 'tilfa_computation', 'prefix_source_node_id', 'is_downstream', 'is_lc_disjoint', 'is_node_protecting', 'is_primary_path', 'is_srlg_disjoint', 'is_remote_lfa', 'is_epcfrr_lfa', 'is_strict_spflfa', 'is_tunnel_requested', 'weight'], name, value)


                                                class SegmentRoutingSidValueEntry(Entity):
                                                    """
                                                    Segment routing sid values for TI\-LFA/rLFA
                                                    
                                                    .. attribute:: entry
                                                    
                                                    	
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, self).__init__()

                                                        self.yang_name = "segment-routing-sid-value-entry"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                                        ])
                                                        self.entry = None
                                                        self._segment_path = lambda: "segment-routing-sid-value-entry"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.SegmentRoutingSidValueEntry, ['entry'], name, value)


                                                class BackupRepair(Entity):
                                                    """
                                                    Backup Repair List
                                                    
                                                    .. attribute:: repair_element_node_id
                                                    
                                                    	RepairElementNodeID
                                                    	**type**\: str
                                                    
                                                    .. attribute:: repair_ipv4_addr
                                                    
                                                    	RepairIPv4Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_ipv6_addr
                                                    
                                                    	RepairIPv6Addr
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: repair_label
                                                    
                                                    	Repair Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_element_type
                                                    
                                                    	Repair Element Type
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: repair_strict_spf_label
                                                    
                                                    	Repair Strict SPF Label
                                                    	**type**\: int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, self).__init__()

                                                        self.yang_name = "backup-repair"
                                                        self.yang_parent_name = "frr-backup"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                            ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                            ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                            ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                            ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                            ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                        ])
                                                        self.repair_element_node_id = None
                                                        self.repair_ipv4_addr = None
                                                        self.repair_ipv6_addr = None
                                                        self.repair_label = None
                                                        self.repair_element_type = None
                                                        self.repair_strict_spf_label = None
                                                        self._segment_path = lambda: "backup-repair"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.FrrBackup.BackupRepair, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                            class UloopExplicit(Entity):
                                                """
                                                Uloop Explicit List
                                                
                                                .. attribute:: repair_element_node_id
                                                
                                                	RepairElementNodeID
                                                	**type**\: str
                                                
                                                .. attribute:: repair_ipv4_addr
                                                
                                                	RepairIPv4Addr
                                                	**type**\: str
                                                
                                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_ipv6_addr
                                                
                                                	RepairIPv6Addr
                                                	**type**\: str
                                                
                                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                
                                                .. attribute:: repair_label
                                                
                                                	Repair Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_element_type
                                                
                                                	Repair Element Type
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: repair_strict_spf_label
                                                
                                                	Repair Strict SPF Label
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, self).__init__()

                                                    self.yang_name = "uloop-explicit"
                                                    self.yang_parent_name = "explicit-path"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('repair_element_node_id', YLeaf(YType.str, 'repair-element-node-id')),
                                                        ('repair_ipv4_addr', YLeaf(YType.str, 'repair-ipv4-addr')),
                                                        ('repair_ipv6_addr', YLeaf(YType.str, 'repair-ipv6-addr')),
                                                        ('repair_label', YLeaf(YType.uint32, 'repair-label')),
                                                        ('repair_element_type', YLeaf(YType.uint32, 'repair-element-type')),
                                                        ('repair_strict_spf_label', YLeaf(YType.uint32, 'repair-strict-spf-label')),
                                                    ])
                                                    self.repair_element_node_id = None
                                                    self.repair_ipv4_addr = None
                                                    self.repair_ipv6_addr = None
                                                    self.repair_label = None
                                                    self.repair_element_type = None
                                                    self.repair_strict_spf_label = None
                                                    self._segment_path = lambda: "uloop-explicit"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.ExplicitPath.UloopExplicit, ['repair_element_node_id', 'repair_ipv4_addr', 'repair_ipv6_addr', 'repair_label', 'repair_element_type', 'repair_strict_spf_label'], name, value)


                                        class Source(Entity):
                                            """
                                            Sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source, self).__init__()

                                                self.yang_name = "source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.Source.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                                        class MulticastSource(Entity):
                                            """
                                            Multicast\-intact sources advertising the prefix
                                            
                                            .. attribute:: source_lsp_id
                                            
                                            	ID of the LSP advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                            
                                            .. attribute:: source_address
                                            
                                            	Source address of the IS advertising the prefix
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tags
                                            
                                            	Tags associated with the prefix item
                                            	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags>`
                                            
                                            .. attribute:: nodal_sid
                                            
                                            	Nodal SIDs with the prefix item
                                            	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource, self).__init__()

                                                self.yang_name = "multicast-source"
                                                self.yang_parent_name = "backup"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid))])
                                                self._leafs = OrderedDict([
                                                    ('source_lsp_id', YLeaf(YType.str, 'source-lsp-id')),
                                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                                ])
                                                self.source_lsp_id = None
                                                self.source_address = None

                                                self.tags = YList(self)
                                                self.nodal_sid = YList(self)
                                                self._segment_path = lambda: "multicast-source"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource, ['source_lsp_id', 'source_address'], name, value)


                                            class Tags(Entity):
                                                """
                                                Tags associated with the prefix item
                                                
                                                .. attribute:: entry
                                                
                                                	
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, self).__init__()

                                                    self.yang_name = "tags"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                                    ])
                                                    self.entry = None
                                                    self._segment_path = lambda: "tags"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.Tags, ['entry'], name, value)


                                            class NodalSid(Entity):
                                                """
                                                Nodal SIDs with the prefix item
                                                
                                                .. attribute:: sid_value
                                                
                                                	sid value
                                                	**type**\: int
                                                
                                                	**range:** 0..4294967295
                                                
                                                .. attribute:: rflag
                                                
                                                	rflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: nflag
                                                
                                                	nflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: pflag
                                                
                                                	pflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: eflag
                                                
                                                	eflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: vflag
                                                
                                                	vflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: lflag
                                                
                                                	lflag
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                .. attribute:: algorithm
                                                
                                                	algorithm
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, self).__init__()

                                                    self.yang_name = "nodal-sid"
                                                    self.yang_parent_name = "multicast-source"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                                        ('rflag', YLeaf(YType.uint8, 'rflag')),
                                                        ('nflag', YLeaf(YType.uint8, 'nflag')),
                                                        ('pflag', YLeaf(YType.uint8, 'pflag')),
                                                        ('eflag', YLeaf(YType.uint8, 'eflag')),
                                                        ('vflag', YLeaf(YType.uint8, 'vflag')),
                                                        ('lflag', YLeaf(YType.uint8, 'lflag')),
                                                        ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                                    ])
                                                    self.sid_value = None
                                                    self.rflag = None
                                                    self.nflag = None
                                                    self.pflag = None
                                                    self.eflag = None
                                                    self.vflag = None
                                                    self.lflag = None
                                                    self.algorithm = None
                                                    self._segment_path = lambda: "nodal-sid"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.NativeStatus.NativeDetails.Backup.MulticastSource.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


                            class PerLevelAdvertisingDetail(Entity):
                                """
                                Per level details of how the local system
                                advertises the prefix
                                
                                .. attribute:: summarization_status
                                
                                	Status of summarization for the prefix
                                	**type**\:  :py:class:`SummarizationStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus>`
                                
                                .. attribute:: level
                                
                                	Level in which the prefix is advertised
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: advertising_origin
                                
                                	The origin of the advertisement
                                	**type**\:  :py:class:`IsisShRouteAdvOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisShRouteAdvOrigin>`
                                
                                .. attribute:: metric
                                
                                	Metric with which the prefix is advertised
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_propagated
                                
                                	Has the prefix been propagated from another level?
                                	**type**\: bool
                                
                                .. attribute:: is_external_metric
                                
                                	Is the metric an external metric?
                                	**type**\: bool
                                
                                .. attribute:: is_external_reachability
                                
                                	Is the prefix external to the IS\-IS domain?
                                	**type**\: bool
                                
                                .. attribute:: is_interarea
                                
                                	Is the up/down bit set?
                                	**type**\: bool
                                
                                .. attribute:: tags
                                
                                	Tags associated with the prefix
                                	**type**\: list of  		 :py:class:`Tags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.Tags>`
                                
                                .. attribute:: nodal_sid
                                
                                	Nodal SIDs with the prefix item
                                	**type**\: list of  		 :py:class:`NodalSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail, self).__init__()

                                    self.yang_name = "per-level-advertising-detail"
                                    self.yang_parent_name = "ipv4-route"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("summarization-status", ("summarization_status", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus))])
                                    self._child_list_classes = OrderedDict([("tags", ("tags", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.Tags)), ("nodal-sid", ("nodal_sid", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid))])
                                    self._leafs = OrderedDict([
                                        ('level', YLeaf(YType.enumeration, 'level')),
                                        ('advertising_origin', YLeaf(YType.enumeration, 'advertising-origin')),
                                        ('metric', YLeaf(YType.uint32, 'metric')),
                                        ('is_propagated', YLeaf(YType.boolean, 'is-propagated')),
                                        ('is_external_metric', YLeaf(YType.boolean, 'is-external-metric')),
                                        ('is_external_reachability', YLeaf(YType.boolean, 'is-external-reachability')),
                                        ('is_interarea', YLeaf(YType.boolean, 'is-interarea')),
                                    ])
                                    self.level = None
                                    self.advertising_origin = None
                                    self.metric = None
                                    self.is_propagated = None
                                    self.is_external_metric = None
                                    self.is_external_reachability = None
                                    self.is_interarea = None

                                    self.summarization_status = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus()
                                    self.summarization_status.parent = self
                                    self._children_name_map["summarization_status"] = "summarization-status"
                                    self._children_yang_names.add("summarization-status")

                                    self.tags = YList(self)
                                    self.nodal_sid = YList(self)
                                    self._segment_path = lambda: "per-level-advertising-detail"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail, ['level', 'advertising_origin', 'metric', 'is_propagated', 'is_external_metric', 'is_external_reachability', 'is_interarea'], name, value)


                                class SummarizationStatus(Entity):
                                    """
                                    Status of summarization for the prefix
                                    
                                    .. attribute:: summary_prefix
                                    
                                    	Summarizing Prefix
                                    	**type**\:  :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix>`
                                    
                                    .. attribute:: is_valid
                                    
                                    	IsValid
                                    	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus, self).__init__()

                                        self.yang_name = "summarization-status"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("summary-prefix", ("summary_prefix", Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('is_valid', YLeaf(YType.enumeration, 'is-valid')),
                                        ])
                                        self.is_valid = None

                                        self.summary_prefix = Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix()
                                        self.summary_prefix.parent = self
                                        self._children_name_map["summary_prefix"] = "summary-prefix"
                                        self._children_yang_names.add("summary-prefix")
                                        self._segment_path = lambda: "summarization-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus, ['is_valid'], name, value)


                                    class SummaryPrefix(Entity):
                                        """
                                        Summarizing Prefix
                                        
                                        .. attribute:: prefix
                                        
                                        	prefix
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: prefix_length
                                        
                                        	prefix length
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, self).__init__()

                                            self.yang_name = "summary-prefix"
                                            self.yang_parent_name = "summarization-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ])
                                            self.prefix = None
                                            self.prefix_length = None
                                            self._segment_path = lambda: "summary-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.SummarizationStatus.SummaryPrefix, ['prefix', 'prefix_length'], name, value)


                                class Tags(Entity):
                                    """
                                    Tags associated with the prefix
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.Tags, self).__init__()

                                        self.yang_name = "tags"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "tags"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.Tags, ['entry'], name, value)


                                class NodalSid(Entity):
                                    """
                                    Nodal SIDs with the prefix item
                                    
                                    .. attribute:: sid_value
                                    
                                    	sid value
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: rflag
                                    
                                    	rflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nflag
                                    
                                    	nflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pflag
                                    
                                    	pflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: eflag
                                    
                                    	eflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vflag
                                    
                                    	vflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: lflag
                                    
                                    	lflag
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: algorithm
                                    
                                    	algorithm
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid, self).__init__()

                                        self.yang_name = "nodal-sid"
                                        self.yang_parent_name = "per-level-advertising-detail"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sid_value', YLeaf(YType.uint32, 'sid-value')),
                                            ('rflag', YLeaf(YType.uint8, 'rflag')),
                                            ('nflag', YLeaf(YType.uint8, 'nflag')),
                                            ('pflag', YLeaf(YType.uint8, 'pflag')),
                                            ('eflag', YLeaf(YType.uint8, 'eflag')),
                                            ('vflag', YLeaf(YType.uint8, 'vflag')),
                                            ('lflag', YLeaf(YType.uint8, 'lflag')),
                                            ('algorithm', YLeaf(YType.uint8, 'algorithm')),
                                        ])
                                        self.sid_value = None
                                        self.rflag = None
                                        self.nflag = None
                                        self.pflag = None
                                        self.eflag = None
                                        self.vflag = None
                                        self.lflag = None
                                        self.algorithm = None
                                        self._segment_path = lambda: "nodal-sid"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Topologies.Topology.Ipv4Routes.Ipv4Route.PerLevelAdvertisingDetail.NodalSid, ['sid_value', 'rflag', 'nflag', 'pflag', 'eflag', 'vflag', 'lflag', 'algorithm'], name, value)


            class NsrStatus(Entity):
                """
                NSR Status information
                
                .. attribute:: isis_nsr_peer
                
                	ISIS NSR PEER STATUS
                	**type**\:  :py:class:`IsisNsrPeer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer>`
                
                .. attribute:: isis_nsr_infra
                
                	ISIS NSR Infra
                	**type**\:  :py:class:`IsisNsrInfra <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra>`
                
                .. attribute:: isis_vm_state
                
                	ISIS VM STATE
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.NsrStatus, self).__init__()

                    self.yang_name = "nsr-status"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("isis-nsr-peer", ("isis_nsr_peer", Isis.Instances.Instance.NsrStatus.IsisNsrPeer)), ("isis-nsr-infra", ("isis_nsr_infra", Isis.Instances.Instance.NsrStatus.IsisNsrInfra))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('isis_vm_state', YLeaf(YType.uint16, 'isis-vm-state')),
                    ])
                    self.isis_vm_state = None

                    self.isis_nsr_peer = Isis.Instances.Instance.NsrStatus.IsisNsrPeer()
                    self.isis_nsr_peer.parent = self
                    self._children_name_map["isis_nsr_peer"] = "isis-nsr-peer"
                    self._children_yang_names.add("isis-nsr-peer")

                    self.isis_nsr_infra = Isis.Instances.Instance.NsrStatus.IsisNsrInfra()
                    self.isis_nsr_infra.parent = self
                    self._children_name_map["isis_nsr_infra"] = "isis-nsr-infra"
                    self._children_yang_names.add("isis-nsr-infra")
                    self._segment_path = lambda: "nsr-status"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.NsrStatus, ['isis_vm_state'], name, value)


                class IsisNsrPeer(Entity):
                    """
                    ISIS NSR PEER STATUS
                    
                    .. attribute:: full_sync_achieved
                    
                    	full sync achieved
                    	**type**\: list of  		 :py:class:`FullSyncAchieved <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.FullSyncAchieved>`
                    
                    .. attribute:: man_sync_count
                    
                    	man sync count
                    	**type**\: list of  		 :py:class:`ManSyncCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.ManSyncCount>`
                    
                    .. attribute:: nsr_chg_count
                    
                    	nsr chg count
                    	**type**\: list of  		 :py:class:`NsrChgCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.NsrChgCount>`
                    
                    .. attribute:: uptime
                    
                    	uptime
                    	**type**\: list of  		 :py:class:`Uptime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.Uptime>`
                    
                    .. attribute:: uptime_valid
                    
                    	uptime valid
                    	**type**\: list of  		 :py:class:`UptimeValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer, self).__init__()

                        self.yang_name = "isis-nsr-peer"
                        self.yang_parent_name = "nsr-status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("full-sync-achieved", ("full_sync_achieved", Isis.Instances.Instance.NsrStatus.IsisNsrPeer.FullSyncAchieved)), ("man-sync-count", ("man_sync_count", Isis.Instances.Instance.NsrStatus.IsisNsrPeer.ManSyncCount)), ("nsr-chg-count", ("nsr_chg_count", Isis.Instances.Instance.NsrStatus.IsisNsrPeer.NsrChgCount)), ("uptime", ("uptime", Isis.Instances.Instance.NsrStatus.IsisNsrPeer.Uptime)), ("uptime-valid", ("uptime_valid", Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid))])
                        self._leafs = OrderedDict()

                        self.full_sync_achieved = YList(self)
                        self.man_sync_count = YList(self)
                        self.nsr_chg_count = YList(self)
                        self.uptime = YList(self)
                        self.uptime_valid = YList(self)
                        self._segment_path = lambda: "isis-nsr-peer"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer, [], name, value)


                    class FullSyncAchieved(Entity):
                        """
                        full sync achieved
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.FullSyncAchieved, self).__init__()

                            self.yang_name = "full-sync-achieved"
                            self.yang_parent_name = "isis-nsr-peer"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "full-sync-achieved"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.FullSyncAchieved, ['entry'], name, value)


                    class ManSyncCount(Entity):
                        """
                        man sync count
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.ManSyncCount, self).__init__()

                            self.yang_name = "man-sync-count"
                            self.yang_parent_name = "isis-nsr-peer"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "man-sync-count"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.ManSyncCount, ['entry'], name, value)


                    class NsrChgCount(Entity):
                        """
                        nsr chg count
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.NsrChgCount, self).__init__()

                            self.yang_name = "nsr-chg-count"
                            self.yang_parent_name = "isis-nsr-peer"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "nsr-chg-count"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.NsrChgCount, ['entry'], name, value)


                    class Uptime(Entity):
                        """
                        uptime
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.Uptime, self).__init__()

                            self.yang_name = "uptime"
                            self.yang_parent_name = "isis-nsr-peer"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "uptime"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.Uptime, ['entry'], name, value)


                    class UptimeValid(Entity):
                        """
                        uptime valid
                        
                        .. attribute:: entry
                        
                        	Array entry
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid, self).__init__()

                            self.yang_name = "uptime-valid"
                            self.yang_parent_name = "isis-nsr-peer"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.boolean, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "uptime-valid"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrPeer.UptimeValid, ['entry'], name, value)


                class IsisNsrInfra(Entity):
                    """
                    ISIS NSR Infra
                    
                    .. attribute:: gen
                    
                    	gen
                    	**type**\:  :py:class:`Gen <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen>`
                    
                    .. attribute:: pm
                    
                    	pm
                    	**type**\:  :py:class:`Pm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm>`
                    
                    .. attribute:: ds
                    
                    	ds
                    	**type**\:  :py:class:`Ds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds>`
                    
                    .. attribute:: te
                    
                    	te
                    	**type**\:  :py:class:`Te <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te>`
                    
                    .. attribute:: ncd
                    
                    	ncd
                    	**type**\: list of  		 :py:class:`Ncd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd>`
                    
                    .. attribute:: nii_idb
                    
                    	nii idb
                    	**type**\: list of  		 :py:class:`NiiIdb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra, self).__init__()

                        self.yang_name = "isis-nsr-infra"
                        self.yang_parent_name = "nsr-status"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("gen", ("gen", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen)), ("pm", ("pm", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm)), ("ds", ("ds", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds)), ("te", ("te", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te))])
                        self._child_list_classes = OrderedDict([("ncd", ("ncd", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd)), ("nii-idb", ("nii_idb", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb))])
                        self._leafs = OrderedDict()

                        self.gen = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen()
                        self.gen.parent = self
                        self._children_name_map["gen"] = "gen"
                        self._children_yang_names.add("gen")

                        self.pm = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm()
                        self.pm.parent = self
                        self._children_name_map["pm"] = "pm"
                        self._children_yang_names.add("pm")

                        self.ds = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds()
                        self.ds.parent = self
                        self._children_name_map["ds"] = "ds"
                        self._children_yang_names.add("ds")

                        self.te = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te()
                        self.te.parent = self
                        self._children_name_map["te"] = "te"
                        self._children_yang_names.add("te")

                        self.ncd = YList(self)
                        self.nii_idb = YList(self)
                        self._segment_path = lambda: "isis-nsr-infra"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra, [], name, value)


                    class Gen(Entity):
                        """
                        gen
                        
                        .. attribute:: my_nodeid
                        
                        	my nodeid
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: my_process_id
                        
                        	my process id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pm_issu_role
                        
                        	pm issu role
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pm_ha_role
                        
                        	pm ha role
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: sysmgr_ha_role
                        
                        	sysmgr ha role
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: nsr_send_ready
                        
                        	nsr send ready
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: nsr_send_unready
                        
                        	nsr send unready
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: nsr_send_err
                        
                        	nsr send err
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nsr_recv_err
                        
                        	nsr recv err
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: retry_flag
                        
                        	retry flag
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nsr_enabled
                        
                        	nsr enabled
                        	**type**\: bool
                        
                        .. attribute:: nsr_configured
                        
                        	nsr configured
                        	**type**\: bool
                        
                        .. attribute:: nsf_configured
                        
                        	nsf configured
                        	**type**\: bool
                        
                        .. attribute:: failover
                        
                        	failover
                        	**type**\: bool
                        
                        .. attribute:: lanid_req_needed
                        
                        	lanid req needed
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen, self).__init__()

                            self.yang_name = "gen"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('my_nodeid', YLeaf(YType.uint32, 'my-nodeid')),
                                ('my_process_id', YLeaf(YType.uint32, 'my-process-id')),
                                ('pm_issu_role', YLeaf(YType.uint8, 'pm-issu-role')),
                                ('pm_ha_role', YLeaf(YType.uint8, 'pm-ha-role')),
                                ('sysmgr_ha_role', YLeaf(YType.uint8, 'sysmgr-ha-role')),
                                ('nsr_send_ready', YLeaf(YType.uint8, 'nsr-send-ready')),
                                ('nsr_send_unready', YLeaf(YType.uint8, 'nsr-send-unready')),
                                ('nsr_send_err', YLeaf(YType.uint32, 'nsr-send-err')),
                                ('nsr_recv_err', YLeaf(YType.uint32, 'nsr-recv-err')),
                                ('retry_flag', YLeaf(YType.uint32, 'retry-flag')),
                                ('nsr_enabled', YLeaf(YType.boolean, 'nsr-enabled')),
                                ('nsr_configured', YLeaf(YType.boolean, 'nsr-configured')),
                                ('nsf_configured', YLeaf(YType.boolean, 'nsf-configured')),
                                ('failover', YLeaf(YType.boolean, 'failover')),
                                ('lanid_req_needed', YLeaf(YType.boolean, 'lanid-req-needed')),
                            ])
                            self.my_nodeid = None
                            self.my_process_id = None
                            self.pm_issu_role = None
                            self.pm_ha_role = None
                            self.sysmgr_ha_role = None
                            self.nsr_send_ready = None
                            self.nsr_send_unready = None
                            self.nsr_send_err = None
                            self.nsr_recv_err = None
                            self.retry_flag = None
                            self.nsr_enabled = None
                            self.nsr_configured = None
                            self.nsf_configured = None
                            self.failover = None
                            self.lanid_req_needed = None
                            self._segment_path = lambda: "gen"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Gen, ['my_nodeid', 'my_process_id', 'pm_issu_role', 'pm_ha_role', 'sysmgr_ha_role', 'nsr_send_ready', 'nsr_send_unready', 'nsr_send_err', 'nsr_recv_err', 'retry_flag', 'nsr_enabled', 'nsr_configured', 'nsf_configured', 'failover', 'lanid_req_needed'], name, value)


                    class Pm(Entity):
                        """
                        pm
                        
                        .. attribute:: reg
                        
                        	reg
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_cb
                        
                        	conn cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: disconn_cb
                        
                        	disconn cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_status
                        
                        	conn status
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm, self).__init__()

                            self.yang_name = "pm"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('reg', YLeaf(YType.uint8, 'reg')),
                                ('conn_cb', YLeaf(YType.uint8, 'conn-cb')),
                                ('disconn_cb', YLeaf(YType.uint8, 'disconn-cb')),
                                ('conn_status', YLeaf(YType.boolean, 'conn-status')),
                            ])
                            self.reg = None
                            self.conn_cb = None
                            self.disconn_cb = None
                            self.conn_status = None
                            self._segment_path = lambda: "pm"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Pm, ['reg', 'conn_cb', 'disconn_cb', 'conn_status'], name, value)


                    class Ds(Entity):
                        """
                        ds
                        
                        .. attribute:: conn_ts
                        
                        	conn ts
                        	**type**\:  :py:class:`ConnTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs>`
                        
                        .. attribute:: conn_cb_ts
                        
                        	conn cb ts
                        	**type**\:  :py:class:`ConnCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs>`
                        
                        .. attribute:: pub_ts
                        
                        	pub ts
                        	**type**\:  :py:class:`PubTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs>`
                        
                        .. attribute:: pub_cb_ts
                        
                        	pub cb ts
                        	**type**\:  :py:class:`PubCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs>`
                        
                        .. attribute:: reg_ts
                        
                        	reg ts
                        	**type**\:  :py:class:`RegTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs>`
                        
                        .. attribute:: reg_cb_ts
                        
                        	reg cb ts
                        	**type**\:  :py:class:`RegCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs>`
                        
                        .. attribute:: unreg_ts
                        
                        	unreg ts
                        	**type**\:  :py:class:`UnregTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs>`
                        
                        .. attribute:: unreg_cb_ts
                        
                        	unreg cb ts
                        	**type**\:  :py:class:`UnregCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs>`
                        
                        .. attribute:: disconn_cb_ts
                        
                        	disconn cb ts
                        	**type**\:  :py:class:`DisconnCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs>`
                        
                        .. attribute:: notify_cb_ts
                        
                        	notify cb ts
                        	**type**\:  :py:class:`NotifyCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs>`
                        
                        .. attribute:: del_cb_ts
                        
                        	del cb ts
                        	**type**\:  :py:class:`DelCbTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs>`
                        
                        .. attribute:: remove_srv_ts
                        
                        	remove srv ts
                        	**type**\:  :py:class:`RemoveSrvTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs>`
                        
                        .. attribute:: conn_status_ts
                        
                        	conn status ts
                        	**type**\:  :py:class:`ConnStatusTs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs>`
                        
                        .. attribute:: conn
                        
                        	conn
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_cb
                        
                        	conn cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pub
                        
                        	pub
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: pub_cb
                        
                        	pub cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg
                        
                        	reg
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: reg_cb
                        
                        	reg cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: unreg
                        
                        	unreg
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: unreg_cb
                        
                        	unreg cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: disconn_cb
                        
                        	disconn cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: notify_cb
                        
                        	notify cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: notify_peer_xr
                        
                        	notify peer xr
                        	**type**\: str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        .. attribute:: del_cb
                        
                        	del cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: remove_srv
                        
                        	remove srv
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_status
                        
                        	conn status
                        	**type**\: bool
                        
                        .. attribute:: notify_peer
                        
                        	notify peer
                        	**type**\: list of  		 :py:class:`NotifyPeer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds, self).__init__()

                            self.yang_name = "ds"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("conn-ts", ("conn_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs)), ("conn-cb-ts", ("conn_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs)), ("pub-ts", ("pub_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs)), ("pub-cb-ts", ("pub_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs)), ("reg-ts", ("reg_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs)), ("reg-cb-ts", ("reg_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs)), ("unreg-ts", ("unreg_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs)), ("unreg-cb-ts", ("unreg_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs)), ("disconn-cb-ts", ("disconn_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs)), ("notify-cb-ts", ("notify_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs)), ("del-cb-ts", ("del_cb_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs)), ("remove-srv-ts", ("remove_srv_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs)), ("conn-status-ts", ("conn_status_ts", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs))])
                            self._child_list_classes = OrderedDict([("notify-peer", ("notify_peer", Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer))])
                            self._leafs = OrderedDict([
                                ('conn', YLeaf(YType.uint8, 'conn')),
                                ('conn_cb', YLeaf(YType.uint8, 'conn-cb')),
                                ('pub', YLeaf(YType.uint8, 'pub')),
                                ('pub_cb', YLeaf(YType.uint8, 'pub-cb')),
                                ('reg', YLeaf(YType.uint8, 'reg')),
                                ('reg_cb', YLeaf(YType.uint8, 'reg-cb')),
                                ('unreg', YLeaf(YType.uint8, 'unreg')),
                                ('unreg_cb', YLeaf(YType.uint8, 'unreg-cb')),
                                ('disconn_cb', YLeaf(YType.uint8, 'disconn-cb')),
                                ('notify_cb', YLeaf(YType.uint8, 'notify-cb')),
                                ('notify_peer_xr', YLeaf(YType.str, 'notify-peer-xr')),
                                ('del_cb', YLeaf(YType.uint8, 'del-cb')),
                                ('remove_srv', YLeaf(YType.uint8, 'remove-srv')),
                                ('conn_status', YLeaf(YType.boolean, 'conn-status')),
                            ])
                            self.conn = None
                            self.conn_cb = None
                            self.pub = None
                            self.pub_cb = None
                            self.reg = None
                            self.reg_cb = None
                            self.unreg = None
                            self.unreg_cb = None
                            self.disconn_cb = None
                            self.notify_cb = None
                            self.notify_peer_xr = None
                            self.del_cb = None
                            self.remove_srv = None
                            self.conn_status = None

                            self.conn_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs()
                            self.conn_ts.parent = self
                            self._children_name_map["conn_ts"] = "conn-ts"
                            self._children_yang_names.add("conn-ts")

                            self.conn_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs()
                            self.conn_cb_ts.parent = self
                            self._children_name_map["conn_cb_ts"] = "conn-cb-ts"
                            self._children_yang_names.add("conn-cb-ts")

                            self.pub_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs()
                            self.pub_ts.parent = self
                            self._children_name_map["pub_ts"] = "pub-ts"
                            self._children_yang_names.add("pub-ts")

                            self.pub_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs()
                            self.pub_cb_ts.parent = self
                            self._children_name_map["pub_cb_ts"] = "pub-cb-ts"
                            self._children_yang_names.add("pub-cb-ts")

                            self.reg_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs()
                            self.reg_ts.parent = self
                            self._children_name_map["reg_ts"] = "reg-ts"
                            self._children_yang_names.add("reg-ts")

                            self.reg_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs()
                            self.reg_cb_ts.parent = self
                            self._children_name_map["reg_cb_ts"] = "reg-cb-ts"
                            self._children_yang_names.add("reg-cb-ts")

                            self.unreg_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs()
                            self.unreg_ts.parent = self
                            self._children_name_map["unreg_ts"] = "unreg-ts"
                            self._children_yang_names.add("unreg-ts")

                            self.unreg_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs()
                            self.unreg_cb_ts.parent = self
                            self._children_name_map["unreg_cb_ts"] = "unreg-cb-ts"
                            self._children_yang_names.add("unreg-cb-ts")

                            self.disconn_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs()
                            self.disconn_cb_ts.parent = self
                            self._children_name_map["disconn_cb_ts"] = "disconn-cb-ts"
                            self._children_yang_names.add("disconn-cb-ts")

                            self.notify_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs()
                            self.notify_cb_ts.parent = self
                            self._children_name_map["notify_cb_ts"] = "notify-cb-ts"
                            self._children_yang_names.add("notify-cb-ts")

                            self.del_cb_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs()
                            self.del_cb_ts.parent = self
                            self._children_name_map["del_cb_ts"] = "del-cb-ts"
                            self._children_yang_names.add("del-cb-ts")

                            self.remove_srv_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs()
                            self.remove_srv_ts.parent = self
                            self._children_name_map["remove_srv_ts"] = "remove-srv-ts"
                            self._children_yang_names.add("remove-srv-ts")

                            self.conn_status_ts = Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs()
                            self.conn_status_ts.parent = self
                            self._children_name_map["conn_status_ts"] = "conn-status-ts"
                            self._children_yang_names.add("conn-status-ts")

                            self.notify_peer = YList(self)
                            self._segment_path = lambda: "ds"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds, ['conn', 'conn_cb', 'pub', 'pub_cb', 'reg', 'reg_cb', 'unreg', 'unreg_cb', 'disconn_cb', 'notify_cb', 'notify_peer_xr', 'del_cb', 'remove_srv', 'conn_status'], name, value)


                        class ConnTs(Entity):
                            """
                            conn ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs, self).__init__()

                                self.yang_name = "conn-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "conn-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnTs, ['seconds', 'nano_seconds'], name, value)


                        class ConnCbTs(Entity):
                            """
                            conn cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs, self).__init__()

                                self.yang_name = "conn-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "conn-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnCbTs, ['seconds', 'nano_seconds'], name, value)


                        class PubTs(Entity):
                            """
                            pub ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs, self).__init__()

                                self.yang_name = "pub-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "pub-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubTs, ['seconds', 'nano_seconds'], name, value)


                        class PubCbTs(Entity):
                            """
                            pub cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs, self).__init__()

                                self.yang_name = "pub-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "pub-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.PubCbTs, ['seconds', 'nano_seconds'], name, value)


                        class RegTs(Entity):
                            """
                            reg ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs, self).__init__()

                                self.yang_name = "reg-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "reg-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegTs, ['seconds', 'nano_seconds'], name, value)


                        class RegCbTs(Entity):
                            """
                            reg cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs, self).__init__()

                                self.yang_name = "reg-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "reg-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RegCbTs, ['seconds', 'nano_seconds'], name, value)


                        class UnregTs(Entity):
                            """
                            unreg ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs, self).__init__()

                                self.yang_name = "unreg-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "unreg-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregTs, ['seconds', 'nano_seconds'], name, value)


                        class UnregCbTs(Entity):
                            """
                            unreg cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs, self).__init__()

                                self.yang_name = "unreg-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "unreg-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.UnregCbTs, ['seconds', 'nano_seconds'], name, value)


                        class DisconnCbTs(Entity):
                            """
                            disconn cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs, self).__init__()

                                self.yang_name = "disconn-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "disconn-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DisconnCbTs, ['seconds', 'nano_seconds'], name, value)


                        class NotifyCbTs(Entity):
                            """
                            notify cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs, self).__init__()

                                self.yang_name = "notify-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "notify-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyCbTs, ['seconds', 'nano_seconds'], name, value)


                        class DelCbTs(Entity):
                            """
                            del cb ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs, self).__init__()

                                self.yang_name = "del-cb-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "del-cb-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.DelCbTs, ['seconds', 'nano_seconds'], name, value)


                        class RemoveSrvTs(Entity):
                            """
                            remove srv ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs, self).__init__()

                                self.yang_name = "remove-srv-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "remove-srv-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.RemoveSrvTs, ['seconds', 'nano_seconds'], name, value)


                        class ConnStatusTs(Entity):
                            """
                            conn status ts
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs, self).__init__()

                                self.yang_name = "conn-status-ts"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "conn-status-ts"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.ConnStatusTs, ['seconds', 'nano_seconds'], name, value)


                        class NotifyPeer(Entity):
                            """
                            notify peer
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer, self).__init__()

                                self.yang_name = "notify-peer"
                                self.yang_parent_name = "ds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "notify-peer"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ds.NotifyPeer, ['seconds', 'nano_seconds'], name, value)


                    class Te(Entity):
                        """
                        te
                        
                        .. attribute:: enabled
                        
                        	enabled
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_up
                        
                        	conn up
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: te_link_cb
                        
                        	te link cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: te_tunnel_cb
                        
                        	te tunnel cb
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: adv_sync_data
                        
                        	adv sync data
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: link_purge_time_on
                        
                        	link purge time on
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: tunnel_purge_time_on
                        
                        	tunnel purge time on
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: has_info_from_te
                        
                        	has info from te
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te, self).__init__()

                            self.yang_name = "te"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enabled', YLeaf(YType.uint8, 'enabled')),
                                ('conn_up', YLeaf(YType.uint8, 'conn-up')),
                                ('te_link_cb', YLeaf(YType.uint8, 'te-link-cb')),
                                ('te_tunnel_cb', YLeaf(YType.uint8, 'te-tunnel-cb')),
                                ('adv_sync_data', YLeaf(YType.uint8, 'adv-sync-data')),
                                ('link_purge_time_on', YLeaf(YType.uint8, 'link-purge-time-on')),
                                ('tunnel_purge_time_on', YLeaf(YType.uint8, 'tunnel-purge-time-on')),
                                ('has_info_from_te', YLeaf(YType.uint8, 'has-info-from-te')),
                            ])
                            self.enabled = None
                            self.conn_up = None
                            self.te_link_cb = None
                            self.te_tunnel_cb = None
                            self.adv_sync_data = None
                            self.link_purge_time_on = None
                            self.tunnel_purge_time_on = None
                            self.has_info_from_te = None
                            self._segment_path = lambda: "te"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Te, ['enabled', 'conn_up', 'te_link_cb', 'te_tunnel_cb', 'adv_sync_data', 'link_purge_time_on', 'tunnel_purge_time_on', 'has_info_from_te'], name, value)


                    class Ncd(Entity):
                        """
                        ncd
                        
                        .. attribute:: vm_idx
                        
                        	vm idx
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: conn_up
                        
                        	conn up
                        	**type**\: bool
                        
                        .. attribute:: endp_hdl
                        
                        	endp hdl
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: chksum
                        
                        	chksum
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: send_seqnum
                        
                        	send seqnum
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: recv_cnt
                        
                        	recv cnt
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd, self).__init__()

                            self.yang_name = "ncd"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('vm_idx', YLeaf(YType.uint8, 'vm-idx')),
                                ('conn_up', YLeaf(YType.boolean, 'conn-up')),
                                ('endp_hdl', YLeaf(YType.uint8, 'endp-hdl')),
                                ('chksum', YLeaf(YType.uint16, 'chksum')),
                                ('send_seqnum', YLeaf(YType.uint32, 'send-seqnum')),
                                ('recv_cnt', YLeaf(YType.uint32, 'recv-cnt')),
                            ])
                            self.vm_idx = None
                            self.conn_up = None
                            self.endp_hdl = None
                            self.chksum = None
                            self.send_seqnum = None
                            self.recv_cnt = None
                            self._segment_path = lambda: "ncd"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.Ncd, ['vm_idx', 'conn_up', 'endp_hdl', 'chksum', 'send_seqnum', 'recv_cnt'], name, value)


                    class NiiIdb(Entity):
                        """
                        nii idb
                        
                        .. attribute:: exist
                        
                        	exist
                        	**type**\: bool
                        
                        .. attribute:: brought_up
                        
                        	brought up
                        	**type**\: bool
                        
                        .. attribute:: retry_timer
                        
                        	retry timer
                        	**type**\: bool
                        
                        .. attribute:: running
                        
                        	running
                        	**type**\: bool
                        
                        .. attribute:: has_adj
                        
                        	has adj
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb, self).__init__()

                            self.yang_name = "nii-idb"
                            self.yang_parent_name = "isis-nsr-infra"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('exist', YLeaf(YType.boolean, 'exist')),
                                ('brought_up', YLeaf(YType.boolean, 'brought-up')),
                                ('retry_timer', YLeaf(YType.boolean, 'retry-timer')),
                                ('running', YLeaf(YType.boolean, 'running')),
                                ('has_adj', YLeaf(YType.boolean, 'has-adj')),
                            ])
                            self.exist = None
                            self.brought_up = None
                            self.retry_timer = None
                            self.running = None
                            self.has_adj = None
                            self._segment_path = lambda: "nii-idb"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatus.IsisNsrInfra.NiiIdb, ['exist', 'brought_up', 'retry_timer', 'running', 'has_adj'], name, value)


            class Interfaces(Entity):
                """
                Interface table
                
                .. attribute:: interface
                
                	Information about one IS\-IS interface
                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("interface", ("interface", Isis.Instances.Instance.Interfaces.Interface))])
                    self._leafs = OrderedDict()

                    self.interface = YList(self)
                    self._segment_path = lambda: "interfaces"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.Interfaces, [], name, value)


                class Interface(Entity):
                    """
                    Information about one IS\-IS interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: configured_status
                    
                    	Configured interface status
                    	**type**\:  :py:class:`ConfiguredStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus>`
                    
                    .. attribute:: interface_status_and_data
                    
                    	Information about the interface status and its data
                    	**type**\:  :py:class:`InterfaceStatusAndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData>`
                    
                    .. attribute:: configured_circuit_type
                    
                    	Configured circuit type for the interface
                    	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                    
                    .. attribute:: mesh_group
                    
                    	Interface mesh group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_type
                    
                    	IS\-type of the router
                    	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                    
                    .. attribute:: nsr_intf
                    
                    	ISIS NSR Interface
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Interfaces.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([("configured-status", ("configured_status", Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus)), ("interface-status-and-data", ("interface_status_and_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('configured_circuit_type', YLeaf(YType.enumeration, 'configured-circuit-type')),
                            ('mesh_group', YLeaf(YType.uint32, 'mesh-group')),
                            ('is_type', YLeaf(YType.enumeration, 'is-type')),
                            ('nsr_intf', YLeaf(YType.boolean, 'nsr-intf')),
                        ])
                        self.interface_name = None
                        self.configured_circuit_type = None
                        self.mesh_group = None
                        self.is_type = None
                        self.nsr_intf = None

                        self.configured_status = Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus()
                        self.configured_status.parent = self
                        self._children_name_map["configured_status"] = "configured-status"
                        self._children_yang_names.add("configured-status")

                        self.interface_status_and_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData()
                        self.interface_status_and_data.parent = self
                        self._children_name_map["interface_status_and_data"] = "interface-status-and-data"
                        self._children_yang_names.add("interface-status-and-data")
                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface, ['interface_name', 'configured_circuit_type', 'mesh_group', 'is_type', 'nsr_intf'], name, value)


                    class ConfiguredStatus(Entity):
                        """
                        Configured interface status
                        
                        .. attribute:: adjacency_form_status
                        
                        	Configured adjacency formation status
                        	**type**\: bool
                        
                        .. attribute:: adv_prefix_status
                        
                        	Configured prefix advertisement status
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus, self).__init__()

                            self.yang_name = "configured-status"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('adjacency_form_status', YLeaf(YType.boolean, 'adjacency-form-status')),
                                ('adv_prefix_status', YLeaf(YType.boolean, 'adv-prefix-status')),
                            ])
                            self.adjacency_form_status = None
                            self.adv_prefix_status = None
                            self._segment_path = lambda: "configured-status"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.ConfiguredStatus, ['adjacency_form_status', 'adv_prefix_status'], name, value)


                    class InterfaceStatusAndData(Entity):
                        """
                        Information about the interface status and its
                        data
                        
                        .. attribute:: disabled
                        
                        	The interface state if disabled
                        	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled>`
                        
                        .. attribute:: enabled
                        
                        	The interface state if enabled
                        	**type**\:  :py:class:`Enabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled>`
                        
                        .. attribute:: status
                        
                        	Status
                        	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData, self).__init__()

                            self.yang_name = "interface-status-and-data"
                            self.yang_parent_name = "interface"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled)), ("enabled", ("enabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('status', YLeaf(YType.enumeration, 'status')),
                            ])
                            self.status = None

                            self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled()
                            self.disabled.parent = self
                            self._children_name_map["disabled"] = "disabled"
                            self._children_yang_names.add("disabled")

                            self.enabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled()
                            self.enabled.parent = self
                            self._children_name_map["enabled"] = "enabled"
                            self._children_yang_names.add("enabled")
                            self._segment_path = lambda: "interface-status-and-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData, ['status'], name, value)


                        class Disabled(Entity):
                            """
                            The interface state if disabled
                            
                            .. attribute:: reason_code
                            
                            	Reason why the interface is disabled
                            	**type**\:  :py:class:`IsisIfDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfDisabledReason>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled, self).__init__()

                                self.yang_name = "disabled"
                                self.yang_parent_name = "interface-status-and-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                ])
                                self.reason_code = None
                                self._segment_path = lambda: "disabled"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Disabled, ['reason_code'], name, value)


                        class Enabled(Entity):
                            """
                            The interface state if enabled
                            
                            .. attribute:: adjacency_form_status
                            
                            	Interface's Adjacency Formation status
                            	**type**\:  :py:class:`AdjacencyFormStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus>`
                            
                            .. attribute:: adv_prefix_status
                            
                            	Interface's Prefix Advertisement status
                            	**type**\:  :py:class:`AdvPrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus>`
                            
                            .. attribute:: p2p_data
                            
                            	Data for an active P2P interface, NULL if not active or P2P
                            	**type**\:  :py:class:`P2PData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData>`
                            
                            .. attribute:: bfd_data
                            
                            	The BFD data for the given interface
                            	**type**\:  :py:class:`BfdData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData>`
                            
                            .. attribute:: clns_data
                            
                            	Interface data specific to CLNS I/O services
                            	**type**\:  :py:class:`ClnsData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData>`
                            
                            .. attribute:: interface_media_type
                            
                            	Media type of the interface
                            	**type**\:  :py:class:`IsisMediaClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClass>`
                            
                            .. attribute:: enabled_circuit_type
                            
                            	Enabled Circuit type of the interface
                            	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                            
                            .. attribute:: local_circuit_number
                            
                            	Local Circuit Number of the interface
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: rsi_srlg_registered
                            
                            	Rsi Srlg Registered
                            	**type**\: bool
                            
                            .. attribute:: bandwidth
                            
                            	Bandwidth of the interface
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: underlying_interface
                            
                            	Underlying interface list for bundle interfaces
                            	**type**\: list of  		 :py:class:`UnderlyingInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.UnderlyingInterface>`
                            
                            .. attribute:: per_area_data
                            
                            	Array of area information for an active interface
                            	**type**\: list of  		 :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData>`
                            
                            .. attribute:: per_topology_data
                            
                            	Array of topology information
                            	**type**\: list of  		 :py:class:`PerTopologyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData>`
                            
                            .. attribute:: per_address_family_data
                            
                            	Array of address family information
                            	**type**\: list of  		 :py:class:`PerAddressFamilyData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled, self).__init__()

                                self.yang_name = "enabled"
                                self.yang_parent_name = "interface-status-and-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("adjacency-form-status", ("adjacency_form_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus)), ("adv-prefix-status", ("adv_prefix_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus)), ("p2p-data", ("p2p_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData)), ("bfd-data", ("bfd_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData)), ("clns-data", ("clns_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData))])
                                self._child_list_classes = OrderedDict([("underlying-interface", ("underlying_interface", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.UnderlyingInterface)), ("per-area-data", ("per_area_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData)), ("per-topology-data", ("per_topology_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData)), ("per-address-family-data", ("per_address_family_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData))])
                                self._leafs = OrderedDict([
                                    ('interface_media_type', YLeaf(YType.enumeration, 'interface-media-type')),
                                    ('enabled_circuit_type', YLeaf(YType.enumeration, 'enabled-circuit-type')),
                                    ('local_circuit_number', YLeaf(YType.uint8, 'local-circuit-number')),
                                    ('rsi_srlg_registered', YLeaf(YType.boolean, 'rsi-srlg-registered')),
                                    ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                                ])
                                self.interface_media_type = None
                                self.enabled_circuit_type = None
                                self.local_circuit_number = None
                                self.rsi_srlg_registered = None
                                self.bandwidth = None

                                self.adjacency_form_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus()
                                self.adjacency_form_status.parent = self
                                self._children_name_map["adjacency_form_status"] = "adjacency-form-status"
                                self._children_yang_names.add("adjacency-form-status")

                                self.adv_prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus()
                                self.adv_prefix_status.parent = self
                                self._children_name_map["adv_prefix_status"] = "adv-prefix-status"
                                self._children_yang_names.add("adv-prefix-status")

                                self.p2p_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData()
                                self.p2p_data.parent = self
                                self._children_name_map["p2p_data"] = "p2p-data"
                                self._children_yang_names.add("p2p-data")

                                self.bfd_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData()
                                self.bfd_data.parent = self
                                self._children_name_map["bfd_data"] = "bfd-data"
                                self._children_yang_names.add("bfd-data")

                                self.clns_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData()
                                self.clns_data.parent = self
                                self._children_name_map["clns_data"] = "clns-data"
                                self._children_yang_names.add("clns-data")

                                self.underlying_interface = YList(self)
                                self.per_area_data = YList(self)
                                self.per_topology_data = YList(self)
                                self.per_address_family_data = YList(self)
                                self._segment_path = lambda: "enabled"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled, ['interface_media_type', 'enabled_circuit_type', 'local_circuit_number', 'rsi_srlg_registered', 'bandwidth'], name, value)


                            class AdjacencyFormStatus(Entity):
                                """
                                Interface's Adjacency Formation status
                                
                                .. attribute:: disabled
                                
                                	Disabled info for the adjacency formation status
                                	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled>`
                                
                                .. attribute:: status
                                
                                	Status
                                	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus, self).__init__()

                                    self.yang_name = "adjacency-form-status"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('status', YLeaf(YType.enumeration, 'status')),
                                    ])
                                    self.status = None

                                    self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled()
                                    self.disabled.parent = self
                                    self._children_name_map["disabled"] = "disabled"
                                    self._children_yang_names.add("disabled")
                                    self._segment_path = lambda: "adjacency-form-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus, ['status'], name, value)


                                class Disabled(Entity):
                                    """
                                    Disabled info for the adjacency formation status
                                    
                                    .. attribute:: reason_code
                                    
                                    	Reason why the interface is not able to form adjacencies
                                    	**type**\:  :py:class:`IsisIfAdjFormDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAdjFormDisabledReason>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled, self).__init__()

                                        self.yang_name = "disabled"
                                        self.yang_parent_name = "adjacency-form-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                        ])
                                        self.reason_code = None
                                        self._segment_path = lambda: "disabled"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdjacencyFormStatus.Disabled, ['reason_code'], name, value)


                            class AdvPrefixStatus(Entity):
                                """
                                Interface's Prefix Advertisement status
                                
                                .. attribute:: disabled
                                
                                	Disabled info for the prefix advertisement status
                                	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled>`
                                
                                .. attribute:: status
                                
                                	Status
                                	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus, self).__init__()

                                    self.yang_name = "adv-prefix-status"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('status', YLeaf(YType.enumeration, 'status')),
                                    ])
                                    self.status = None

                                    self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled()
                                    self.disabled.parent = self
                                    self._children_name_map["disabled"] = "disabled"
                                    self._children_yang_names.add("disabled")
                                    self._segment_path = lambda: "adv-prefix-status"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus, ['status'], name, value)


                                class Disabled(Entity):
                                    """
                                    Disabled info for the prefix advertisement
                                    status
                                    
                                    .. attribute:: reason_code
                                    
                                    	Reason why the interface is not able to advertise prefixes
                                    	**type**\:  :py:class:`IsisIfAdvPrefixDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAdvPrefixDisabledReason>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled, self).__init__()

                                        self.yang_name = "disabled"
                                        self.yang_parent_name = "adv-prefix-status"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                        ])
                                        self.reason_code = None
                                        self._segment_path = lambda: "disabled"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.AdvPrefixStatus.Disabled, ['reason_code'], name, value)


                            class P2PData(Entity):
                                """
                                Data for an active P2P interface, NULL if not
                                active or P2P
                                
                                .. attribute:: time_until_next_iih
                                
                                	Time in ms before the next IIH can be sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: retransmit_lsp_queue_size
                                
                                	No. of LSPs queued to be retransmitted
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: retransmit_lsp_interval
                                
                                	Time in ms until the next scheduled LSP is retransmitted
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: extended_circuit_number
                                
                                	Extended Circuit Number valid for a P2P interface
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData, self).__init__()

                                    self.yang_name = "p2p-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('time_until_next_iih', YLeaf(YType.uint32, 'time-until-next-iih')),
                                        ('retransmit_lsp_queue_size', YLeaf(YType.uint32, 'retransmit-lsp-queue-size')),
                                        ('retransmit_lsp_interval', YLeaf(YType.uint32, 'retransmit-lsp-interval')),
                                        ('extended_circuit_number', YLeaf(YType.uint32, 'extended-circuit-number')),
                                    ])
                                    self.time_until_next_iih = None
                                    self.retransmit_lsp_queue_size = None
                                    self.retransmit_lsp_interval = None
                                    self.extended_circuit_number = None
                                    self._segment_path = lambda: "p2p-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.P2PData, ['time_until_next_iih', 'retransmit_lsp_queue_size', 'retransmit_lsp_interval', 'extended_circuit_number'], name, value)


                            class BfdData(Entity):
                                """
                                The BFD data for the given interface
                                
                                .. attribute:: enabled
                                
                                	IPv4 BFD enabled status
                                	**type**\: bool
                                
                                .. attribute:: ipv6_enabled
                                
                                	IPv6 BFD enabled status
                                	**type**\: bool
                                
                                .. attribute:: interval
                                
                                	BFD hello minimum interval in milliseconds
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                .. attribute:: multiplier
                                
                                	BFD hello multiplier
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData, self).__init__()

                                    self.yang_name = "bfd-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enabled', YLeaf(YType.boolean, 'enabled')),
                                        ('ipv6_enabled', YLeaf(YType.boolean, 'ipv6-enabled')),
                                        ('interval', YLeaf(YType.uint32, 'interval')),
                                        ('multiplier', YLeaf(YType.uint32, 'multiplier')),
                                    ])
                                    self.enabled = None
                                    self.ipv6_enabled = None
                                    self.interval = None
                                    self.multiplier = None
                                    self._segment_path = lambda: "bfd-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.BfdData, ['enabled', 'ipv6_enabled', 'interval', 'multiplier'], name, value)


                            class ClnsData(Entity):
                                """
                                Interface data specific to CLNS I/O services
                                
                                .. attribute:: clns_status
                                
                                	Is CLNS protcol up or if not, the reason why it is not up
                                	**type**\:  :py:class:`ClnsStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus>`
                                
                                .. attribute:: mtu_info
                                
                                	A valid MTU or the reason for the MTU being invalid
                                	**type**\:  :py:class:`MtuInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo>`
                                
                                .. attribute:: snpa_state
                                
                                	SNPA state
                                	**type**\:  :py:class:`SnpaState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState>`
                                
                                .. attribute:: media_specific_state
                                
                                	Media Specific CLNS state
                                	**type**\:  :py:class:`MediaSpecificState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState>`
                                
                                .. attribute:: time_until_next_lsp
                                
                                	Time until next LSP may be sent (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_transmit_requested_flag
                                
                                	TRUE if an LSP transmission has been requested
                                	**type**\: bool
                                
                                .. attribute:: lsp_transmitted_flag
                                
                                	TRUE if an LSP transmission has been sent, indicates LastLSPLevelTransmitted and LastLSP\_IDTransmitted valid
                                	**type**\: bool
                                
                                .. attribute:: lsp_txmitd_b2b_limit
                                
                                	Number of LSPs that can be sent back to back in the current window without exceeding the pacing limit
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_txmt_b2b_msecs
                                
                                	Time im msecs indicating the end of the window in which the 'back to back lsps to be sent' counter applies
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                .. attribute:: last_lsp_level_transmitted
                                
                                	Level of the Last LSP Transmitted
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: last_lsp_id_transmitted
                                
                                	Last LSP ID Transmitted
                                	**type**\: str
                                
                                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData, self).__init__()

                                    self.yang_name = "clns-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("clns-status", ("clns_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus)), ("mtu-info", ("mtu_info", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo)), ("snpa-state", ("snpa_state", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState)), ("media-specific-state", ("media_specific_state", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('time_until_next_lsp', YLeaf(YType.uint32, 'time-until-next-lsp')),
                                        ('lsp_transmit_requested_flag', YLeaf(YType.boolean, 'lsp-transmit-requested-flag')),
                                        ('lsp_transmitted_flag', YLeaf(YType.boolean, 'lsp-transmitted-flag')),
                                        ('lsp_txmitd_b2b_limit', YLeaf(YType.uint32, 'lsp-txmitd-b2b-limit')),
                                        ('lsp_txmt_b2b_msecs', YLeaf(YType.uint32, 'lsp-txmt-b2b-msecs')),
                                        ('last_lsp_level_transmitted', YLeaf(YType.enumeration, 'last-lsp-level-transmitted')),
                                        ('last_lsp_id_transmitted', YLeaf(YType.str, 'last-lsp-id-transmitted')),
                                    ])
                                    self.time_until_next_lsp = None
                                    self.lsp_transmit_requested_flag = None
                                    self.lsp_transmitted_flag = None
                                    self.lsp_txmitd_b2b_limit = None
                                    self.lsp_txmt_b2b_msecs = None
                                    self.last_lsp_level_transmitted = None
                                    self.last_lsp_id_transmitted = None

                                    self.clns_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus()
                                    self.clns_status.parent = self
                                    self._children_name_map["clns_status"] = "clns-status"
                                    self._children_yang_names.add("clns-status")

                                    self.mtu_info = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo()
                                    self.mtu_info.parent = self
                                    self._children_name_map["mtu_info"] = "mtu-info"
                                    self._children_yang_names.add("mtu-info")

                                    self.snpa_state = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState()
                                    self.snpa_state.parent = self
                                    self._children_name_map["snpa_state"] = "snpa-state"
                                    self._children_yang_names.add("snpa-state")

                                    self.media_specific_state = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState()
                                    self.media_specific_state.parent = self
                                    self._children_name_map["media_specific_state"] = "media-specific-state"
                                    self._children_yang_names.add("media-specific-state")
                                    self._segment_path = lambda: "clns-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData, ['time_until_next_lsp', 'lsp_transmit_requested_flag', 'lsp_transmitted_flag', 'lsp_txmitd_b2b_limit', 'lsp_txmt_b2b_msecs', 'last_lsp_level_transmitted', 'last_lsp_id_transmitted'], name, value)


                                class ClnsStatus(Entity):
                                    """
                                    Is CLNS protcol up or if not, the reason why it
                                    is not up
                                    
                                    .. attribute:: clns_down_info
                                    
                                    	State describing why CLNS is down
                                    	**type**\:  :py:class:`ClnsDownInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisUp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUp>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus, self).__init__()

                                        self.yang_name = "clns-status"
                                        self.yang_parent_name = "clns-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("clns-down-info", ("clns_down_info", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('status', YLeaf(YType.enumeration, 'status')),
                                        ])
                                        self.status = None

                                        self.clns_down_info = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo()
                                        self.clns_down_info.parent = self
                                        self._children_name_map["clns_down_info"] = "clns-down-info"
                                        self._children_yang_names.add("clns-down-info")
                                        self._segment_path = lambda: "clns-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus, ['status'], name, value)


                                    class ClnsDownInfo(Entity):
                                        """
                                        State describing why CLNS is down
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why CLNS is down
                                        	**type**\:  :py:class:`IsisIfClnsProtoDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsProtoDownReason>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo, self).__init__()

                                            self.yang_name = "clns-down-info"
                                            self.yang_parent_name = "clns-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                            ])
                                            self.reason_code = None
                                            self._segment_path = lambda: "clns-down-info"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.ClnsStatus.ClnsDownInfo, ['reason_code'], name, value)


                                class MtuInfo(Entity):
                                    """
                                    A valid MTU or the reason for the MTU being
                                    invalid
                                    
                                    .. attribute:: invalid
                                    
                                    	Information pertaining to the invalid CLNS MTU
                                    	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                    
                                    .. attribute:: mtu
                                    
                                    	Valid MTU
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo, self).__init__()

                                        self.yang_name = "mtu-info"
                                        self.yang_parent_name = "clns-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("invalid", ("invalid", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('status', YLeaf(YType.enumeration, 'status')),
                                            ('mtu', YLeaf(YType.uint32, 'mtu')),
                                        ])
                                        self.status = None
                                        self.mtu = None

                                        self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid()
                                        self.invalid.parent = self
                                        self._children_name_map["invalid"] = "invalid"
                                        self._children_yang_names.add("invalid")
                                        self._segment_path = lambda: "mtu-info"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo, ['status', 'mtu'], name, value)


                                    class Invalid(Entity):
                                        """
                                        Information pertaining to the invalid CLNS MTU
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the MTU is invalid
                                        	**type**\:  :py:class:`IsisIfClnsMtuInvalidReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsMtuInvalidReason>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid, self).__init__()

                                            self.yang_name = "invalid"
                                            self.yang_parent_name = "mtu-info"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                            ])
                                            self.reason_code = None
                                            self._segment_path = lambda: "invalid"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MtuInfo.Invalid, ['reason_code'], name, value)


                                class SnpaState(Entity):
                                    """
                                    SNPA state
                                    
                                    .. attribute:: unknown
                                    
                                    	Information pertaining to the unknown SNPA state
                                    	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown>`
                                    
                                    .. attribute:: known
                                    
                                    	Information pertaining to the known SNPA state
                                    	**type**\:  :py:class:`Known <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisKnown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnown>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState, self).__init__()

                                        self.yang_name = "snpa-state"
                                        self.yang_parent_name = "clns-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("unknown", ("unknown", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown)), ("known", ("known", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('status', YLeaf(YType.enumeration, 'status')),
                                        ])
                                        self.status = None

                                        self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown()
                                        self.unknown.parent = self
                                        self._children_name_map["unknown"] = "unknown"
                                        self._children_yang_names.add("unknown")

                                        self.known = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known()
                                        self.known.parent = self
                                        self._children_name_map["known"] = "known"
                                        self._children_yang_names.add("known")
                                        self._segment_path = lambda: "snpa-state"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState, ['status'], name, value)


                                    class Unknown(Entity):
                                        """
                                        Information pertaining to the unknown SNPA state
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the SNPA is unknown
                                        	**type**\:  :py:class:`IsisIfClnsSnpaUnknownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfClnsSnpaUnknownReason>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown, self).__init__()

                                            self.yang_name = "unknown"
                                            self.yang_parent_name = "snpa-state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                            ])
                                            self.reason_code = None
                                            self._segment_path = lambda: "unknown"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Unknown, ['reason_code'], name, value)


                                    class Known(Entity):
                                        """
                                        Information pertaining to the known SNPA state
                                        
                                        .. attribute:: snpa
                                        
                                        	Valid SNPA
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known, self).__init__()

                                            self.yang_name = "known"
                                            self.yang_parent_name = "snpa-state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('snpa', YLeaf(YType.str, 'snpa')),
                                            ])
                                            self.snpa = None
                                            self._segment_path = lambda: "known"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.SnpaState.Known, ['snpa'], name, value)


                                class MediaSpecificState(Entity):
                                    """
                                    Media Specific CLNS state
                                    
                                    .. attribute:: clns_lan_data
                                    
                                    	LAN state
                                    	**type**\:  :py:class:`ClnsLanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData>`
                                    
                                    .. attribute:: clns_p2p_data
                                    
                                    	Point\-to\-point state
                                    	**type**\:  :py:class:`ClnsP2PData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData>`
                                    
                                    .. attribute:: clns_media_type
                                    
                                    	CLNSMediaType
                                    	**type**\:  :py:class:`IsisMediaClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClass>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState, self).__init__()

                                        self.yang_name = "media-specific-state"
                                        self.yang_parent_name = "clns-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("clns-lan-data", ("clns_lan_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData)), ("clns-p2p-data", ("clns_p2p_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('clns_media_type', YLeaf(YType.enumeration, 'clns-media-type')),
                                        ])
                                        self.clns_media_type = None

                                        self.clns_lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData()
                                        self.clns_lan_data.parent = self
                                        self._children_name_map["clns_lan_data"] = "clns-lan-data"
                                        self._children_yang_names.add("clns-lan-data")

                                        self.clns_p2p_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData()
                                        self.clns_p2p_data.parent = self
                                        self._children_name_map["clns_p2p_data"] = "clns-p2p-data"
                                        self._children_yang_names.add("clns-p2p-data")
                                        self._segment_path = lambda: "media-specific-state"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState, ['clns_media_type'], name, value)


                                    class ClnsLanData(Entity):
                                        """
                                        LAN state
                                        
                                        .. attribute:: per_area_data
                                        
                                        	Array of per area CLNS data
                                        	**type**\: list of  		 :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData, self).__init__()

                                            self.yang_name = "clns-lan-data"
                                            self.yang_parent_name = "media-specific-state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("per-area-data", ("per_area_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData))])
                                            self._leafs = OrderedDict()

                                            self.per_area_data = YList(self)
                                            self._segment_path = lambda: "clns-lan-data"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData, [], name, value)


                                        class PerAreaData(Entity):
                                            """
                                            Array of per area CLNS data
                                            
                                            .. attribute:: multicast_status
                                            
                                            	Multicast group membership status
                                            	**type**\:  :py:class:`MulticastStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus>`
                                            
                                            .. attribute:: level
                                            
                                            	Level of the area
                                            	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData, self).__init__()

                                                self.yang_name = "per-area-data"
                                                self.yang_parent_name = "clns-lan-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("multicast-status", ("multicast_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('level', YLeaf(YType.enumeration, 'level')),
                                                ])
                                                self.level = None

                                                self.multicast_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus()
                                                self.multicast_status.parent = self
                                                self._children_name_map["multicast_status"] = "multicast-status"
                                                self._children_yang_names.add("multicast-status")
                                                self._segment_path = lambda: "per-area-data"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData, ['level'], name, value)


                                            class MulticastStatus(Entity):
                                                """
                                                Multicast group membership status
                                                
                                                .. attribute:: invalid
                                                
                                                	Information pertaining to the invalid multicast status
                                                	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid>`
                                                
                                                .. attribute:: status
                                                
                                                	Status
                                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus, self).__init__()

                                                    self.yang_name = "multicast-status"
                                                    self.yang_parent_name = "per-area-data"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("invalid", ("invalid", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid))])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('status', YLeaf(YType.enumeration, 'status')),
                                                    ])
                                                    self.status = None

                                                    self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid()
                                                    self.invalid.parent = self
                                                    self._children_name_map["invalid"] = "invalid"
                                                    self._children_yang_names.add("invalid")
                                                    self._segment_path = lambda: "multicast-status"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus, ['status'], name, value)


                                                class Invalid(Entity):
                                                    """
                                                    Information pertaining to the invalid multicast
                                                    status
                                                    
                                                    .. attribute:: reason_code
                                                    
                                                    	Reason why the multicast status is invalid
                                                    	**type**\:  :py:class:`IsisIfMcastInvalidReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfMcastInvalidReason>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid, self).__init__()

                                                        self.yang_name = "invalid"
                                                        self.yang_parent_name = "multicast-status"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                        ])
                                                        self.reason_code = None
                                                        self._segment_path = lambda: "invalid"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsLanData.PerAreaData.MulticastStatus.Invalid, ['reason_code'], name, value)


                                    class ClnsP2PData(Entity):
                                        """
                                        Point\-to\-point state
                                        
                                        .. attribute:: p2p_over_lan_data
                                        
                                        	Point\-to\-point over LAN data
                                        	**type**\:  :py:class:`P2POverLanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData, self).__init__()

                                            self.yang_name = "clns-p2p-data"
                                            self.yang_parent_name = "media-specific-state"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("p2p-over-lan-data", ("p2p_over_lan_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.p2p_over_lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData()
                                            self.p2p_over_lan_data.parent = self
                                            self._children_name_map["p2p_over_lan_data"] = "p2p-over-lan-data"
                                            self._children_yang_names.add("p2p-over-lan-data")
                                            self._segment_path = lambda: "clns-p2p-data"


                                        class P2POverLanData(Entity):
                                            """
                                            Point\-to\-point over LAN data
                                            
                                            .. attribute:: multicast_status
                                            
                                            	Multicast group membership status
                                            	**type**\:  :py:class:`MulticastStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData, self).__init__()

                                                self.yang_name = "p2p-over-lan-data"
                                                self.yang_parent_name = "clns-p2p-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("multicast-status", ("multicast_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict()

                                                self.multicast_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus()
                                                self.multicast_status.parent = self
                                                self._children_name_map["multicast_status"] = "multicast-status"
                                                self._children_yang_names.add("multicast-status")
                                                self._segment_path = lambda: "p2p-over-lan-data"


                                            class MulticastStatus(Entity):
                                                """
                                                Multicast group membership status
                                                
                                                .. attribute:: invalid
                                                
                                                	Information pertaining to the invalid multicast status
                                                	**type**\:  :py:class:`Invalid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid>`
                                                
                                                .. attribute:: status
                                                
                                                	Status
                                                	**type**\:  :py:class:`IsisValid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisValid>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus, self).__init__()

                                                    self.yang_name = "multicast-status"
                                                    self.yang_parent_name = "p2p-over-lan-data"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([("invalid", ("invalid", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid))])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('status', YLeaf(YType.enumeration, 'status')),
                                                    ])
                                                    self.status = None

                                                    self.invalid = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid()
                                                    self.invalid.parent = self
                                                    self._children_name_map["invalid"] = "invalid"
                                                    self._children_yang_names.add("invalid")
                                                    self._segment_path = lambda: "multicast-status"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus, ['status'], name, value)


                                                class Invalid(Entity):
                                                    """
                                                    Information pertaining to the invalid multicast
                                                    status
                                                    
                                                    .. attribute:: reason_code
                                                    
                                                    	Reason why the multicast status is invalid
                                                    	**type**\:  :py:class:`IsisIfMcastInvalidReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfMcastInvalidReason>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid, self).__init__()

                                                        self.yang_name = "invalid"
                                                        self.yang_parent_name = "multicast-status"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                        ])
                                                        self.reason_code = None
                                                        self._segment_path = lambda: "invalid"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.ClnsData.MediaSpecificState.ClnsP2PData.P2POverLanData.MulticastStatus.Invalid, ['reason_code'], name, value)


                            class UnderlyingInterface(Entity):
                                """
                                Underlying interface list for bundle interfaces
                                
                                .. attribute:: interface_handle
                                
                                	Local interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: interface_name
                                
                                	Interface name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.UnderlyingInterface, self).__init__()

                                    self.yang_name = "underlying-interface"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ])
                                    self.interface_handle = None
                                    self.interface_name = None
                                    self._segment_path = lambda: "underlying-interface"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.UnderlyingInterface, ['interface_handle', 'interface_name'], name, value)


                            class PerAreaData(Entity):
                                """
                                Array of area information for an active
                                interface
                                
                                .. attribute:: lan_data
                                
                                	LAN data, NULL iff interface has non\-LAN media type
                                	**type**\:  :py:class:`LanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData>`
                                
                                .. attribute:: level
                                
                                	Level of the area
                                	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                                
                                .. attribute:: adjacency_count
                                
                                	Number of adjacencies
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: lsp_pacing_interval
                                
                                	LSP pacing time period (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: psnp_transmit_queue_size
                                
                                	No. of SNP entries queued to be transmitted
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: hello_interval
                                
                                	Hello interval
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: hello_multiplier
                                
                                	Hello Multiplier
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData, self).__init__()

                                    self.yang_name = "per-area-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("lan-data", ("lan_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('level', YLeaf(YType.enumeration, 'level')),
                                        ('adjacency_count', YLeaf(YType.uint32, 'adjacency-count')),
                                        ('lsp_pacing_interval', YLeaf(YType.uint32, 'lsp-pacing-interval')),
                                        ('psnp_transmit_queue_size', YLeaf(YType.uint32, 'psnp-transmit-queue-size')),
                                        ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                                        ('hello_multiplier', YLeaf(YType.uint32, 'hello-multiplier')),
                                    ])
                                    self.level = None
                                    self.adjacency_count = None
                                    self.lsp_pacing_interval = None
                                    self.psnp_transmit_queue_size = None
                                    self.hello_interval = None
                                    self.hello_multiplier = None

                                    self.lan_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData()
                                    self.lan_data.parent = self
                                    self._children_name_map["lan_data"] = "lan-data"
                                    self._children_yang_names.add("lan-data")
                                    self._segment_path = lambda: "per-area-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData, ['level', 'adjacency_count', 'lsp_pacing_interval', 'psnp_transmit_queue_size', 'hello_interval', 'hello_multiplier'], name, value)


                                class LanData(Entity):
                                    """
                                    LAN data, NULL iff interface has non\-LAN media
                                    type
                                    
                                    .. attribute:: circuit_lan_id
                                    
                                    	Circuit LAN ID
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    .. attribute:: time_until_next_iih
                                    
                                    	Time (ms) until next IIH
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: interface_priority
                                    
                                    	Interface's DIS\-election priority
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: dispriority
                                    
                                    	Priority of current DIS on this LAN
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: are_we_dis
                                    
                                    	Flag indicating if this LAN circuit is the DIS
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData, self).__init__()

                                        self.yang_name = "lan-data"
                                        self.yang_parent_name = "per-area-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('circuit_lan_id', YLeaf(YType.str, 'circuit-lan-id')),
                                            ('time_until_next_iih', YLeaf(YType.uint32, 'time-until-next-iih')),
                                            ('interface_priority', YLeaf(YType.uint8, 'interface-priority')),
                                            ('dispriority', YLeaf(YType.uint8, 'dispriority')),
                                            ('are_we_dis', YLeaf(YType.boolean, 'are-we-dis')),
                                        ])
                                        self.circuit_lan_id = None
                                        self.time_until_next_iih = None
                                        self.interface_priority = None
                                        self.dispriority = None
                                        self.are_we_dis = None
                                        self._segment_path = lambda: "lan-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAreaData.LanData, ['circuit_lan_id', 'time_until_next_iih', 'interface_priority', 'dispriority', 'are_we_dis'], name, value)


                            class PerTopologyData(Entity):
                                """
                                Array of topology information
                                
                                .. attribute:: topology_id
                                
                                	Topology identifier
                                	**type**\:  :py:class:`TopologyId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId>`
                                
                                .. attribute:: status
                                
                                	Status of the topology
                                	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData, self).__init__()

                                    self.yang_name = "per-topology-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("topology-id", ("topology_id", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId)), ("status", ("status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.topology_id = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId()
                                    self.topology_id.parent = self
                                    self._children_name_map["topology_id"] = "topology-id"
                                    self._children_yang_names.add("topology-id")

                                    self.status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status()
                                    self.status.parent = self
                                    self._children_name_map["status"] = "status"
                                    self._children_yang_names.add("status")
                                    self._segment_path = lambda: "per-topology-data"


                                class TopologyId(Entity):
                                    """
                                    Topology identifier
                                    
                                    .. attribute:: af_name
                                    
                                    	AF name
                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                    
                                    .. attribute:: saf_name
                                    
                                    	Sub\-AF name
                                    	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    .. attribute:: topology_name
                                    
                                    	Topology Name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId, self).__init__()

                                        self.yang_name = "topology-id"
                                        self.yang_parent_name = "per-topology-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                            ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                            ('topology_name', YLeaf(YType.str, 'topology-name')),
                                        ])
                                        self.af_name = None
                                        self.saf_name = None
                                        self.vrf_name = None
                                        self.topology_name = None
                                        self._segment_path = lambda: "topology-id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.TopologyId, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                                class Status(Entity):
                                    """
                                    Status of the topology
                                    
                                    .. attribute:: disabled
                                    
                                    	Disabled information of a topology
                                    	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled>`
                                    
                                    .. attribute:: enabled
                                    
                                    	Enabled information of a topology
                                    	**type**\:  :py:class:`Enabled_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status, self).__init__()

                                        self.yang_name = "status"
                                        self.yang_parent_name = "per-topology-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled)), ("enabled", ("enabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('status', YLeaf(YType.enumeration, 'status')),
                                        ])
                                        self.status = None

                                        self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled()
                                        self.disabled.parent = self
                                        self._children_name_map["disabled"] = "disabled"
                                        self._children_yang_names.add("disabled")

                                        self.enabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_()
                                        self.enabled.parent = self
                                        self._children_name_map["enabled"] = "enabled"
                                        self._children_yang_names.add("enabled")
                                        self._segment_path = lambda: "status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status, ['status'], name, value)


                                    class Disabled(Entity):
                                        """
                                        Disabled information of a topology
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the topology is disabled
                                        	**type**\:  :py:class:`IsisIfTopoDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoDisabledReason>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled, self).__init__()

                                            self.yang_name = "disabled"
                                            self.yang_parent_name = "status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                            ])
                                            self.reason_code = None
                                            self._segment_path = lambda: "disabled"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Disabled, ['reason_code'], name, value)


                                    class Enabled_(Entity):
                                        """
                                        Enabled information of a topology
                                        
                                        .. attribute:: adjacency_form_status
                                        
                                        	Adjacency formation status of a topology
                                        	**type**\:  :py:class:`AdjacencyFormStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus>`
                                        
                                        .. attribute:: adv_prefix_status
                                        
                                        	Prefix advertisement status of a topology
                                        	**type**\:  :py:class:`AdvPrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus>`
                                        
                                        .. attribute:: level1_frr
                                        
                                        	Level1 FRR information
                                        	**type**\:  :py:class:`Level1Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr>`
                                        
                                        .. attribute:: level2_frr
                                        
                                        	Level2 FRR information
                                        	**type**\:  :py:class:`Level2Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr>`
                                        
                                        .. attribute:: level1_metric
                                        
                                        	L1 metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_metric
                                        
                                        	L2 metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1_weight
                                        
                                        	L1 metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_weight
                                        
                                        	L2 metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: max_label_supported
                                        
                                        	MPLS maximum number of pri labels supported
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: max_bkp_label_supported
                                        
                                        	MPLS maximum number of backup labels supported
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: max_srte_label_supported
                                        
                                        	MPLS maximum number of srte labels supported
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: level1ldp_sync_enabled
                                        
                                        	MPLS LDP sync enabled status for L1
                                        	**type**\: bool
                                        
                                        .. attribute:: level2ldp_sync_enabled
                                        
                                        	MPLS LDP sync enabled status for L2
                                        	**type**\: bool
                                        
                                        .. attribute:: ldp_sync_status
                                        
                                        	Status of MPLS LDP synchronization
                                        	**type**\: bool
                                        
                                        .. attribute:: ld_pv6_sync_status
                                        
                                        	Status of MPLS LDPv6 synchronization
                                        	**type**\: bool
                                        
                                        .. attribute:: level1_offset_metric
                                        
                                        	L1 metric\-offset for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2_offset_metric
                                        
                                        	L2 metric\-offset for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1_lkgp_configured
                                        
                                        	Link\-Group configure status for L1
                                        	**type**\: bool
                                        
                                        .. attribute:: level2_lkgp_configured
                                        
                                        	Link\-Group configure status for L2
                                        	**type**\: bool
                                        
                                        .. attribute:: level1pp_metric
                                        
                                        	L1 PP\-metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level2pp_metric
                                        
                                        	L2 PP\-metric for this topology
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: level1pp_configured
                                        
                                        	PP configure status for L1
                                        	**type**\: bool
                                        
                                        .. attribute:: level2pp_configured
                                        
                                        	PP configure status for L2
                                        	**type**\: bool
                                        
                                        .. attribute:: manual_adj_sid
                                        
                                        	Array of Manual Adjacency SIDs
                                        	**type**\: list of  		 :py:class:`ManualAdjSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.ManualAdjSid>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_, self).__init__()

                                            self.yang_name = "enabled"
                                            self.yang_parent_name = "status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("adjacency-form-status", ("adjacency_form_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus)), ("adv-prefix-status", ("adv_prefix_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus)), ("level1-frr", ("level1_frr", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr)), ("level2-frr", ("level2_frr", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr))])
                                            self._child_list_classes = OrderedDict([("manual-adj-sid", ("manual_adj_sid", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.ManualAdjSid))])
                                            self._leafs = OrderedDict([
                                                ('level1_metric', YLeaf(YType.uint32, 'level1-metric')),
                                                ('level2_metric', YLeaf(YType.uint32, 'level2-metric')),
                                                ('level1_weight', YLeaf(YType.uint32, 'level1-weight')),
                                                ('level2_weight', YLeaf(YType.uint32, 'level2-weight')),
                                                ('max_label_supported', YLeaf(YType.uint8, 'max-label-supported')),
                                                ('max_bkp_label_supported', YLeaf(YType.uint8, 'max-bkp-label-supported')),
                                                ('max_srte_label_supported', YLeaf(YType.uint8, 'max-srte-label-supported')),
                                                ('level1ldp_sync_enabled', YLeaf(YType.boolean, 'level1ldp-sync-enabled')),
                                                ('level2ldp_sync_enabled', YLeaf(YType.boolean, 'level2ldp-sync-enabled')),
                                                ('ldp_sync_status', YLeaf(YType.boolean, 'ldp-sync-status')),
                                                ('ld_pv6_sync_status', YLeaf(YType.boolean, 'ld-pv6-sync-status')),
                                                ('level1_offset_metric', YLeaf(YType.uint32, 'level1-offset-metric')),
                                                ('level2_offset_metric', YLeaf(YType.uint32, 'level2-offset-metric')),
                                                ('level1_lkgp_configured', YLeaf(YType.boolean, 'level1-lkgp-configured')),
                                                ('level2_lkgp_configured', YLeaf(YType.boolean, 'level2-lkgp-configured')),
                                                ('level1pp_metric', YLeaf(YType.uint32, 'level1pp-metric')),
                                                ('level2pp_metric', YLeaf(YType.uint32, 'level2pp-metric')),
                                                ('level1pp_configured', YLeaf(YType.boolean, 'level1pp-configured')),
                                                ('level2pp_configured', YLeaf(YType.boolean, 'level2pp-configured')),
                                            ])
                                            self.level1_metric = None
                                            self.level2_metric = None
                                            self.level1_weight = None
                                            self.level2_weight = None
                                            self.max_label_supported = None
                                            self.max_bkp_label_supported = None
                                            self.max_srte_label_supported = None
                                            self.level1ldp_sync_enabled = None
                                            self.level2ldp_sync_enabled = None
                                            self.ldp_sync_status = None
                                            self.ld_pv6_sync_status = None
                                            self.level1_offset_metric = None
                                            self.level2_offset_metric = None
                                            self.level1_lkgp_configured = None
                                            self.level2_lkgp_configured = None
                                            self.level1pp_metric = None
                                            self.level2pp_metric = None
                                            self.level1pp_configured = None
                                            self.level2pp_configured = None

                                            self.adjacency_form_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus()
                                            self.adjacency_form_status.parent = self
                                            self._children_name_map["adjacency_form_status"] = "adjacency-form-status"
                                            self._children_yang_names.add("adjacency-form-status")

                                            self.adv_prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus()
                                            self.adv_prefix_status.parent = self
                                            self._children_name_map["adv_prefix_status"] = "adv-prefix-status"
                                            self._children_yang_names.add("adv-prefix-status")

                                            self.level1_frr = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr()
                                            self.level1_frr.parent = self
                                            self._children_name_map["level1_frr"] = "level1-frr"
                                            self._children_yang_names.add("level1-frr")

                                            self.level2_frr = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr()
                                            self.level2_frr.parent = self
                                            self._children_name_map["level2_frr"] = "level2-frr"
                                            self._children_yang_names.add("level2-frr")

                                            self.manual_adj_sid = YList(self)
                                            self._segment_path = lambda: "enabled"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_, ['level1_metric', 'level2_metric', 'level1_weight', 'level2_weight', 'max_label_supported', 'max_bkp_label_supported', 'max_srte_label_supported', 'level1ldp_sync_enabled', 'level2ldp_sync_enabled', 'ldp_sync_status', 'ld_pv6_sync_status', 'level1_offset_metric', 'level2_offset_metric', 'level1_lkgp_configured', 'level2_lkgp_configured', 'level1pp_metric', 'level2pp_metric', 'level1pp_configured', 'level2pp_configured'], name, value)


                                        class AdjacencyFormStatus(Entity):
                                            """
                                            Adjacency formation status of a topology
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state for the adjacency formation status of a topology
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus, self).__init__()

                                                self.yang_name = "adjacency-form-status"
                                                self.yang_parent_name = "enabled"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus.Disabled))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('status', YLeaf(YType.enumeration, 'status')),
                                                ])
                                                self.status = None

                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus.Disabled()
                                                self.disabled.parent = self
                                                self._children_name_map["disabled"] = "disabled"
                                                self._children_yang_names.add("disabled")
                                                self._segment_path = lambda: "adjacency-form-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus, ['status'], name, value)


                                            class Disabled(Entity):
                                                """
                                                Disabled state for the adjacency formation
                                                status of a topology
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the adjacency formation status of a topology is disabled
                                                	**type**\:  :py:class:`IsisIfTopoAdjFormDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoAdjFormDisabledReason>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus.Disabled, self).__init__()

                                                    self.yang_name = "disabled"
                                                    self.yang_parent_name = "adjacency-form-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                    ])
                                                    self.reason_code = None
                                                    self._segment_path = lambda: "disabled"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdjacencyFormStatus.Disabled, ['reason_code'], name, value)


                                        class AdvPrefixStatus(Entity):
                                            """
                                            Prefix advertisement status of a topology
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state for the prefix advertisement status of a topology
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus, self).__init__()

                                                self.yang_name = "adv-prefix-status"
                                                self.yang_parent_name = "enabled"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus.Disabled))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('status', YLeaf(YType.enumeration, 'status')),
                                                ])
                                                self.status = None

                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus.Disabled()
                                                self.disabled.parent = self
                                                self._children_name_map["disabled"] = "disabled"
                                                self._children_yang_names.add("disabled")
                                                self._segment_path = lambda: "adv-prefix-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus, ['status'], name, value)


                                            class Disabled(Entity):
                                                """
                                                Disabled state for the prefix advertisement
                                                status of a topology
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the prefix advertisement status of a topology is disabled
                                                	**type**\:  :py:class:`IsisIfTopoAdvPrefixDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfTopoAdvPrefixDisabledReason>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus.Disabled, self).__init__()

                                                    self.yang_name = "disabled"
                                                    self.yang_parent_name = "adv-prefix-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                    ])
                                                    self.reason_code = None
                                                    self._segment_path = lambda: "disabled"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.AdvPrefixStatus.Disabled, ['reason_code'], name, value)


                                        class Level1Frr(Entity):
                                            """
                                            Level1 FRR information
                                            
                                            .. attribute:: frr_type
                                            
                                            	FRR type configured per level for this interface
                                            	**type**\:  :py:class:`IsisFrr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisFrr>`
                                            
                                            .. attribute:: is_frr
                                            
                                            	Is FRR enabled per level on this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: is_remote_lfa
                                            
                                            	Is FRR Remote LFA enabled per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: is_ti_lfa
                                            
                                            	Is FRR TI LFA enabled per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: ti_lfa_node_tie_breaker_index
                                            
                                            	TI LFA node\-protecting Tie breaker index
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: ti_lfa_srlg_tie_breaker
                                            
                                            	TI LFA srlg Tie breaker index
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: is_tie_breakers_configured
                                            
                                            	Is Tiebreaker configured per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: frr_tie_breaker
                                            
                                            	FRR TieBreakers array per level for this interface
                                            	**type**\: list of  		 :py:class:`FrrTieBreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr.FrrTieBreaker>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr, self).__init__()

                                                self.yang_name = "level1-frr"
                                                self.yang_parent_name = "enabled"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("frr-tie-breaker", ("frr_tie_breaker", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr.FrrTieBreaker))])
                                                self._leafs = OrderedDict([
                                                    ('frr_type', YLeaf(YType.enumeration, 'frr-type')),
                                                    ('is_frr', YLeaf(YType.boolean, 'is-frr')),
                                                    ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                    ('is_ti_lfa', YLeaf(YType.boolean, 'is-ti-lfa')),
                                                    ('ti_lfa_node_tie_breaker_index', YLeaf(YType.uint8, 'ti-lfa-node-tie-breaker-index')),
                                                    ('ti_lfa_srlg_tie_breaker', YLeaf(YType.uint8, 'ti-lfa-srlg-tie-breaker')),
                                                    ('is_tie_breakers_configured', YLeaf(YType.boolean, 'is-tie-breakers-configured')),
                                                ])
                                                self.frr_type = None
                                                self.is_frr = None
                                                self.is_remote_lfa = None
                                                self.is_ti_lfa = None
                                                self.ti_lfa_node_tie_breaker_index = None
                                                self.ti_lfa_srlg_tie_breaker = None
                                                self.is_tie_breakers_configured = None

                                                self.frr_tie_breaker = YList(self)
                                                self._segment_path = lambda: "level1-frr"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr, ['frr_type', 'is_frr', 'is_remote_lfa', 'is_ti_lfa', 'ti_lfa_node_tie_breaker_index', 'ti_lfa_srlg_tie_breaker', 'is_tie_breakers_configured'], name, value)


                                            class FrrTieBreaker(Entity):
                                                """
                                                FRR TieBreakers array per level for this
                                                interface
                                                
                                                .. attribute:: tie_breaker
                                                
                                                	Tie Breaker Type
                                                	**type**\:  :py:class:`IsisFrrTiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisFrrTiebreaker>`
                                                
                                                .. attribute:: index
                                                
                                                	Tie Breaker Index
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr.FrrTieBreaker, self).__init__()

                                                    self.yang_name = "frr-tie-breaker"
                                                    self.yang_parent_name = "level1-frr"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tie_breaker', YLeaf(YType.enumeration, 'tie-breaker')),
                                                        ('index', YLeaf(YType.uint8, 'index')),
                                                    ])
                                                    self.tie_breaker = None
                                                    self.index = None
                                                    self._segment_path = lambda: "frr-tie-breaker"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level1Frr.FrrTieBreaker, ['tie_breaker', 'index'], name, value)


                                        class Level2Frr(Entity):
                                            """
                                            Level2 FRR information
                                            
                                            .. attribute:: frr_type
                                            
                                            	FRR type configured per level for this interface
                                            	**type**\:  :py:class:`IsisFrr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisFrr>`
                                            
                                            .. attribute:: is_frr
                                            
                                            	Is FRR enabled per level on this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: is_remote_lfa
                                            
                                            	Is FRR Remote LFA enabled per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: is_ti_lfa
                                            
                                            	Is FRR TI LFA enabled per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: ti_lfa_node_tie_breaker_index
                                            
                                            	TI LFA node\-protecting Tie breaker index
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: ti_lfa_srlg_tie_breaker
                                            
                                            	TI LFA srlg Tie breaker index
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: is_tie_breakers_configured
                                            
                                            	Is Tiebreaker configured per level for this interface
                                            	**type**\: bool
                                            
                                            .. attribute:: frr_tie_breaker
                                            
                                            	FRR TieBreakers array per level for this interface
                                            	**type**\: list of  		 :py:class:`FrrTieBreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr.FrrTieBreaker>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr, self).__init__()

                                                self.yang_name = "level2-frr"
                                                self.yang_parent_name = "enabled"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([("frr-tie-breaker", ("frr_tie_breaker", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr.FrrTieBreaker))])
                                                self._leafs = OrderedDict([
                                                    ('frr_type', YLeaf(YType.enumeration, 'frr-type')),
                                                    ('is_frr', YLeaf(YType.boolean, 'is-frr')),
                                                    ('is_remote_lfa', YLeaf(YType.boolean, 'is-remote-lfa')),
                                                    ('is_ti_lfa', YLeaf(YType.boolean, 'is-ti-lfa')),
                                                    ('ti_lfa_node_tie_breaker_index', YLeaf(YType.uint8, 'ti-lfa-node-tie-breaker-index')),
                                                    ('ti_lfa_srlg_tie_breaker', YLeaf(YType.uint8, 'ti-lfa-srlg-tie-breaker')),
                                                    ('is_tie_breakers_configured', YLeaf(YType.boolean, 'is-tie-breakers-configured')),
                                                ])
                                                self.frr_type = None
                                                self.is_frr = None
                                                self.is_remote_lfa = None
                                                self.is_ti_lfa = None
                                                self.ti_lfa_node_tie_breaker_index = None
                                                self.ti_lfa_srlg_tie_breaker = None
                                                self.is_tie_breakers_configured = None

                                                self.frr_tie_breaker = YList(self)
                                                self._segment_path = lambda: "level2-frr"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr, ['frr_type', 'is_frr', 'is_remote_lfa', 'is_ti_lfa', 'ti_lfa_node_tie_breaker_index', 'ti_lfa_srlg_tie_breaker', 'is_tie_breakers_configured'], name, value)


                                            class FrrTieBreaker(Entity):
                                                """
                                                FRR TieBreakers array per level for this
                                                interface
                                                
                                                .. attribute:: tie_breaker
                                                
                                                	Tie Breaker Type
                                                	**type**\:  :py:class:`IsisFrrTiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisFrrTiebreaker>`
                                                
                                                .. attribute:: index
                                                
                                                	Tie Breaker Index
                                                	**type**\: int
                                                
                                                	**range:** 0..255
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr.FrrTieBreaker, self).__init__()

                                                    self.yang_name = "frr-tie-breaker"
                                                    self.yang_parent_name = "level2-frr"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('tie_breaker', YLeaf(YType.enumeration, 'tie-breaker')),
                                                        ('index', YLeaf(YType.uint8, 'index')),
                                                    ])
                                                    self.tie_breaker = None
                                                    self.index = None
                                                    self._segment_path = lambda: "frr-tie-breaker"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.Level2Frr.FrrTieBreaker, ['tie_breaker', 'index'], name, value)


                                        class ManualAdjSid(Entity):
                                            """
                                            Array of Manual Adjacency SIDs
                                            
                                            .. attribute:: manual_adjacency_sid_label
                                            
                                            	Manual Adjacency SID Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: manual_adjacency_sid_index
                                            
                                            	Manual Adjacency SID Index (if configured as index)
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: manual_adjacency_sid_type
                                            
                                            	Manual Adjacency SID Type (Absolute or Index)
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: sid_protected
                                            
                                            	SID configured as protected by backup path
                                            	**type**\: bool
                                            
                                            .. attribute:: sid_active
                                            
                                            	SID is in use
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.ManualAdjSid, self).__init__()

                                                self.yang_name = "manual-adj-sid"
                                                self.yang_parent_name = "enabled"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('manual_adjacency_sid_label', YLeaf(YType.uint32, 'manual-adjacency-sid-label')),
                                                    ('manual_adjacency_sid_index', YLeaf(YType.uint32, 'manual-adjacency-sid-index')),
                                                    ('manual_adjacency_sid_type', YLeaf(YType.uint8, 'manual-adjacency-sid-type')),
                                                    ('sid_protected', YLeaf(YType.boolean, 'sid-protected')),
                                                    ('sid_active', YLeaf(YType.boolean, 'sid-active')),
                                                ])
                                                self.manual_adjacency_sid_label = None
                                                self.manual_adjacency_sid_index = None
                                                self.manual_adjacency_sid_type = None
                                                self.sid_protected = None
                                                self.sid_active = None
                                                self._segment_path = lambda: "manual-adj-sid"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerTopologyData.Status.Enabled_.ManualAdjSid, ['manual_adjacency_sid_label', 'manual_adjacency_sid_index', 'manual_adjacency_sid_type', 'sid_protected', 'sid_active'], name, value)


                            class PerAddressFamilyData(Entity):
                                """
                                Array of address family information
                                
                                .. attribute:: af_status
                                
                                	Address Family status of the interface
                                	**type**\:  :py:class:`AfStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus>`
                                
                                .. attribute:: af_name
                                
                                	Address Family Identifier of the interface
                                	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData, self).__init__()

                                    self.yang_name = "per-address-family-data"
                                    self.yang_parent_name = "enabled"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("af-status", ("af_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                    ])
                                    self.af_name = None

                                    self.af_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus()
                                    self.af_status.parent = self
                                    self._children_name_map["af_status"] = "af-status"
                                    self._children_yang_names.add("af-status")
                                    self._segment_path = lambda: "per-address-family-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData, ['af_name'], name, value)


                                class AfStatus(Entity):
                                    """
                                    Address Family status of the interface
                                    
                                    .. attribute:: disabled
                                    
                                    	Disabled info for the AF of an interface
                                    	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled>`
                                    
                                    .. attribute:: af_data
                                    
                                    	Enabled data for the AF of an interface
                                    	**type**\:  :py:class:`AfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData>`
                                    
                                    .. attribute:: status
                                    
                                    	Status
                                    	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus, self).__init__()

                                        self.yang_name = "af-status"
                                        self.yang_parent_name = "per-address-family-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled)), ("af-data", ("af_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('status', YLeaf(YType.enumeration, 'status')),
                                        ])
                                        self.status = None

                                        self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled()
                                        self.disabled.parent = self
                                        self._children_name_map["disabled"] = "disabled"
                                        self._children_yang_names.add("disabled")

                                        self.af_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData()
                                        self.af_data.parent = self
                                        self._children_name_map["af_data"] = "af-data"
                                        self._children_yang_names.add("af-data")
                                        self._segment_path = lambda: "af-status"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus, ['status'], name, value)


                                    class Disabled(Entity):
                                        """
                                        Disabled info for the AF of an interface
                                        
                                        .. attribute:: reason_code
                                        
                                        	Reason why the Address Family is disabled
                                        	**type**\:  :py:class:`IsisIfAfDisabledReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfDisabledReason>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled, self).__init__()

                                            self.yang_name = "disabled"
                                            self.yang_parent_name = "af-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                            ])
                                            self.reason_code = None
                                            self._segment_path = lambda: "disabled"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.Disabled, ['reason_code'], name, value)


                                    class AfData(Entity):
                                        """
                                        Enabled data for the AF of an interface
                                        
                                        .. attribute:: protocol_status
                                        
                                        	Protocol status of the AF
                                        	**type**\:  :py:class:`ProtocolStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus>`
                                        
                                        .. attribute:: forwarding_address_status
                                        
                                        	Forwarding status of the AF
                                        	**type**\:  :py:class:`ForwardingAddressStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus>`
                                        
                                        .. attribute:: prefix_status
                                        
                                        	Prefix status of the AF
                                        	**type**\:  :py:class:`PrefixStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus>`
                                        
                                        

                                        """

                                        _prefix = 'clns-isis-oper'
                                        _revision = '2017-06-26'

                                        def __init__(self):
                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData, self).__init__()

                                            self.yang_name = "af-data"
                                            self.yang_parent_name = "af-status"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([("protocol-status", ("protocol_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus)), ("forwarding-address-status", ("forwarding_address_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus)), ("prefix-status", ("prefix_status", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus))])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict()

                                            self.protocol_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus()
                                            self.protocol_status.parent = self
                                            self._children_name_map["protocol_status"] = "protocol-status"
                                            self._children_yang_names.add("protocol-status")

                                            self.forwarding_address_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus()
                                            self.forwarding_address_status.parent = self
                                            self._children_name_map["forwarding_address_status"] = "forwarding-address-status"
                                            self._children_yang_names.add("forwarding-address-status")

                                            self.prefix_status = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus()
                                            self.prefix_status.parent = self
                                            self._children_name_map["prefix_status"] = "prefix-status"
                                            self._children_yang_names.add("prefix-status")
                                            self._segment_path = lambda: "af-data"


                                        class ProtocolStatus(Entity):
                                            """
                                            Protocol status of the AF
                                            
                                            .. attribute:: disabled
                                            
                                            	Disabled state of the Address Family protocol
                                            	**type**\:  :py:class:`Disabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisUp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUp>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus, self).__init__()

                                                self.yang_name = "protocol-status"
                                                self.yang_parent_name = "af-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("disabled", ("disabled", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('status', YLeaf(YType.enumeration, 'status')),
                                                ])
                                                self.status = None

                                                self.disabled = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled()
                                                self.disabled.parent = self
                                                self._children_name_map["disabled"] = "disabled"
                                                self._children_yang_names.add("disabled")
                                                self._segment_path = lambda: "protocol-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus, ['status'], name, value)


                                            class Disabled(Entity):
                                                """
                                                Disabled state of the Address Family protocol
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the Address Family protocol status is down
                                                	**type**\:  :py:class:`IsisIfAfProtoDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfProtoDownReason>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled, self).__init__()

                                                    self.yang_name = "disabled"
                                                    self.yang_parent_name = "protocol-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                    ])
                                                    self.reason_code = None
                                                    self._segment_path = lambda: "disabled"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ProtocolStatus.Disabled, ['reason_code'], name, value)


                                        class ForwardingAddressStatus(Entity):
                                            """
                                            Forwarding status of the AF
                                            
                                            .. attribute:: unknown
                                            
                                            	Unknown forwarding address data
                                            	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown>`
                                            
                                            .. attribute:: forwarding_address_data
                                            
                                            	Known Forwarding address data
                                            	**type**\:  :py:class:`ForwardingAddressData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisKnown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnown>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus, self).__init__()

                                                self.yang_name = "forwarding-address-status"
                                                self.yang_parent_name = "af-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("unknown", ("unknown", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown)), ("forwarding-address-data", ("forwarding_address_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('status', YLeaf(YType.enumeration, 'status')),
                                                ])
                                                self.status = None

                                                self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown()
                                                self.unknown.parent = self
                                                self._children_name_map["unknown"] = "unknown"
                                                self._children_yang_names.add("unknown")

                                                self.forwarding_address_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData()
                                                self.forwarding_address_data.parent = self
                                                self._children_name_map["forwarding_address_data"] = "forwarding-address-data"
                                                self._children_yang_names.add("forwarding-address-data")
                                                self._segment_path = lambda: "forwarding-address-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus, ['status'], name, value)


                                            class Unknown(Entity):
                                                """
                                                Unknown forwarding address data
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the forwarding address(es) of an AF is(are) unknown
                                                	**type**\:  :py:class:`IsisIfAfFwdAddrUnknownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfFwdAddrUnknownReason>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown, self).__init__()

                                                    self.yang_name = "unknown"
                                                    self.yang_parent_name = "forwarding-address-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                    ])
                                                    self.reason_code = None
                                                    self._segment_path = lambda: "unknown"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.Unknown, ['reason_code'], name, value)


                                            class ForwardingAddressData(Entity):
                                                """
                                                Known Forwarding address data
                                                
                                                .. attribute:: unnumbered_interface_name
                                                
                                                	If the interface is unnumbered, then its name, else NULL
                                                	**type**\: str
                                                
                                                .. attribute:: forwarding_address
                                                
                                                	Array of forwarding addresses
                                                	**type**\: list of  		 :py:class:`ForwardingAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData, self).__init__()

                                                    self.yang_name = "forwarding-address-data"
                                                    self.yang_parent_name = "forwarding-address-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("forwarding-address", ("forwarding_address", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress))])
                                                    self._leafs = OrderedDict([
                                                        ('unnumbered_interface_name', YLeaf(YType.str, 'unnumbered-interface-name')),
                                                    ])
                                                    self.unnumbered_interface_name = None

                                                    self.forwarding_address = YList(self)
                                                    self._segment_path = lambda: "forwarding-address-data"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData, ['unnumbered_interface_name'], name, value)


                                                class ForwardingAddress(Entity):
                                                    """
                                                    Array of forwarding addresses
                                                    
                                                    .. attribute:: af_name
                                                    
                                                    	AFName
                                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                                    
                                                    .. attribute:: ipv4
                                                    
                                                    	IPV4 address type
                                                    	**type**\: str
                                                    
                                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                    
                                                    .. attribute:: ipv6
                                                    
                                                    	IPV6 address type
                                                    	**type**\: str
                                                    
                                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress, self).__init__()

                                                        self.yang_name = "forwarding-address"
                                                        self.yang_parent_name = "forwarding-address-data"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                                        ])
                                                        self.af_name = None
                                                        self.ipv4 = None
                                                        self.ipv6 = None
                                                        self._segment_path = lambda: "forwarding-address"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.ForwardingAddressStatus.ForwardingAddressData.ForwardingAddress, ['af_name', 'ipv4', 'ipv6'], name, value)


                                        class PrefixStatus(Entity):
                                            """
                                            Prefix status of the AF
                                            
                                            .. attribute:: unknown
                                            
                                            	Unknown state for the global prefixes
                                            	**type**\:  :py:class:`Unknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown>`
                                            
                                            .. attribute:: prefix_data
                                            
                                            	Global prefix data for the Address Family
                                            	**type**\:  :py:class:`PrefixData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData>`
                                            
                                            .. attribute:: status
                                            
                                            	Status
                                            	**type**\:  :py:class:`IsisKnown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisKnown>`
                                            
                                            

                                            """

                                            _prefix = 'clns-isis-oper'
                                            _revision = '2017-06-26'

                                            def __init__(self):
                                                super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus, self).__init__()

                                                self.yang_name = "prefix-status"
                                                self.yang_parent_name = "af-data"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([("unknown", ("unknown", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown)), ("prefix-data", ("prefix_data", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData))])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('status', YLeaf(YType.enumeration, 'status')),
                                                ])
                                                self.status = None

                                                self.unknown = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown()
                                                self.unknown.parent = self
                                                self._children_name_map["unknown"] = "unknown"
                                                self._children_yang_names.add("unknown")

                                                self.prefix_data = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData()
                                                self.prefix_data.parent = self
                                                self._children_name_map["prefix_data"] = "prefix-data"
                                                self._children_yang_names.add("prefix-data")
                                                self._segment_path = lambda: "prefix-status"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus, ['status'], name, value)


                                            class Unknown(Entity):
                                                """
                                                Unknown state for the global prefixes
                                                
                                                .. attribute:: reason_code
                                                
                                                	Reason why the global prefix(es) is(are) unknown
                                                	**type**\:  :py:class:`IsisIfAfPrefixUnknownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisIfAfPrefixUnknownReason>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown, self).__init__()

                                                    self.yang_name = "unknown"
                                                    self.yang_parent_name = "prefix-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('reason_code', YLeaf(YType.enumeration, 'reason-code')),
                                                    ])
                                                    self.reason_code = None
                                                    self._segment_path = lambda: "unknown"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.Unknown, ['reason_code'], name, value)


                                            class PrefixData(Entity):
                                                """
                                                Global prefix data for the Address Family
                                                
                                                .. attribute:: is_unnumbered
                                                
                                                	Is the interface unnumbered
                                                	**type**\: bool
                                                
                                                .. attribute:: prefix
                                                
                                                	Array of global prefixes
                                                	**type**\: list of  		 :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix>`
                                                
                                                

                                                """

                                                _prefix = 'clns-isis-oper'
                                                _revision = '2017-06-26'

                                                def __init__(self):
                                                    super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData, self).__init__()

                                                    self.yang_name = "prefix-data"
                                                    self.yang_parent_name = "prefix-status"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_container_classes = OrderedDict([])
                                                    self._child_list_classes = OrderedDict([("prefix", ("prefix", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix))])
                                                    self._leafs = OrderedDict([
                                                        ('is_unnumbered', YLeaf(YType.boolean, 'is-unnumbered')),
                                                    ])
                                                    self.is_unnumbered = None

                                                    self.prefix = YList(self)
                                                    self._segment_path = lambda: "prefix-data"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData, ['is_unnumbered'], name, value)


                                                class Prefix(Entity):
                                                    """
                                                    Array of global prefixes
                                                    
                                                    .. attribute:: ipv4
                                                    
                                                    	ipv4
                                                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4>`
                                                    
                                                    .. attribute:: ipv6
                                                    
                                                    	ipv6
                                                    	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6>`
                                                    
                                                    .. attribute:: af_name
                                                    
                                                    	AFName
                                                    	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'clns-isis-oper'
                                                    _revision = '2017-06-26'

                                                    def __init__(self):
                                                        super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix, self).__init__()

                                                        self.yang_name = "prefix"
                                                        self.yang_parent_name = "prefix-data"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = []
                                                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4)), ("ipv6", ("ipv6", Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6))])
                                                        self._child_list_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                                        ])
                                                        self.af_name = None

                                                        self.ipv4 = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4()
                                                        self.ipv4.parent = self
                                                        self._children_name_map["ipv4"] = "ipv4"
                                                        self._children_yang_names.add("ipv4")

                                                        self.ipv6 = Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6()
                                                        self.ipv6.parent = self
                                                        self._children_name_map["ipv6"] = "ipv6"
                                                        self._children_yang_names.add("ipv6")
                                                        self._segment_path = lambda: "prefix"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix, ['af_name'], name, value)


                                                    class Ipv4(Entity):
                                                        """
                                                        ipv4
                                                        
                                                        .. attribute:: prefix
                                                        
                                                        	prefix
                                                        	**type**\: str
                                                        
                                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: prefix_length
                                                        
                                                        	prefix length
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4, self).__init__()

                                                            self.yang_name = "ipv4"
                                                            self.yang_parent_name = "prefix"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                                            ])
                                                            self.prefix = None
                                                            self.prefix_length = None
                                                            self._segment_path = lambda: "ipv4"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv4, ['prefix', 'prefix_length'], name, value)


                                                    class Ipv6(Entity):
                                                        """
                                                        ipv6
                                                        
                                                        .. attribute:: prefix
                                                        
                                                        	prefix
                                                        	**type**\: str
                                                        
                                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                                        
                                                        .. attribute:: prefix_length
                                                        
                                                        	prefix length
                                                        	**type**\: int
                                                        
                                                        	**range:** 0..255
                                                        
                                                        

                                                        """

                                                        _prefix = 'clns-isis-oper'
                                                        _revision = '2017-06-26'

                                                        def __init__(self):
                                                            super(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6, self).__init__()

                                                            self.yang_name = "ipv6"
                                                            self.yang_parent_name = "prefix"
                                                            self.is_top_level_class = False
                                                            self.has_list_ancestor = True
                                                            self.ylist_key_names = []
                                                            self._child_container_classes = OrderedDict([])
                                                            self._child_list_classes = OrderedDict([])
                                                            self._leafs = OrderedDict([
                                                                ('prefix', YLeaf(YType.str, 'prefix')),
                                                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                                            ])
                                                            self.prefix = None
                                                            self.prefix_length = None
                                                            self._segment_path = lambda: "ipv6"

                                                        def __setattr__(self, name, value):
                                                            self._perform_setattr(Isis.Instances.Instance.Interfaces.Interface.InterfaceStatusAndData.Enabled.PerAddressFamilyData.AfStatus.AfData.PrefixStatus.PrefixData.Prefix.Ipv6, ['prefix', 'prefix_length'], name, value)


            class CheckpointAdjacencies(Entity):
                """
                Checkpointed adjacency table
                
                .. attribute:: checkpoint_adjacency
                
                	A checkpointed IS\-IS adjacency
                	**type**\: list of  		 :py:class:`CheckpointAdjacency <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.CheckpointAdjacencies, self).__init__()

                    self.yang_name = "checkpoint-adjacencies"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("checkpoint-adjacency", ("checkpoint_adjacency", Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency))])
                    self._leafs = OrderedDict()

                    self.checkpoint_adjacency = YList(self)
                    self._segment_path = lambda: "checkpoint-adjacencies"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.CheckpointAdjacencies, [], name, value)


                class CheckpointAdjacency(Entity):
                    """
                    A checkpointed IS\-IS adjacency
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevel>`
                    
                    .. attribute:: system_id
                    
                    	System ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: checkpoint_adjacency_object_id
                    
                    	Checkpoint object ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_adjacency_system_id
                    
                    	Neighbor system ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: checkpoint_adjacency_snpa
                    
                    	Neighbor SNPA
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: checkpoint_adjacency_interface
                    
                    	Local interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: checkpoint_adjacency_level
                    
                    	Adjacency level
                    	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                    
                    .. attribute:: checkpoint_adjacency_holdtime
                    
                    	Adjacency holdtime (s)
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: checkpoint_adjacency_lan_priority
                    
                    	Adjacency LAN priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_adjacency_circuit_number
                    
                    	Neighbor circuit number
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_adjacency_per_address_family_next_hop
                    
                    	Per address family next hops
                    	**type**\: list of  		 :py:class:`CheckpointAdjacencyPerAddressFamilyNextHop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency, self).__init__()

                        self.yang_name = "checkpoint-adjacency"
                        self.yang_parent_name = "checkpoint-adjacencies"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("checkpoint-adjacency-per-address-family-next-hop", ("checkpoint_adjacency_per_address_family_next_hop", Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop))])
                        self._leafs = OrderedDict([
                            ('level', YLeaf(YType.enumeration, 'level')),
                            ('system_id', YLeaf(YType.str, 'system-id')),
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('checkpoint_adjacency_object_id', YLeaf(YType.uint32, 'checkpoint-adjacency-object-id')),
                            ('checkpoint_adjacency_system_id', YLeaf(YType.str, 'checkpoint-adjacency-system-id')),
                            ('checkpoint_adjacency_snpa', YLeaf(YType.str, 'checkpoint-adjacency-snpa')),
                            ('checkpoint_adjacency_interface', YLeaf(YType.str, 'checkpoint-adjacency-interface')),
                            ('checkpoint_adjacency_level', YLeaf(YType.enumeration, 'checkpoint-adjacency-level')),
                            ('checkpoint_adjacency_holdtime', YLeaf(YType.uint16, 'checkpoint-adjacency-holdtime')),
                            ('checkpoint_adjacency_lan_priority', YLeaf(YType.uint8, 'checkpoint-adjacency-lan-priority')),
                            ('checkpoint_adjacency_circuit_number', YLeaf(YType.uint8, 'checkpoint-adjacency-circuit-number')),
                        ])
                        self.level = None
                        self.system_id = None
                        self.interface_name = None
                        self.checkpoint_adjacency_object_id = None
                        self.checkpoint_adjacency_system_id = None
                        self.checkpoint_adjacency_snpa = None
                        self.checkpoint_adjacency_interface = None
                        self.checkpoint_adjacency_level = None
                        self.checkpoint_adjacency_holdtime = None
                        self.checkpoint_adjacency_lan_priority = None
                        self.checkpoint_adjacency_circuit_number = None

                        self.checkpoint_adjacency_per_address_family_next_hop = YList(self)
                        self._segment_path = lambda: "checkpoint-adjacency"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency, ['level', 'system_id', 'interface_name', 'checkpoint_adjacency_object_id', 'checkpoint_adjacency_system_id', 'checkpoint_adjacency_snpa', 'checkpoint_adjacency_interface', 'checkpoint_adjacency_level', 'checkpoint_adjacency_holdtime', 'checkpoint_adjacency_lan_priority', 'checkpoint_adjacency_circuit_number'], name, value)


                    class CheckpointAdjacencyPerAddressFamilyNextHop(Entity):
                        """
                        Per address family next hops
                        
                        .. attribute:: af_name
                        
                        	AFName
                        	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                        
                        .. attribute:: ipv4
                        
                        	IPV4 address type
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPV6 address type
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop, self).__init__()

                            self.yang_name = "checkpoint-adjacency-per-address-family-next-hop"
                            self.yang_parent_name = "checkpoint-adjacency"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                ('ipv4', YLeaf(YType.str, 'ipv4')),
                                ('ipv6', YLeaf(YType.str, 'ipv6')),
                            ])
                            self.af_name = None
                            self.ipv4 = None
                            self.ipv6 = None
                            self._segment_path = lambda: "checkpoint-adjacency-per-address-family-next-hop"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.CheckpointAdjacencies.CheckpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop, ['af_name', 'ipv4', 'ipv6'], name, value)


            class Srms(Entity):
                """
                Segment Routing Mapping Server operational
                data
                
                .. attribute:: policy
                
                	Policy operational data
                	**type**\:  :py:class:`Policy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Srms, self).__init__()

                    self.yang_name = "srms"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("policy", ("policy", Isis.Instances.Instance.Srms.Policy))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.policy = Isis.Instances.Instance.Srms.Policy()
                    self.policy.parent = self
                    self._children_name_map["policy"] = "policy"
                    self._children_yang_names.add("policy")
                    self._segment_path = lambda: "srms"


                class Policy(Entity):
                    """
                    Policy operational data
                    
                    .. attribute:: policy_ipv4
                    
                    	IPv4 policy operational data
                    	**type**\:  :py:class:`PolicyIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4>`
                    
                    .. attribute:: policy_ipv6
                    
                    	IPv6 policy operational data
                    	**type**\:  :py:class:`PolicyIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Srms.Policy, self).__init__()

                        self.yang_name = "policy"
                        self.yang_parent_name = "srms"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("policy-ipv4", ("policy_ipv4", Isis.Instances.Instance.Srms.Policy.PolicyIpv4)), ("policy-ipv6", ("policy_ipv6", Isis.Instances.Instance.Srms.Policy.PolicyIpv6))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.policy_ipv4 = Isis.Instances.Instance.Srms.Policy.PolicyIpv4()
                        self.policy_ipv4.parent = self
                        self._children_name_map["policy_ipv4"] = "policy-ipv4"
                        self._children_yang_names.add("policy-ipv4")

                        self.policy_ipv6 = Isis.Instances.Instance.Srms.Policy.PolicyIpv6()
                        self.policy_ipv6.parent = self
                        self._children_name_map["policy_ipv6"] = "policy-ipv6"
                        self._children_yang_names.add("policy-ipv6")
                        self._segment_path = lambda: "policy"


                    class PolicyIpv4(Entity):
                        """
                        IPv4 policy operational data
                        
                        .. attribute:: policy_ipv4_active
                        
                        	IPv4 active policy operational data
                        	**type**\:  :py:class:`PolicyIpv4Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active>`
                        
                        .. attribute:: policy_ipv4_backup
                        
                        	IPv4 backup policy operational data
                        	**type**\:  :py:class:`PolicyIpv4Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4, self).__init__()

                            self.yang_name = "policy-ipv4"
                            self.yang_parent_name = "policy"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("policy-ipv4-active", ("policy_ipv4_active", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active)), ("policy-ipv4-backup", ("policy_ipv4_backup", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.policy_ipv4_active = Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active()
                            self.policy_ipv4_active.parent = self
                            self._children_name_map["policy_ipv4_active"] = "policy-ipv4-active"
                            self._children_yang_names.add("policy-ipv4-active")

                            self.policy_ipv4_backup = Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup()
                            self.policy_ipv4_backup.parent = self
                            self._children_name_map["policy_ipv4_backup"] = "policy-ipv4-backup"
                            self._children_yang_names.add("policy-ipv4-backup")
                            self._segment_path = lambda: "policy-ipv4"


                        class PolicyIpv4Active(Entity):
                            """
                            IPv4 active policy operational data
                            
                            .. attribute:: policy_mi
                            
                            	Mapping Item
                            	**type**\: list of  		 :py:class:`PolicyMi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active, self).__init__()

                                self.yang_name = "policy-ipv4-active"
                                self.yang_parent_name = "policy-ipv4"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("policy-mi", ("policy_mi", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi))])
                                self._leafs = OrderedDict()

                                self.policy_mi = YList(self)
                                self._segment_path = lambda: "policy-ipv4-active"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active, [], name, value)


                            class PolicyMi(Entity):
                                """
                                Mapping Item
                                
                                .. attribute:: mi_id  (key)
                                
                                	Mapping Item ID (0, 1, 2, ...)
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: addr
                                
                                	addr
                                	**type**\:  :py:class:`Addr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi.Addr>`
                                
                                .. attribute:: src
                                
                                	src
                                	**type**\:  :py:class:`SrmsMiSrcEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiSrcEB>`
                                
                                .. attribute:: router
                                
                                	Router ID
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: area
                                
                                	Area (OSPF) or Level (ISIS)
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: prefix
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: sid_start
                                
                                	Starting SID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sid_count
                                
                                	SID range
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_prefix
                                
                                	Last IP Prefix
                                	**type**\: str
                                
                                	**length:** 0..50
                                
                                .. attribute:: last_sid_index
                                
                                	Last SID Index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flag_attached
                                
                                	Attached flag
                                	**type**\:  :py:class:`SrmsMiFlagEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiFlagEB>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi, self).__init__()

                                    self.yang_name = "policy-mi"
                                    self.yang_parent_name = "policy-ipv4-active"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['mi_id']
                                    self._child_container_classes = OrderedDict([("addr", ("addr", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi.Addr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mi_id', YLeaf(YType.str, 'mi-id')),
                                        ('src', YLeaf(YType.enumeration, 'src')),
                                        ('router', YLeaf(YType.str, 'router')),
                                        ('area', YLeaf(YType.str, 'area')),
                                        ('prefix', YLeaf(YType.uint8, 'prefix')),
                                        ('sid_start', YLeaf(YType.uint32, 'sid-start')),
                                        ('sid_count', YLeaf(YType.uint32, 'sid-count')),
                                        ('last_prefix', YLeaf(YType.str, 'last-prefix')),
                                        ('last_sid_index', YLeaf(YType.uint32, 'last-sid-index')),
                                        ('flag_attached', YLeaf(YType.enumeration, 'flag-attached')),
                                    ])
                                    self.mi_id = None
                                    self.src = None
                                    self.router = None
                                    self.area = None
                                    self.prefix = None
                                    self.sid_start = None
                                    self.sid_count = None
                                    self.last_prefix = None
                                    self.last_sid_index = None
                                    self.flag_attached = None

                                    self.addr = Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi.Addr()
                                    self.addr.parent = self
                                    self._children_name_map["addr"] = "addr"
                                    self._children_yang_names.add("addr")
                                    self._segment_path = lambda: "policy-mi" + "[mi-id='" + str(self.mi_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi, ['mi_id', 'src', 'router', 'area', 'prefix', 'sid_start', 'sid_count', 'last_prefix', 'last_sid_index', 'flag_attached'], name, value)


                                class Addr(Entity):
                                    """
                                    addr
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`SrmsMiAfEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiAfEB>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi.Addr, self).__init__()

                                        self.yang_name = "addr"
                                        self.yang_parent_name = "policy-mi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Active.PolicyMi.Addr, ['af', 'ipv4', 'ipv6'], name, value)


                        class PolicyIpv4Backup(Entity):
                            """
                            IPv4 backup policy operational data
                            
                            .. attribute:: policy_mi
                            
                            	Mapping Item
                            	**type**\: list of  		 :py:class:`PolicyMi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup, self).__init__()

                                self.yang_name = "policy-ipv4-backup"
                                self.yang_parent_name = "policy-ipv4"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("policy-mi", ("policy_mi", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi))])
                                self._leafs = OrderedDict()

                                self.policy_mi = YList(self)
                                self._segment_path = lambda: "policy-ipv4-backup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup, [], name, value)


                            class PolicyMi(Entity):
                                """
                                Mapping Item
                                
                                .. attribute:: mi_id  (key)
                                
                                	Mapping Item ID (0, 1, 2, ...)
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: addr
                                
                                	addr
                                	**type**\:  :py:class:`Addr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi.Addr>`
                                
                                .. attribute:: src
                                
                                	src
                                	**type**\:  :py:class:`SrmsMiSrcEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiSrcEB>`
                                
                                .. attribute:: router
                                
                                	Router ID
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: area
                                
                                	Area (OSPF) or Level (ISIS)
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: prefix
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: sid_start
                                
                                	Starting SID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sid_count
                                
                                	SID range
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_prefix
                                
                                	Last IP Prefix
                                	**type**\: str
                                
                                	**length:** 0..50
                                
                                .. attribute:: last_sid_index
                                
                                	Last SID Index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flag_attached
                                
                                	Attached flag
                                	**type**\:  :py:class:`SrmsMiFlagEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiFlagEB>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi, self).__init__()

                                    self.yang_name = "policy-mi"
                                    self.yang_parent_name = "policy-ipv4-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['mi_id']
                                    self._child_container_classes = OrderedDict([("addr", ("addr", Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi.Addr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mi_id', YLeaf(YType.str, 'mi-id')),
                                        ('src', YLeaf(YType.enumeration, 'src')),
                                        ('router', YLeaf(YType.str, 'router')),
                                        ('area', YLeaf(YType.str, 'area')),
                                        ('prefix', YLeaf(YType.uint8, 'prefix')),
                                        ('sid_start', YLeaf(YType.uint32, 'sid-start')),
                                        ('sid_count', YLeaf(YType.uint32, 'sid-count')),
                                        ('last_prefix', YLeaf(YType.str, 'last-prefix')),
                                        ('last_sid_index', YLeaf(YType.uint32, 'last-sid-index')),
                                        ('flag_attached', YLeaf(YType.enumeration, 'flag-attached')),
                                    ])
                                    self.mi_id = None
                                    self.src = None
                                    self.router = None
                                    self.area = None
                                    self.prefix = None
                                    self.sid_start = None
                                    self.sid_count = None
                                    self.last_prefix = None
                                    self.last_sid_index = None
                                    self.flag_attached = None

                                    self.addr = Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi.Addr()
                                    self.addr.parent = self
                                    self._children_name_map["addr"] = "addr"
                                    self._children_yang_names.add("addr")
                                    self._segment_path = lambda: "policy-mi" + "[mi-id='" + str(self.mi_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi, ['mi_id', 'src', 'router', 'area', 'prefix', 'sid_start', 'sid_count', 'last_prefix', 'last_sid_index', 'flag_attached'], name, value)


                                class Addr(Entity):
                                    """
                                    addr
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`SrmsMiAfEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiAfEB>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi.Addr, self).__init__()

                                        self.yang_name = "addr"
                                        self.yang_parent_name = "policy-mi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv4.PolicyIpv4Backup.PolicyMi.Addr, ['af', 'ipv4', 'ipv6'], name, value)


                    class PolicyIpv6(Entity):
                        """
                        IPv6 policy operational data
                        
                        .. attribute:: policy_ipv6_backup
                        
                        	IPv6 backup policy operational data
                        	**type**\:  :py:class:`PolicyIpv6Backup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup>`
                        
                        .. attribute:: policy_ipv6_active
                        
                        	IPv6 active policy operational data
                        	**type**\:  :py:class:`PolicyIpv6Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6, self).__init__()

                            self.yang_name = "policy-ipv6"
                            self.yang_parent_name = "policy"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("policy-ipv6-backup", ("policy_ipv6_backup", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup)), ("policy-ipv6-active", ("policy_ipv6_active", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.policy_ipv6_backup = Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup()
                            self.policy_ipv6_backup.parent = self
                            self._children_name_map["policy_ipv6_backup"] = "policy-ipv6-backup"
                            self._children_yang_names.add("policy-ipv6-backup")

                            self.policy_ipv6_active = Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active()
                            self.policy_ipv6_active.parent = self
                            self._children_name_map["policy_ipv6_active"] = "policy-ipv6-active"
                            self._children_yang_names.add("policy-ipv6-active")
                            self._segment_path = lambda: "policy-ipv6"


                        class PolicyIpv6Backup(Entity):
                            """
                            IPv6 backup policy operational data
                            
                            .. attribute:: policy_mi
                            
                            	Mapping Item
                            	**type**\: list of  		 :py:class:`PolicyMi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup, self).__init__()

                                self.yang_name = "policy-ipv6-backup"
                                self.yang_parent_name = "policy-ipv6"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("policy-mi", ("policy_mi", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi))])
                                self._leafs = OrderedDict()

                                self.policy_mi = YList(self)
                                self._segment_path = lambda: "policy-ipv6-backup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup, [], name, value)


                            class PolicyMi(Entity):
                                """
                                Mapping Item
                                
                                .. attribute:: mi_id  (key)
                                
                                	Mapping Item ID (0, 1, 2, ...)
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: addr
                                
                                	addr
                                	**type**\:  :py:class:`Addr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi.Addr>`
                                
                                .. attribute:: src
                                
                                	src
                                	**type**\:  :py:class:`SrmsMiSrcEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiSrcEB>`
                                
                                .. attribute:: router
                                
                                	Router ID
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: area
                                
                                	Area (OSPF) or Level (ISIS)
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: prefix
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: sid_start
                                
                                	Starting SID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sid_count
                                
                                	SID range
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_prefix
                                
                                	Last IP Prefix
                                	**type**\: str
                                
                                	**length:** 0..50
                                
                                .. attribute:: last_sid_index
                                
                                	Last SID Index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flag_attached
                                
                                	Attached flag
                                	**type**\:  :py:class:`SrmsMiFlagEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiFlagEB>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi, self).__init__()

                                    self.yang_name = "policy-mi"
                                    self.yang_parent_name = "policy-ipv6-backup"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['mi_id']
                                    self._child_container_classes = OrderedDict([("addr", ("addr", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi.Addr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mi_id', YLeaf(YType.str, 'mi-id')),
                                        ('src', YLeaf(YType.enumeration, 'src')),
                                        ('router', YLeaf(YType.str, 'router')),
                                        ('area', YLeaf(YType.str, 'area')),
                                        ('prefix', YLeaf(YType.uint8, 'prefix')),
                                        ('sid_start', YLeaf(YType.uint32, 'sid-start')),
                                        ('sid_count', YLeaf(YType.uint32, 'sid-count')),
                                        ('last_prefix', YLeaf(YType.str, 'last-prefix')),
                                        ('last_sid_index', YLeaf(YType.uint32, 'last-sid-index')),
                                        ('flag_attached', YLeaf(YType.enumeration, 'flag-attached')),
                                    ])
                                    self.mi_id = None
                                    self.src = None
                                    self.router = None
                                    self.area = None
                                    self.prefix = None
                                    self.sid_start = None
                                    self.sid_count = None
                                    self.last_prefix = None
                                    self.last_sid_index = None
                                    self.flag_attached = None

                                    self.addr = Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi.Addr()
                                    self.addr.parent = self
                                    self._children_name_map["addr"] = "addr"
                                    self._children_yang_names.add("addr")
                                    self._segment_path = lambda: "policy-mi" + "[mi-id='" + str(self.mi_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi, ['mi_id', 'src', 'router', 'area', 'prefix', 'sid_start', 'sid_count', 'last_prefix', 'last_sid_index', 'flag_attached'], name, value)


                                class Addr(Entity):
                                    """
                                    addr
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`SrmsMiAfEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiAfEB>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi.Addr, self).__init__()

                                        self.yang_name = "addr"
                                        self.yang_parent_name = "policy-mi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Backup.PolicyMi.Addr, ['af', 'ipv4', 'ipv6'], name, value)


                        class PolicyIpv6Active(Entity):
                            """
                            IPv6 active policy operational data
                            
                            .. attribute:: policy_mi
                            
                            	Mapping Item
                            	**type**\: list of  		 :py:class:`PolicyMi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active, self).__init__()

                                self.yang_name = "policy-ipv6-active"
                                self.yang_parent_name = "policy-ipv6"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("policy-mi", ("policy_mi", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi))])
                                self._leafs = OrderedDict()

                                self.policy_mi = YList(self)
                                self._segment_path = lambda: "policy-ipv6-active"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active, [], name, value)


                            class PolicyMi(Entity):
                                """
                                Mapping Item
                                
                                .. attribute:: mi_id  (key)
                                
                                	Mapping Item ID (0, 1, 2, ...)
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: addr
                                
                                	addr
                                	**type**\:  :py:class:`Addr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi.Addr>`
                                
                                .. attribute:: src
                                
                                	src
                                	**type**\:  :py:class:`SrmsMiSrcEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiSrcEB>`
                                
                                .. attribute:: router
                                
                                	Router ID
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: area
                                
                                	Area (OSPF) or Level (ISIS)
                                	**type**\: str
                                
                                	**length:** 0..30
                                
                                .. attribute:: prefix
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: sid_start
                                
                                	Starting SID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sid_count
                                
                                	SID range
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_prefix
                                
                                	Last IP Prefix
                                	**type**\: str
                                
                                	**length:** 0..50
                                
                                .. attribute:: last_sid_index
                                
                                	Last SID Index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flag_attached
                                
                                	Attached flag
                                	**type**\:  :py:class:`SrmsMiFlagEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiFlagEB>`
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi, self).__init__()

                                    self.yang_name = "policy-mi"
                                    self.yang_parent_name = "policy-ipv6-active"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['mi_id']
                                    self._child_container_classes = OrderedDict([("addr", ("addr", Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi.Addr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mi_id', YLeaf(YType.str, 'mi-id')),
                                        ('src', YLeaf(YType.enumeration, 'src')),
                                        ('router', YLeaf(YType.str, 'router')),
                                        ('area', YLeaf(YType.str, 'area')),
                                        ('prefix', YLeaf(YType.uint8, 'prefix')),
                                        ('sid_start', YLeaf(YType.uint32, 'sid-start')),
                                        ('sid_count', YLeaf(YType.uint32, 'sid-count')),
                                        ('last_prefix', YLeaf(YType.str, 'last-prefix')),
                                        ('last_sid_index', YLeaf(YType.uint32, 'last-sid-index')),
                                        ('flag_attached', YLeaf(YType.enumeration, 'flag-attached')),
                                    ])
                                    self.mi_id = None
                                    self.src = None
                                    self.router = None
                                    self.area = None
                                    self.prefix = None
                                    self.sid_start = None
                                    self.sid_count = None
                                    self.last_prefix = None
                                    self.last_sid_index = None
                                    self.flag_attached = None

                                    self.addr = Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi.Addr()
                                    self.addr.parent = self
                                    self._children_name_map["addr"] = "addr"
                                    self._children_yang_names.add("addr")
                                    self._segment_path = lambda: "policy-mi" + "[mi-id='" + str(self.mi_id) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi, ['mi_id', 'src', 'router', 'area', 'prefix', 'sid_start', 'sid_count', 'last_prefix', 'last_sid_index', 'flag_attached'], name, value)


                                class Addr(Entity):
                                    """
                                    addr
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`SrmsMiAfEB <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.SrmsMiAfEB>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'clns-isis-oper'
                                    _revision = '2017-06-26'

                                    def __init__(self):
                                        super(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi.Addr, self).__init__()

                                        self.yang_name = "addr"
                                        self.yang_parent_name = "policy-mi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Isis.Instances.Instance.Srms.Policy.PolicyIpv6.PolicyIpv6Active.PolicyMi.Addr, ['af', 'ipv4', 'ipv6'], name, value)


            class ErrorLog(Entity):
                """
                Log of errors and warnings
                
                .. attribute:: log_entry
                
                	Error Log entries
                	**type**\: list of  		 :py:class:`LogEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.ErrorLog, self).__init__()

                    self.yang_name = "error-log"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("log-entry", ("log_entry", Isis.Instances.Instance.ErrorLog.LogEntry))])
                    self._leafs = OrderedDict()

                    self.log_entry = YList(self)
                    self._segment_path = lambda: "error-log"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.ErrorLog, [], name, value)


                class LogEntry(Entity):
                    """
                    Error Log entries
                    
                    .. attribute:: generic_data
                    
                    	Generic entry data
                    	**type**\:  :py:class:`GenericData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry.GenericData>`
                    
                    .. attribute:: error_log_level
                    
                    	Logging level
                    	**type**\:  :py:class:`IsisErrLogLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisErrLogLevel>`
                    
                    .. attribute:: error_code
                    
                    	Error code
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: error_reason
                    
                    	Error details
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.ErrorLog.LogEntry, self).__init__()

                        self.yang_name = "log-entry"
                        self.yang_parent_name = "error-log"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generic-data", ("generic_data", Isis.Instances.Instance.ErrorLog.LogEntry.GenericData))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('error_log_level', YLeaf(YType.enumeration, 'error-log-level')),
                            ('error_code', YLeaf(YType.uint32, 'error-code')),
                            ('error_reason', YLeaf(YType.str, 'error-reason')),
                        ])
                        self.error_log_level = None
                        self.error_code = None
                        self.error_reason = None

                        self.generic_data = Isis.Instances.Instance.ErrorLog.LogEntry.GenericData()
                        self.generic_data.parent = self
                        self._children_name_map["generic_data"] = "generic-data"
                        self._children_yang_names.add("generic-data")
                        self._segment_path = lambda: "log-entry"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.ErrorLog.LogEntry, ['error_log_level', 'error_code', 'error_reason'], name, value)


                    class GenericData(Entity):
                        """
                        Generic entry data
                        
                        .. attribute:: timestamp
                        
                        	Time in UTC relative to Jan 1st, 1970
                        	**type**\:  :py:class:`Timestamp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.ErrorLog.LogEntry.GenericData, self).__init__()

                            self.yang_name = "generic-data"
                            self.yang_parent_name = "log-entry"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("timestamp", ("timestamp", Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.timestamp = Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp()
                            self.timestamp.parent = self
                            self._children_name_map["timestamp"] = "timestamp"
                            self._children_yang_names.add("timestamp")
                            self._segment_path = lambda: "generic-data"


                        class Timestamp(Entity):
                            """
                            Time in UTC relative to Jan 1st, 1970
                            
                            .. attribute:: seconds
                            
                            	Timestamp value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: nano_seconds
                            
                            	Timestamp value (nanoseconds)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp, self).__init__()

                                self.yang_name = "timestamp"
                                self.yang_parent_name = "generic-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('seconds', YLeaf(YType.uint32, 'seconds')),
                                    ('nano_seconds', YLeaf(YType.uint32, 'nano-seconds')),
                                ])
                                self.seconds = None
                                self.nano_seconds = None
                                self._segment_path = lambda: "timestamp"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.ErrorLog.LogEntry.GenericData.Timestamp, ['seconds', 'nano_seconds'], name, value)


            class CheckpointInterfaces(Entity):
                """
                Checkpointed interface table
                
                .. attribute:: checkpoint_interface
                
                	Checkpointed information about one IS\-IS interface
                	**type**\: list of  		 :py:class:`CheckpointInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.CheckpointInterfaces, self).__init__()

                    self.yang_name = "checkpoint-interfaces"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("checkpoint-interface", ("checkpoint_interface", Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface))])
                    self._leafs = OrderedDict()

                    self.checkpoint_interface = YList(self)
                    self._segment_path = lambda: "checkpoint-interfaces"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.CheckpointInterfaces, [], name, value)


                class CheckpointInterface(Entity):
                    """
                    Checkpointed information about one IS\-IS
                    interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: checkpoint_object_id
                    
                    	Checkpoint object ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_name_xr
                    
                    	Interface name
                    	**type**\: str
                    
                    .. attribute:: checkpoint_interface_handle
                    
                    	Local interface handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: local_circuit_number
                    
                    	Local circuit number
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: dis_areas
                    
                    	Areas in which this system is DIS
                    	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                    
                    .. attribute:: has_adjacency
                    
                    	TRUE if there is an adjacency on this interface
                    	**type**\: bool
                    
                    .. attribute:: local_snpa
                    
                    	SNPA of this interface
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: has_joined_mcast_group
                    
                    	TRUE if multicast group registration succeeded on this interface
                    	**type**\: bool
                    
                    .. attribute:: has_achieved_ldp_sync
                    
                    	MPLS LDP sync status
                    	**type**\: bool
                    
                    .. attribute:: has_achieved_ld_pv6_sync
                    
                    	MPLS LDPv6 sync status
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface, self).__init__()

                        self.yang_name = "checkpoint-interface"
                        self.yang_parent_name = "checkpoint-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('checkpoint_object_id', YLeaf(YType.uint32, 'checkpoint-object-id')),
                            ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                            ('checkpoint_interface_handle', YLeaf(YType.str, 'checkpoint-interface-handle')),
                            ('local_circuit_number', YLeaf(YType.uint8, 'local-circuit-number')),
                            ('dis_areas', YLeaf(YType.enumeration, 'dis-areas')),
                            ('has_adjacency', YLeaf(YType.boolean, 'has-adjacency')),
                            ('local_snpa', YLeaf(YType.str, 'local-snpa')),
                            ('has_joined_mcast_group', YLeaf(YType.boolean, 'has-joined-mcast-group')),
                            ('has_achieved_ldp_sync', YLeaf(YType.boolean, 'has-achieved-ldp-sync')),
                            ('has_achieved_ld_pv6_sync', YLeaf(YType.boolean, 'has-achieved-ld-pv6-sync')),
                        ])
                        self.interface_name = None
                        self.checkpoint_object_id = None
                        self.interface_name_xr = None
                        self.checkpoint_interface_handle = None
                        self.local_circuit_number = None
                        self.dis_areas = None
                        self.has_adjacency = None
                        self.local_snpa = None
                        self.has_joined_mcast_group = None
                        self.has_achieved_ldp_sync = None
                        self.has_achieved_ld_pv6_sync = None
                        self._segment_path = lambda: "checkpoint-interface" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.CheckpointInterfaces.CheckpointInterface, ['interface_name', 'checkpoint_object_id', 'interface_name_xr', 'checkpoint_interface_handle', 'local_circuit_number', 'dis_areas', 'has_adjacency', 'local_snpa', 'has_joined_mcast_group', 'has_achieved_ldp_sync', 'has_achieved_ld_pv6_sync'], name, value)


            class InterfaceStatistics(Entity):
                """
                Interface statistics table
                
                .. attribute:: interface_statistic
                
                	Statistics data for one IS\-IS interface
                	**type**\: list of  		 :py:class:`InterfaceStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.InterfaceStatistics, self).__init__()

                    self.yang_name = "interface-statistics"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("interface-statistic", ("interface_statistic", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic))])
                    self._leafs = OrderedDict()

                    self.interface_statistic = YList(self)
                    self._segment_path = lambda: "interface-statistics"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics, [], name, value)


                class InterfaceStatistic(Entity):
                    """
                    Statistics data for one IS\-IS interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: p2p_statistics
                    
                    	P2P interface statistics. NULL for non\-P2P interfaces
                    	**type**\:  :py:class:`P2PStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics>`
                    
                    .. attribute:: traffic_interface
                    
                    	Interface to which traffic statistics apply
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: interface_media_type
                    
                    	Interface media class
                    	**type**\:  :py:class:`IsisMediaClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMediaClass>`
                    
                    .. attribute:: per_area_data
                    
                    	Per\-area data
                    	**type**\: list of  		 :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic, self).__init__()

                        self.yang_name = "interface-statistic"
                        self.yang_parent_name = "interface-statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([("p2p-statistics", ("p2p_statistics", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics))])
                        self._child_list_classes = OrderedDict([("per-area-data", ("per_area_data", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData))])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('traffic_interface', YLeaf(YType.str, 'traffic-interface')),
                            ('interface_media_type', YLeaf(YType.enumeration, 'interface-media-type')),
                        ])
                        self.interface_name = None
                        self.traffic_interface = None
                        self.interface_media_type = None

                        self.p2p_statistics = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics()
                        self.p2p_statistics.parent = self
                        self._children_name_map["p2p_statistics"] = "p2p-statistics"
                        self._children_yang_names.add("p2p-statistics")

                        self.per_area_data = YList(self)
                        self._segment_path = lambda: "interface-statistic" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic, ['interface_name', 'traffic_interface', 'interface_media_type'], name, value)


                    class P2PStatistics(Entity):
                        """
                        P2P interface statistics. NULL for non\-P2P
                        interfaces
                        
                        .. attribute:: iih_count
                        
                        	IIH statistics
                        	**type**\:  :py:class:`IihCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount>`
                        
                        .. attribute:: memory_exhausted_iih_count
                        
                        	IIHs not sent due to memory exhaustion
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsp_retransmit_count
                        
                        	LSP retransmissions
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics, self).__init__()

                            self.yang_name = "p2p-statistics"
                            self.yang_parent_name = "interface-statistic"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("iih-count", ("iih_count", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('memory_exhausted_iih_count', YLeaf(YType.uint32, 'memory-exhausted-iih-count')),
                                ('lsp_retransmit_count', YLeaf(YType.uint32, 'lsp-retransmit-count')),
                            ])
                            self.memory_exhausted_iih_count = None
                            self.lsp_retransmit_count = None

                            self.iih_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount()
                            self.iih_count.parent = self
                            self._children_name_map["iih_count"] = "iih-count"
                            self._children_yang_names.add("iih-count")
                            self._segment_path = lambda: "p2p-statistics"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics, ['memory_exhausted_iih_count', 'lsp_retransmit_count'], name, value)


                        class IihCount(Entity):
                            """
                            IIH statistics
                            
                            .. attribute:: pdu_receive_count
                            
                            	PDUs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pdu_send_count
                            
                            	PDUs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount, self).__init__()

                                self.yang_name = "iih-count"
                                self.yang_parent_name = "p2p-statistics"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pdu_receive_count', YLeaf(YType.uint32, 'pdu-receive-count')),
                                    ('pdu_send_count', YLeaf(YType.uint32, 'pdu-send-count')),
                                ])
                                self.pdu_receive_count = None
                                self.pdu_send_count = None
                                self._segment_path = lambda: "iih-count"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.P2PStatistics.IihCount, ['pdu_receive_count', 'pdu_send_count'], name, value)


                    class PerAreaData(Entity):
                        """
                        Per\-area data
                        
                        .. attribute:: statistics
                        
                        	Statistics
                        	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics>`
                        
                        .. attribute:: lan_data
                        
                        	LAN interface statistics. NULL for non\-LAN interfaces
                        	**type**\:  :py:class:`LanData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData>`
                        
                        .. attribute:: level
                        
                        	Level of the area this data relates to
                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData, self).__init__()

                            self.yang_name = "per-area-data"
                            self.yang_parent_name = "interface-statistic"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("statistics", ("statistics", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics)), ("lan-data", ("lan_data", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('level', YLeaf(YType.enumeration, 'level')),
                            ])
                            self.level = None

                            self.statistics = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                            self.lan_data = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData()
                            self.lan_data.parent = self
                            self._children_name_map["lan_data"] = "lan-data"
                            self._children_yang_names.add("lan-data")
                            self._segment_path = lambda: "per-area-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData, ['level'], name, value)


                        class Statistics(Entity):
                            """
                            Statistics
                            
                            .. attribute:: lsp_count
                            
                            	LSP statistics
                            	**type**\:  :py:class:`LspCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount>`
                            
                            .. attribute:: csnp_count
                            
                            	CSNP statistics
                            	**type**\:  :py:class:`CsnpCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount>`
                            
                            .. attribute:: psnp_count
                            
                            	PSNP statistics
                            	**type**\:  :py:class:`PsnpCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount>`
                            
                            .. attribute:: lsp_drop_count
                            
                            	Count of LSPs dropped due to minimum arrival time config
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lsp_flooding_dup_count
                            
                            	Count of LSPs already received by neighbors and not flooded
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "per-area-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("lsp-count", ("lsp_count", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount)), ("csnp-count", ("csnp_count", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount)), ("psnp-count", ("psnp_count", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lsp_drop_count', YLeaf(YType.uint32, 'lsp-drop-count')),
                                    ('lsp_flooding_dup_count', YLeaf(YType.uint32, 'lsp-flooding-dup-count')),
                                ])
                                self.lsp_drop_count = None
                                self.lsp_flooding_dup_count = None

                                self.lsp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount()
                                self.lsp_count.parent = self
                                self._children_name_map["lsp_count"] = "lsp-count"
                                self._children_yang_names.add("lsp-count")

                                self.csnp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount()
                                self.csnp_count.parent = self
                                self._children_name_map["csnp_count"] = "csnp-count"
                                self._children_yang_names.add("csnp-count")

                                self.psnp_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount()
                                self.psnp_count.parent = self
                                self._children_name_map["psnp_count"] = "psnp-count"
                                self._children_yang_names.add("psnp-count")
                                self._segment_path = lambda: "statistics"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics, ['lsp_drop_count', 'lsp_flooding_dup_count'], name, value)


                            class LspCount(Entity):
                                """
                                LSP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount, self).__init__()

                                    self.yang_name = "lsp-count"
                                    self.yang_parent_name = "statistics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pdu_receive_count', YLeaf(YType.uint32, 'pdu-receive-count')),
                                        ('pdu_send_count', YLeaf(YType.uint32, 'pdu-send-count')),
                                    ])
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None
                                    self._segment_path = lambda: "lsp-count"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.LspCount, ['pdu_receive_count', 'pdu_send_count'], name, value)


                            class CsnpCount(Entity):
                                """
                                CSNP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount, self).__init__()

                                    self.yang_name = "csnp-count"
                                    self.yang_parent_name = "statistics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pdu_receive_count', YLeaf(YType.uint32, 'pdu-receive-count')),
                                        ('pdu_send_count', YLeaf(YType.uint32, 'pdu-send-count')),
                                    ])
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None
                                    self._segment_path = lambda: "csnp-count"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.CsnpCount, ['pdu_receive_count', 'pdu_send_count'], name, value)


                            class PsnpCount(Entity):
                                """
                                PSNP statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount, self).__init__()

                                    self.yang_name = "psnp-count"
                                    self.yang_parent_name = "statistics"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pdu_receive_count', YLeaf(YType.uint32, 'pdu-receive-count')),
                                        ('pdu_send_count', YLeaf(YType.uint32, 'pdu-send-count')),
                                    ])
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None
                                    self._segment_path = lambda: "psnp-count"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.Statistics.PsnpCount, ['pdu_receive_count', 'pdu_send_count'], name, value)


                        class LanData(Entity):
                            """
                            LAN interface statistics. NULL for non\-LAN
                            interfaces
                            
                            .. attribute:: iih_count
                            
                            	IIH statistics
                            	**type**\:  :py:class:`IihCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount>`
                            
                            .. attribute:: memory_exhausted_iih_count
                            
                            	IIHs not sent due to memory exhaustion
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dis_election_count
                            
                            	DIS elections
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData, self).__init__()

                                self.yang_name = "lan-data"
                                self.yang_parent_name = "per-area-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("iih-count", ("iih_count", Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('memory_exhausted_iih_count', YLeaf(YType.uint32, 'memory-exhausted-iih-count')),
                                    ('dis_election_count', YLeaf(YType.uint32, 'dis-election-count')),
                                ])
                                self.memory_exhausted_iih_count = None
                                self.dis_election_count = None

                                self.iih_count = Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount()
                                self.iih_count.parent = self
                                self._children_name_map["iih_count"] = "iih-count"
                                self._children_yang_names.add("iih-count")
                                self._segment_path = lambda: "lan-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData, ['memory_exhausted_iih_count', 'dis_election_count'], name, value)


                            class IihCount(Entity):
                                """
                                IIH statistics
                                
                                .. attribute:: pdu_receive_count
                                
                                	PDUs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pdu_send_count
                                
                                	PDUs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount, self).__init__()

                                    self.yang_name = "iih-count"
                                    self.yang_parent_name = "lan-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pdu_receive_count', YLeaf(YType.uint32, 'pdu-receive-count')),
                                        ('pdu_send_count', YLeaf(YType.uint32, 'pdu-send-count')),
                                    ])
                                    self.pdu_receive_count = None
                                    self.pdu_send_count = None
                                    self._segment_path = lambda: "iih-count"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.InterfaceStatistics.InterfaceStatistic.PerAreaData.LanData.IihCount, ['pdu_receive_count', 'pdu_send_count'], name, value)


            class Protocol(Entity):
                """
                Basic protocol information about an IS\-IS
                instance
                
                .. attribute:: vrf_context
                
                	VRF context
                	**type**\: str
                
                .. attribute:: nsap_system_id
                
                	Local system ID
                	**type**\: str
                
                	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                
                .. attribute:: valid_nsap_system_id
                
                	Indicates if system ID valid
                	**type**\: bool
                
                .. attribute:: instance_id
                
                	instance id
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: running_levels
                
                	Levels running
                	**type**\:  :py:class:`IsisLevels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevels>`
                
                .. attribute:: configured_nsf_flavor
                
                	Configured NSF type
                	**type**\:  :py:class:`IsisNsfFlavor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisNsfFlavor>`
                
                .. attribute:: last_restart_nsf_flavor
                
                	NSF type of last restart
                	**type**\:  :py:class:`IsisNsfFlavor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisNsfFlavor>`
                
                .. attribute:: last_restart_status
                
                	Last restart status
                	**type**\:  :py:class:`IsisStartupStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisStartupStatus>`
                
                .. attribute:: te_connection
                
                	TE connection
                	**type**\:  :py:class:`IsisUp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUp>`
                
                .. attribute:: remaining_time_for_next_nsf_restart
                
                	Time remaining until the next NSF restart may be attempted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adj_form_count
                
                	Adj Forming count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adj_full_count
                
                	Adj Full count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adj_stagger_enabled
                
                	Adjacency Stagger Enabled
                	**type**\: bool
                
                .. attribute:: adj_stagger_init
                
                	Adjacency Stagger Initiall Number of Forming Neighbors Allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: adj_stagger_max
                
                	Adjacency Stagger Max Number of Forming Neighbors Allowed
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srgb_allocated
                
                	Is SRGB allocated ?
                	**type**\: bool
                
                .. attribute:: srgb_start
                
                	First label in SRGB
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srgb_end
                
                	Last label in SRGB
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srlb_allocated
                
                	Is SRLB allocated ?
                	**type**\: bool
                
                .. attribute:: srlb_start
                
                	First label in SRLB
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srlb_end
                
                	Last label in SRLB
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: manual_area_address
                
                	Manual area addresses
                	**type**\: list of  		 :py:class:`ManualAreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.ManualAreaAddress>`
                
                .. attribute:: active_area_address
                
                	Active area addresses
                	**type**\: list of  		 :py:class:`ActiveAreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.ActiveAreaAddress>`
                
                .. attribute:: per_topo_data
                
                	Per\-topology data
                	**type**\: list of  		 :py:class:`PerTopoData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.Protocol, self).__init__()

                    self.yang_name = "protocol"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("manual-area-address", ("manual_area_address", Isis.Instances.Instance.Protocol.ManualAreaAddress)), ("active-area-address", ("active_area_address", Isis.Instances.Instance.Protocol.ActiveAreaAddress)), ("per-topo-data", ("per_topo_data", Isis.Instances.Instance.Protocol.PerTopoData))])
                    self._leafs = OrderedDict([
                        ('vrf_context', YLeaf(YType.str, 'vrf-context')),
                        ('nsap_system_id', YLeaf(YType.str, 'nsap-system-id')),
                        ('valid_nsap_system_id', YLeaf(YType.boolean, 'valid-nsap-system-id')),
                        ('instance_id', YLeaf(YType.uint16, 'instance-id')),
                        ('running_levels', YLeaf(YType.enumeration, 'running-levels')),
                        ('configured_nsf_flavor', YLeaf(YType.enumeration, 'configured-nsf-flavor')),
                        ('last_restart_nsf_flavor', YLeaf(YType.enumeration, 'last-restart-nsf-flavor')),
                        ('last_restart_status', YLeaf(YType.enumeration, 'last-restart-status')),
                        ('te_connection', YLeaf(YType.enumeration, 'te-connection')),
                        ('remaining_time_for_next_nsf_restart', YLeaf(YType.uint32, 'remaining-time-for-next-nsf-restart')),
                        ('adj_form_count', YLeaf(YType.uint32, 'adj-form-count')),
                        ('adj_full_count', YLeaf(YType.uint32, 'adj-full-count')),
                        ('adj_stagger_enabled', YLeaf(YType.boolean, 'adj-stagger-enabled')),
                        ('adj_stagger_init', YLeaf(YType.uint32, 'adj-stagger-init')),
                        ('adj_stagger_max', YLeaf(YType.uint32, 'adj-stagger-max')),
                        ('srgb_allocated', YLeaf(YType.boolean, 'srgb-allocated')),
                        ('srgb_start', YLeaf(YType.uint32, 'srgb-start')),
                        ('srgb_end', YLeaf(YType.uint32, 'srgb-end')),
                        ('srlb_allocated', YLeaf(YType.boolean, 'srlb-allocated')),
                        ('srlb_start', YLeaf(YType.uint32, 'srlb-start')),
                        ('srlb_end', YLeaf(YType.uint32, 'srlb-end')),
                    ])
                    self.vrf_context = None
                    self.nsap_system_id = None
                    self.valid_nsap_system_id = None
                    self.instance_id = None
                    self.running_levels = None
                    self.configured_nsf_flavor = None
                    self.last_restart_nsf_flavor = None
                    self.last_restart_status = None
                    self.te_connection = None
                    self.remaining_time_for_next_nsf_restart = None
                    self.adj_form_count = None
                    self.adj_full_count = None
                    self.adj_stagger_enabled = None
                    self.adj_stagger_init = None
                    self.adj_stagger_max = None
                    self.srgb_allocated = None
                    self.srgb_start = None
                    self.srgb_end = None
                    self.srlb_allocated = None
                    self.srlb_start = None
                    self.srlb_end = None

                    self.manual_area_address = YList(self)
                    self.active_area_address = YList(self)
                    self.per_topo_data = YList(self)
                    self._segment_path = lambda: "protocol"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.Protocol, ['vrf_context', 'nsap_system_id', 'valid_nsap_system_id', 'instance_id', 'running_levels', 'configured_nsf_flavor', 'last_restart_nsf_flavor', 'last_restart_status', 'te_connection', 'remaining_time_for_next_nsf_restart', 'adj_form_count', 'adj_full_count', 'adj_stagger_enabled', 'adj_stagger_init', 'adj_stagger_max', 'srgb_allocated', 'srgb_start', 'srgb_end', 'srlb_allocated', 'srlb_start', 'srlb_end'], name, value)


                class ManualAreaAddress(Entity):
                    """
                    Manual area addresses
                    
                    .. attribute:: entry
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Protocol.ManualAreaAddress, self).__init__()

                        self.yang_name = "manual-area-address"
                        self.yang_parent_name = "protocol"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('entry', YLeaf(YType.str, 'entry')),
                        ])
                        self.entry = None
                        self._segment_path = lambda: "manual-area-address"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Protocol.ManualAreaAddress, ['entry'], name, value)


                class ActiveAreaAddress(Entity):
                    """
                    Active area addresses
                    
                    .. attribute:: entry
                    
                    	
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{2}(\\.[a\-fA\-F0\-9]{4}){0,6}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Protocol.ActiveAreaAddress, self).__init__()

                        self.yang_name = "active-area-address"
                        self.yang_parent_name = "protocol"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('entry', YLeaf(YType.str, 'entry')),
                        ])
                        self.entry = None
                        self._segment_path = lambda: "active-area-address"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Protocol.ActiveAreaAddress, ['entry'], name, value)


                class PerTopoData(Entity):
                    """
                    Per\-topology data
                    
                    .. attribute:: id
                    
                    	Topology ID
                    	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.Id>`
                    
                    .. attribute:: redist_protocols_list
                    
                    	List of redistributed protocols
                    	**type**\:  :py:class:`RedistProtocolsList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList>`
                    
                    .. attribute:: default_admin_distance
                    
                    	Default administrative distance
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: advertise_passive_only
                    
                    	Advertise passive interface prefixes only
                    	**type**\: bool
                    
                    .. attribute:: wait_redist_complete
                    
                    	Waiting for redist complete RIB event
                    	**type**\: bool
                    
                    .. attribute:: per_area_data
                    
                    	Per\-area data
                    	**type**\: list of  		 :py:class:`PerAreaData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.Protocol.PerTopoData, self).__init__()

                        self.yang_name = "per-topo-data"
                        self.yang_parent_name = "protocol"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("id", ("id", Isis.Instances.Instance.Protocol.PerTopoData.Id)), ("redist-protocols-list", ("redist_protocols_list", Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList))])
                        self._child_list_classes = OrderedDict([("per-area-data", ("per_area_data", Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData))])
                        self._leafs = OrderedDict([
                            ('default_admin_distance', YLeaf(YType.uint32, 'default-admin-distance')),
                            ('advertise_passive_only', YLeaf(YType.boolean, 'advertise-passive-only')),
                            ('wait_redist_complete', YLeaf(YType.boolean, 'wait-redist-complete')),
                        ])
                        self.default_admin_distance = None
                        self.advertise_passive_only = None
                        self.wait_redist_complete = None

                        self.id = Isis.Instances.Instance.Protocol.PerTopoData.Id()
                        self.id.parent = self
                        self._children_name_map["id"] = "id"
                        self._children_yang_names.add("id")

                        self.redist_protocols_list = Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList()
                        self.redist_protocols_list.parent = self
                        self._children_name_map["redist_protocols_list"] = "redist-protocols-list"
                        self._children_yang_names.add("redist-protocols-list")

                        self.per_area_data = YList(self)
                        self._segment_path = lambda: "per-topo-data"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.Protocol.PerTopoData, ['default_admin_distance', 'advertise_passive_only', 'wait_redist_complete'], name, value)


                    class Id(Entity):
                        """
                        Topology ID
                        
                        .. attribute:: af_name
                        
                        	AF name
                        	**type**\:  :py:class:`IsisAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisAfId>`
                        
                        .. attribute:: saf_name
                        
                        	Sub\-AF name
                        	**type**\:  :py:class:`IsisSubAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisSubAfId>`
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\: str
                        
                        .. attribute:: topology_name
                        
                        	Topology Name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Protocol.PerTopoData.Id, self).__init__()

                            self.yang_name = "id"
                            self.yang_parent_name = "per-topo-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af_name', YLeaf(YType.enumeration, 'af-name')),
                                ('saf_name', YLeaf(YType.enumeration, 'saf-name')),
                                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                ('topology_name', YLeaf(YType.str, 'topology-name')),
                            ])
                            self.af_name = None
                            self.saf_name = None
                            self.vrf_name = None
                            self.topology_name = None
                            self._segment_path = lambda: "id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Protocol.PerTopoData.Id, ['af_name', 'saf_name', 'vrf_name', 'topology_name'], name, value)


                    class RedistProtocolsList(Entity):
                        """
                        List of redistributed protocols
                        
                        .. attribute:: isis_sh_redist_entry
                        
                        	isis sh redist entry
                        	**type**\: list of  		 :py:class:`IsisShRedistEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry>`
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList, self).__init__()

                            self.yang_name = "redist-protocols-list"
                            self.yang_parent_name = "per-topo-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("isis-sh-redist-entry", ("isis_sh_redist_entry", Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry))])
                            self._leafs = OrderedDict()

                            self.isis_sh_redist_entry = YList(self)
                            self._segment_path = lambda: "redist-protocols-list"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList, [], name, value)


                        class IsisShRedistEntry(Entity):
                            """
                            isis sh redist entry
                            
                            .. attribute:: protocol_details
                            
                            	Relevant details of the redistributed protocol
                            	**type**\:  :py:class:`ProtocolDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails>`
                            
                            

                            """

                            _prefix = 'clns-isis-oper'
                            _revision = '2017-06-26'

                            def __init__(self):
                                super(Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry, self).__init__()

                                self.yang_name = "isis-sh-redist-entry"
                                self.yang_parent_name = "redist-protocols-list"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("protocol-details", ("protocol_details", Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.protocol_details = Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails()
                                self.protocol_details.parent = self
                                self._children_name_map["protocol_details"] = "protocol-details"
                                self._children_yang_names.add("protocol-details")
                                self._segment_path = lambda: "isis-sh-redist-entry"


                            class ProtocolDetails(Entity):
                                """
                                Relevant details of the redistributed protocol
                                
                                .. attribute:: protocol
                                
                                	Protocol
                                	**type**\:  :py:class:`IsisRedistProto <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisRedistProto>`
                                
                                .. attribute:: isis_instance_id
                                
                                	IS\-IS instance identifier
                                	**type**\: str
                                
                                .. attribute:: ospf_process_id
                                
                                	OSPF process identifier
                                	**type**\: str
                                
                                .. attribute:: ospfv3_process_id
                                
                                	OSPFv3 process identifier
                                	**type**\: str
                                
                                .. attribute:: bgp_as_number
                                
                                	BGP Autonomous System number
                                	**type**\: str
                                
                                .. attribute:: eigrp_as_number
                                
                                	EIGRP Autonomous System number
                                	**type**\: str
                                
                                .. attribute:: application_name
                                
                                	Application Name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'clns-isis-oper'
                                _revision = '2017-06-26'

                                def __init__(self):
                                    super(Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails, self).__init__()

                                    self.yang_name = "protocol-details"
                                    self.yang_parent_name = "isis-sh-redist-entry"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('protocol', YLeaf(YType.enumeration, 'protocol')),
                                        ('isis_instance_id', YLeaf(YType.str, 'isis-instance-id')),
                                        ('ospf_process_id', YLeaf(YType.str, 'ospf-process-id')),
                                        ('ospfv3_process_id', YLeaf(YType.str, 'ospfv3-process-id')),
                                        ('bgp_as_number', YLeaf(YType.str, 'bgp-as-number')),
                                        ('eigrp_as_number', YLeaf(YType.str, 'eigrp-as-number')),
                                        ('application_name', YLeaf(YType.str, 'application-name')),
                                    ])
                                    self.protocol = None
                                    self.isis_instance_id = None
                                    self.ospf_process_id = None
                                    self.ospfv3_process_id = None
                                    self.bgp_as_number = None
                                    self.eigrp_as_number = None
                                    self.application_name = None
                                    self._segment_path = lambda: "protocol-details"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Isis.Instances.Instance.Protocol.PerTopoData.RedistProtocolsList.IsisShRedistEntry.ProtocolDetails, ['protocol', 'isis_instance_id', 'ospf_process_id', 'ospfv3_process_id', 'bgp_as_number', 'eigrp_as_number', 'application_name'], name, value)


                    class PerAreaData(Entity):
                        """
                        Per\-area data
                        
                        .. attribute:: level
                        
                        	The level this data refers to
                        	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                        
                        .. attribute:: uses_default_link_topo_flag
                        
                        	Does this topology use the default link topology
                        	**type**\: bool
                        
                        .. attribute:: generated_metric_style
                        
                        	Generate metric style
                        	**type**\:  :py:class:`IsisMetricStyle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricStyle>`
                        
                        .. attribute:: accepted_metric_style
                        
                        	Accept metric style
                        	**type**\:  :py:class:`IsisMetricStyle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricStyle>`
                        
                        .. attribute:: metric
                        
                        	Metric
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ispf_state
                        
                        	ISPF state
                        	**type**\:  :py:class:`IsisEnabled <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisEnabled>`
                        
                        .. attribute:: te_enabled
                        
                        	Indicates whether MPLS TE is enabled
                        	**type**\: bool
                        
                        .. attribute:: uloop_avoidance_type
                        
                        	Microloop avoidance type
                        	**type**\:  :py:class:`IsisUloopAvoidance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUloopAvoidance>`
                        
                        .. attribute:: rib_update_delay
                        
                        	Microloop RIB update delay
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sr_uloop_is_active
                        
                        	Explicit paths installed in the RIB
                        	**type**\: bool
                        
                        .. attribute:: duration
                        
                        	SR microloop avoidance duration
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: sr_uloop_event
                        
                        	SR microloop avoidance event
                        	**type**\:  :py:class:`IsisUloopEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisUloopEvent>`
                        
                        .. attribute:: sr_uloop_near_node_id
                        
                        	SR microloop near node
                        	**type**\: str
                        
                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                        
                        .. attribute:: sr_uloop_far_node_id
                        
                        	SR microloop far node
                        	**type**\: str
                        
                        	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData, self).__init__()

                            self.yang_name = "per-area-data"
                            self.yang_parent_name = "per-topo-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('level', YLeaf(YType.enumeration, 'level')),
                                ('uses_default_link_topo_flag', YLeaf(YType.boolean, 'uses-default-link-topo-flag')),
                                ('generated_metric_style', YLeaf(YType.enumeration, 'generated-metric-style')),
                                ('accepted_metric_style', YLeaf(YType.enumeration, 'accepted-metric-style')),
                                ('metric', YLeaf(YType.uint32, 'metric')),
                                ('ispf_state', YLeaf(YType.enumeration, 'ispf-state')),
                                ('te_enabled', YLeaf(YType.boolean, 'te-enabled')),
                                ('uloop_avoidance_type', YLeaf(YType.enumeration, 'uloop-avoidance-type')),
                                ('rib_update_delay', YLeaf(YType.uint32, 'rib-update-delay')),
                                ('sr_uloop_is_active', YLeaf(YType.boolean, 'sr-uloop-is-active')),
                                ('duration', YLeaf(YType.uint32, 'duration')),
                                ('sr_uloop_event', YLeaf(YType.enumeration, 'sr-uloop-event')),
                                ('sr_uloop_near_node_id', YLeaf(YType.str, 'sr-uloop-near-node-id')),
                                ('sr_uloop_far_node_id', YLeaf(YType.str, 'sr-uloop-far-node-id')),
                            ])
                            self.level = None
                            self.uses_default_link_topo_flag = None
                            self.generated_metric_style = None
                            self.accepted_metric_style = None
                            self.metric = None
                            self.ispf_state = None
                            self.te_enabled = None
                            self.uloop_avoidance_type = None
                            self.rib_update_delay = None
                            self.sr_uloop_is_active = None
                            self.duration = None
                            self.sr_uloop_event = None
                            self.sr_uloop_near_node_id = None
                            self.sr_uloop_far_node_id = None
                            self._segment_path = lambda: "per-area-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.Protocol.PerTopoData.PerAreaData, ['level', 'uses_default_link_topo_flag', 'generated_metric_style', 'accepted_metric_style', 'metric', 'ispf_state', 'te_enabled', 'uloop_avoidance_type', 'rib_update_delay', 'sr_uloop_is_active', 'duration', 'sr_uloop_event', 'sr_uloop_near_node_id', 'sr_uloop_far_node_id'], name, value)


            class NeighborSummaries(Entity):
                """
                Neighbor\-summary table
                
                .. attribute:: neighbor_summary
                
                	Neighbor\-summary data for a single interface
                	**type**\: list of  		 :py:class:`NeighborSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.NeighborSummaries, self).__init__()

                    self.yang_name = "neighbor-summaries"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("neighbor-summary", ("neighbor_summary", Isis.Instances.Instance.NeighborSummaries.NeighborSummary))])
                    self._leafs = OrderedDict()

                    self.neighbor_summary = YList(self)
                    self._segment_path = lambda: "neighbor-summaries"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.NeighborSummaries, [], name, value)


                class NeighborSummary(Entity):
                    """
                    Neighbor\-summary data for a single interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: level1_neighbors
                    
                    	L1\-only neighbors
                    	**type**\:  :py:class:`Level1Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors>`
                    
                    .. attribute:: level2_neighbors
                    
                    	L2\-only neighbors
                    	**type**\:  :py:class:`Level2Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors>`
                    
                    .. attribute:: level12_neigbors
                    
                    	L12 neighbors
                    	**type**\:  :py:class:`Level12Neigbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.NeighborSummaries.NeighborSummary, self).__init__()

                        self.yang_name = "neighbor-summary"
                        self.yang_parent_name = "neighbor-summaries"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([("level1-neighbors", ("level1_neighbors", Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors)), ("level2-neighbors", ("level2_neighbors", Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors)), ("level12-neigbors", ("level12_neigbors", Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ])
                        self.interface_name = None

                        self.level1_neighbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors()
                        self.level1_neighbors.parent = self
                        self._children_name_map["level1_neighbors"] = "level1-neighbors"
                        self._children_yang_names.add("level1-neighbors")

                        self.level2_neighbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors()
                        self.level2_neighbors.parent = self
                        self._children_name_map["level2_neighbors"] = "level2-neighbors"
                        self._children_yang_names.add("level2-neighbors")

                        self.level12_neigbors = Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors()
                        self.level12_neigbors.parent = self
                        self._children_name_map["level12_neigbors"] = "level12-neigbors"
                        self._children_yang_names.add("level12-neigbors")
                        self._segment_path = lambda: "neighbor-summary" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.NeighborSummaries.NeighborSummary, ['interface_name'], name, value)


                    class Level1Neighbors(Entity):
                        """
                        L1\-only neighbors
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors, self).__init__()

                            self.yang_name = "level1-neighbors"
                            self.yang_parent_name = "neighbor-summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('neighbor_up_count', YLeaf(YType.uint32, 'neighbor-up-count')),
                                ('neighbor_init_count', YLeaf(YType.uint32, 'neighbor-init-count')),
                                ('neighbor_down_count', YLeaf(YType.uint32, 'neighbor-down-count')),
                            ])
                            self.neighbor_up_count = None
                            self.neighbor_init_count = None
                            self.neighbor_down_count = None
                            self._segment_path = lambda: "level1-neighbors"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level1Neighbors, ['neighbor_up_count', 'neighbor_init_count', 'neighbor_down_count'], name, value)


                    class Level2Neighbors(Entity):
                        """
                        L2\-only neighbors
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors, self).__init__()

                            self.yang_name = "level2-neighbors"
                            self.yang_parent_name = "neighbor-summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('neighbor_up_count', YLeaf(YType.uint32, 'neighbor-up-count')),
                                ('neighbor_init_count', YLeaf(YType.uint32, 'neighbor-init-count')),
                                ('neighbor_down_count', YLeaf(YType.uint32, 'neighbor-down-count')),
                            ])
                            self.neighbor_up_count = None
                            self.neighbor_init_count = None
                            self.neighbor_down_count = None
                            self._segment_path = lambda: "level2-neighbors"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level2Neighbors, ['neighbor_up_count', 'neighbor_init_count', 'neighbor_down_count'], name, value)


                    class Level12Neigbors(Entity):
                        """
                        L12 neighbors
                        
                        .. attribute:: neighbor_up_count
                        
                        	Neighbors up
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_init_count
                        
                        	Neighbors being initialized
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_down_count
                        
                        	Neighbors down
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors, self).__init__()

                            self.yang_name = "level12-neigbors"
                            self.yang_parent_name = "neighbor-summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('neighbor_up_count', YLeaf(YType.uint32, 'neighbor-up-count')),
                                ('neighbor_init_count', YLeaf(YType.uint32, 'neighbor-init-count')),
                                ('neighbor_down_count', YLeaf(YType.uint32, 'neighbor-down-count')),
                            ])
                            self.neighbor_up_count = None
                            self.neighbor_init_count = None
                            self.neighbor_down_count = None
                            self._segment_path = lambda: "level12-neigbors"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NeighborSummaries.NeighborSummary.Level12Neigbors, ['neighbor_up_count', 'neighbor_init_count', 'neighbor_down_count'], name, value)


            class CheckpointLsps(Entity):
                """
                Checkpointed LSP table
                
                .. attribute:: checkpoint_lsp
                
                	A checkpointed IS\-IS LSP
                	**type**\: list of  		 :py:class:`CheckpointLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointLsps.CheckpointLsp>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.CheckpointLsps, self).__init__()

                    self.yang_name = "checkpoint-lsps"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("checkpoint-lsp", ("checkpoint_lsp", Isis.Instances.Instance.CheckpointLsps.CheckpointLsp))])
                    self._leafs = OrderedDict()

                    self.checkpoint_lsp = YList(self)
                    self._segment_path = lambda: "checkpoint-lsps"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.CheckpointLsps, [], name, value)


                class CheckpointLsp(Entity):
                    """
                    A checkpointed IS\-IS LSP
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevel>`
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                    
                    .. attribute:: checkpoint_lsp_object_id
                    
                    	LSP Checkpoint table object ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_lsp_level
                    
                    	LSP level
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: checkpoint_lsp_local_flag
                    
                    	TRUE if this is a local LSP
                    	**type**\: bool
                    
                    .. attribute:: checkpoint_lsp_id
                    
                    	LSP ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}\\.[a\-fA\-F0\-9]{2}\\\-[a\-fA\-F0\-9]{2}
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.CheckpointLsps.CheckpointLsp, self).__init__()

                        self.yang_name = "checkpoint-lsp"
                        self.yang_parent_name = "checkpoint-lsps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('level', YLeaf(YType.enumeration, 'level')),
                            ('lsp_id', YLeaf(YType.str, 'lsp-id')),
                            ('checkpoint_lsp_object_id', YLeaf(YType.uint32, 'checkpoint-lsp-object-id')),
                            ('checkpoint_lsp_level', YLeaf(YType.uint8, 'checkpoint-lsp-level')),
                            ('checkpoint_lsp_local_flag', YLeaf(YType.boolean, 'checkpoint-lsp-local-flag')),
                            ('checkpoint_lsp_id', YLeaf(YType.str, 'checkpoint-lsp-id')),
                        ])
                        self.level = None
                        self.lsp_id = None
                        self.checkpoint_lsp_object_id = None
                        self.checkpoint_lsp_level = None
                        self.checkpoint_lsp_local_flag = None
                        self.checkpoint_lsp_id = None
                        self._segment_path = lambda: "checkpoint-lsp"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.CheckpointLsps.CheckpointLsp, ['level', 'lsp_id', 'checkpoint_lsp_object_id', 'checkpoint_lsp_level', 'checkpoint_lsp_local_flag', 'checkpoint_lsp_id'], name, value)


            class MeshGroups(Entity):
                """
                Mesh\-group information
                
                .. attribute:: mesh_group_configured_interface_list
                
                	List of mesh\-group\-configured interfaces
                	**type**\:  :py:class:`MeshGroupConfiguredInterfaceList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.MeshGroups, self).__init__()

                    self.yang_name = "mesh-groups"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("mesh-group-configured-interface-list", ("mesh_group_configured_interface_list", Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.mesh_group_configured_interface_list = Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList()
                    self.mesh_group_configured_interface_list.parent = self
                    self._children_name_map["mesh_group_configured_interface_list"] = "mesh-group-configured-interface-list"
                    self._children_yang_names.add("mesh-group-configured-interface-list")
                    self._segment_path = lambda: "mesh-groups"


                class MeshGroupConfiguredInterfaceList(Entity):
                    """
                    List of mesh\-group\-configured interfaces
                    
                    .. attribute:: isis_sh_mesh_entry
                    
                    	isis sh mesh entry
                    	**type**\: list of  		 :py:class:`IsisShMeshEntry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList, self).__init__()

                        self.yang_name = "mesh-group-configured-interface-list"
                        self.yang_parent_name = "mesh-groups"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("isis-sh-mesh-entry", ("isis_sh_mesh_entry", Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry))])
                        self._leafs = OrderedDict()

                        self.isis_sh_mesh_entry = YList(self)
                        self._segment_path = lambda: "mesh-group-configured-interface-list"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList, [], name, value)


                    class IsisShMeshEntry(Entity):
                        """
                        isis sh mesh entry
                        
                        .. attribute:: mesh_group_interface
                        
                        	This interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: mesh_group_number
                        
                        	Mesh\-group number
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry, self).__init__()

                            self.yang_name = "isis-sh-mesh-entry"
                            self.yang_parent_name = "mesh-group-configured-interface-list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mesh_group_interface', YLeaf(YType.str, 'mesh-group-interface')),
                                ('mesh_group_number', YLeaf(YType.uint32, 'mesh-group-number')),
                            ])
                            self.mesh_group_interface = None
                            self.mesh_group_number = None
                            self._segment_path = lambda: "isis-sh-mesh-entry"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.MeshGroups.MeshGroupConfiguredInterfaceList.IsisShMeshEntry, ['mesh_group_interface', 'mesh_group_number'], name, value)


            class NsrStatistics(Entity):
                """
                NSR Statistics information
                
                .. attribute:: isis_nsr_stats_data
                
                	ISIS NSR STATS Data
                	**type**\:  :py:class:`IsisNsrStatsData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData>`
                
                .. attribute:: isis_vm_state
                
                	ISIS VM STATE
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.NsrStatistics, self).__init__()

                    self.yang_name = "nsr-statistics"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("isis-nsr-stats-data", ("isis_nsr_stats_data", Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('isis_vm_state', YLeaf(YType.uint16, 'isis-vm-state')),
                    ])
                    self.isis_vm_state = None

                    self.isis_nsr_stats_data = Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData()
                    self.isis_nsr_stats_data.parent = self
                    self._children_name_map["isis_nsr_stats_data"] = "isis-nsr-stats-data"
                    self._children_yang_names.add("isis-nsr-stats-data")
                    self._segment_path = lambda: "nsr-statistics"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.NsrStatistics, ['isis_vm_state'], name, value)


                class IsisNsrStatsData(Entity):
                    """
                    ISIS NSR STATS Data
                    
                    .. attribute:: self
                    
                    	self
                    	**type**\:  :py:class:`Self <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self>`
                    
                    .. attribute:: peer
                    
                    	peer
                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer>`
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData, self).__init__()

                        self.yang_name = "isis-nsr-stats-data"
                        self.yang_parent_name = "nsr-statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("self", ("self", Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self))])
                        self._child_list_classes = OrderedDict([("peer", ("peer", Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer))])
                        self._leafs = OrderedDict()

                        self.self = Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self()
                        self.self.parent = self
                        self._children_name_map["self"] = "self"
                        self._children_yang_names.add("self")

                        self.peer = YList(self)
                        self._segment_path = lambda: "isis-nsr-stats-data"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData, [], name, value)


                    class Self(Entity):
                        """
                        self
                        
                        .. attribute:: no_of_l1_lsp
                        
                        	no of l1 lsp
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l2_lsp
                        
                        	no of l2 lsp
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l1_adj
                        
                        	no of l1 adj
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l2_adj
                        
                        	no of l2 adj
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_live_interface
                        
                        	no of live interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ptp_interface
                        
                        	no of ptp interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_lan_interface
                        
                        	no of lan interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_loopback_interface
                        
                        	no of loopback interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_tunnels
                        
                        	no of te tunnels
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_links
                        
                        	no of te links
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ipv4_routes
                        
                        	no of ipv4 routes
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_ipv6_routes
                        
                        	no of ipv6 routes
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seqnum
                        
                        	seqnum
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self, self).__init__()

                            self.yang_name = "self"
                            self.yang_parent_name = "isis-nsr-stats-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('no_of_l1_lsp', YLeaf(YType.uint32, 'no-of-l1-lsp')),
                                ('no_of_l2_lsp', YLeaf(YType.uint32, 'no-of-l2-lsp')),
                                ('no_of_l1_adj', YLeaf(YType.uint16, 'no-of-l1-adj')),
                                ('no_of_l2_adj', YLeaf(YType.uint16, 'no-of-l2-adj')),
                                ('no_of_live_interface', YLeaf(YType.uint16, 'no-of-live-interface')),
                                ('no_of_ptp_interface', YLeaf(YType.uint16, 'no-of-ptp-interface')),
                                ('no_of_lan_interface', YLeaf(YType.uint16, 'no-of-lan-interface')),
                                ('no_of_loopback_interface', YLeaf(YType.uint16, 'no-of-loopback-interface')),
                                ('no_of_te_tunnels', YLeaf(YType.uint16, 'no-of-te-tunnels')),
                                ('no_of_te_links', YLeaf(YType.uint16, 'no-of-te-links')),
                                ('no_of_ipv4_routes', YLeaf(YType.uint32, 'no-of-ipv4-routes')),
                                ('no_of_ipv6_routes', YLeaf(YType.uint32, 'no-of-ipv6-routes')),
                                ('seqnum', YLeaf(YType.uint32, 'seqnum')),
                            ])
                            self.no_of_l1_lsp = None
                            self.no_of_l2_lsp = None
                            self.no_of_l1_adj = None
                            self.no_of_l2_adj = None
                            self.no_of_live_interface = None
                            self.no_of_ptp_interface = None
                            self.no_of_lan_interface = None
                            self.no_of_loopback_interface = None
                            self.no_of_te_tunnels = None
                            self.no_of_te_links = None
                            self.no_of_ipv4_routes = None
                            self.no_of_ipv6_routes = None
                            self.seqnum = None
                            self._segment_path = lambda: "self"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Self, ['no_of_l1_lsp', 'no_of_l2_lsp', 'no_of_l1_adj', 'no_of_l2_adj', 'no_of_live_interface', 'no_of_ptp_interface', 'no_of_lan_interface', 'no_of_loopback_interface', 'no_of_te_tunnels', 'no_of_te_links', 'no_of_ipv4_routes', 'no_of_ipv6_routes', 'seqnum'], name, value)


                    class Peer(Entity):
                        """
                        peer
                        
                        .. attribute:: no_of_l1_lsp
                        
                        	no of l1 lsp
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l2_lsp
                        
                        	no of l2 lsp
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_l1_adj
                        
                        	no of l1 adj
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_l2_adj
                        
                        	no of l2 adj
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_live_interface
                        
                        	no of live interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ptp_interface
                        
                        	no of ptp interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_lan_interface
                        
                        	no of lan interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_loopback_interface
                        
                        	no of loopback interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_tunnels
                        
                        	no of te tunnels
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_te_links
                        
                        	no of te links
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: no_of_ipv4_routes
                        
                        	no of ipv4 routes
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: no_of_ipv6_routes
                        
                        	no of ipv6 routes
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seqnum
                        
                        	seqnum
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'clns-isis-oper'
                        _revision = '2017-06-26'

                        def __init__(self):
                            super(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer, self).__init__()

                            self.yang_name = "peer"
                            self.yang_parent_name = "isis-nsr-stats-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('no_of_l1_lsp', YLeaf(YType.uint32, 'no-of-l1-lsp')),
                                ('no_of_l2_lsp', YLeaf(YType.uint32, 'no-of-l2-lsp')),
                                ('no_of_l1_adj', YLeaf(YType.uint16, 'no-of-l1-adj')),
                                ('no_of_l2_adj', YLeaf(YType.uint16, 'no-of-l2-adj')),
                                ('no_of_live_interface', YLeaf(YType.uint16, 'no-of-live-interface')),
                                ('no_of_ptp_interface', YLeaf(YType.uint16, 'no-of-ptp-interface')),
                                ('no_of_lan_interface', YLeaf(YType.uint16, 'no-of-lan-interface')),
                                ('no_of_loopback_interface', YLeaf(YType.uint16, 'no-of-loopback-interface')),
                                ('no_of_te_tunnels', YLeaf(YType.uint16, 'no-of-te-tunnels')),
                                ('no_of_te_links', YLeaf(YType.uint16, 'no-of-te-links')),
                                ('no_of_ipv4_routes', YLeaf(YType.uint32, 'no-of-ipv4-routes')),
                                ('no_of_ipv6_routes', YLeaf(YType.uint32, 'no-of-ipv6-routes')),
                                ('seqnum', YLeaf(YType.uint32, 'seqnum')),
                            ])
                            self.no_of_l1_lsp = None
                            self.no_of_l2_lsp = None
                            self.no_of_l1_adj = None
                            self.no_of_l2_adj = None
                            self.no_of_live_interface = None
                            self.no_of_ptp_interface = None
                            self.no_of_lan_interface = None
                            self.no_of_loopback_interface = None
                            self.no_of_te_tunnels = None
                            self.no_of_te_links = None
                            self.no_of_ipv4_routes = None
                            self.no_of_ipv6_routes = None
                            self.seqnum = None
                            self._segment_path = lambda: "peer"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Isis.Instances.Instance.NsrStatistics.IsisNsrStatsData.Peer, ['no_of_l1_lsp', 'no_of_l2_lsp', 'no_of_l1_adj', 'no_of_l2_adj', 'no_of_live_interface', 'no_of_ptp_interface', 'no_of_lan_interface', 'no_of_loopback_interface', 'no_of_te_tunnels', 'no_of_te_links', 'no_of_ipv4_routes', 'no_of_ipv6_routes', 'seqnum'], name, value)


            class CheckpointTeTunnels(Entity):
                """
                Checkpointed TE tunnel table
                
                .. attribute:: checkpoint_te_tunnel
                
                	A checkpointed TE tunnel
                	**type**\: list of  		 :py:class:`CheckpointTeTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel>`
                
                

                """

                _prefix = 'clns-isis-oper'
                _revision = '2017-06-26'

                def __init__(self):
                    super(Isis.Instances.Instance.CheckpointTeTunnels, self).__init__()

                    self.yang_name = "checkpoint-te-tunnels"
                    self.yang_parent_name = "instance"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("checkpoint-te-tunnel", ("checkpoint_te_tunnel", Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel))])
                    self._leafs = OrderedDict()

                    self.checkpoint_te_tunnel = YList(self)
                    self._segment_path = lambda: "checkpoint-te-tunnels"

                def __setattr__(self, name, value):
                    self._perform_setattr(Isis.Instances.Instance.CheckpointTeTunnels, [], name, value)


                class CheckpointTeTunnel(Entity):
                    """
                    A checkpointed TE tunnel
                    
                    .. attribute:: level
                    
                    	Level
                    	**type**\:  :py:class:`IsisInternalLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_datatypes.IsisInternalLevel>`
                    
                    .. attribute:: interface_name
                    
                    	Interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: checkpoint_te_level
                    
                    	TE database level
                    	**type**\:  :py:class:`IsisLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisLevel>`
                    
                    .. attribute:: checkpoint_te_system_id
                    
                    	Destination system ID
                    	**type**\: str
                    
                    	**pattern:** [a\-fA\-F0\-9]{4}(\\.[a\-fA\-F0\-9]{4}){2}
                    
                    .. attribute:: checkpoint_te_interface
                    
                    	Tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: checkpoint_te_flags
                    
                    	Tunnel flags
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_te_nexthop
                    
                    	Tunnel next\-hop IP address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: checkpoint_te_metric
                    
                    	Tunnel metric
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: checkpoint_te_metric_mode
                    
                    	Tunnel metric mode
                    	**type**\:  :py:class:`IsisMetricMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_clns_isis_oper.IsisMetricMode>`
                    
                    .. attribute:: checkpoint_te_bandwidth
                    
                    	Tunnel bandwidth
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: checkpoint_te_object_id
                    
                    	Tunnel checkpoint object ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'clns-isis-oper'
                    _revision = '2017-06-26'

                    def __init__(self):
                        super(Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel, self).__init__()

                        self.yang_name = "checkpoint-te-tunnel"
                        self.yang_parent_name = "checkpoint-te-tunnels"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('level', YLeaf(YType.enumeration, 'level')),
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('checkpoint_te_level', YLeaf(YType.enumeration, 'checkpoint-te-level')),
                            ('checkpoint_te_system_id', YLeaf(YType.str, 'checkpoint-te-system-id')),
                            ('checkpoint_te_interface', YLeaf(YType.str, 'checkpoint-te-interface')),
                            ('checkpoint_te_flags', YLeaf(YType.uint32, 'checkpoint-te-flags')),
                            ('checkpoint_te_nexthop', YLeaf(YType.str, 'checkpoint-te-nexthop')),
                            ('checkpoint_te_metric', YLeaf(YType.int32, 'checkpoint-te-metric')),
                            ('checkpoint_te_metric_mode', YLeaf(YType.enumeration, 'checkpoint-te-metric-mode')),
                            ('checkpoint_te_bandwidth', YLeaf(YType.uint32, 'checkpoint-te-bandwidth')),
                            ('checkpoint_te_object_id', YLeaf(YType.uint32, 'checkpoint-te-object-id')),
                        ])
                        self.level = None
                        self.interface_name = None
                        self.checkpoint_te_level = None
                        self.checkpoint_te_system_id = None
                        self.checkpoint_te_interface = None
                        self.checkpoint_te_flags = None
                        self.checkpoint_te_nexthop = None
                        self.checkpoint_te_metric = None
                        self.checkpoint_te_metric_mode = None
                        self.checkpoint_te_bandwidth = None
                        self.checkpoint_te_object_id = None
                        self._segment_path = lambda: "checkpoint-te-tunnel"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Isis.Instances.Instance.CheckpointTeTunnels.CheckpointTeTunnel, ['level', 'interface_name', 'checkpoint_te_level', 'checkpoint_te_system_id', 'checkpoint_te_interface', 'checkpoint_te_flags', 'checkpoint_te_nexthop', 'checkpoint_te_metric', 'checkpoint_te_metric_mode', 'checkpoint_te_bandwidth', 'checkpoint_te_object_id'], name, value)

    def clone_ptr(self):
        self._top_entity = Isis()
        return self._top_entity

