""" Cisco_IOS_XR_lib_mpp_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR lib\-mpp package configuration.

This module contains definitions
for the following management objects\:
  control\-plane\: Configure control Plane

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError




class ControlPlane(object):
    """
    Configure control Plane
    
    .. attribute:: management_plane_protection
    
    	Configure management plane protection
    	**type**\:   :py:class:`ManagementPlaneProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection>`
    
    

    """

    _prefix = 'lib-mpp-cfg'
    _revision = '2015-07-30'

    def __init__(self):
        self.management_plane_protection = ControlPlane.ManagementPlaneProtection()
        self.management_plane_protection.parent = self


    class ManagementPlaneProtection(object):
        """
        Configure management plane protection
        
        .. attribute:: inband
        
        	Inband Configuration
        	**type**\:   :py:class:`Inband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband>`
        
        .. attribute:: outband
        
        	Outband Configuration
        	**type**\:   :py:class:`Outband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband>`
        
        

        """

        _prefix = 'lib-mpp-cfg'
        _revision = '2015-07-30'

        def __init__(self):
            self.parent = None
            self.inband = ControlPlane.ManagementPlaneProtection.Inband()
            self.inband.parent = self
            self.outband = ControlPlane.ManagementPlaneProtection.Outband()
            self.outband.parent = self


        class Outband(object):
            """
            Outband Configuration
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:   :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection>`
            
            .. attribute:: outband_vrf
            
            	Configure outband VRF
            	**type**\:  str
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.interface_selection = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection()
                self.interface_selection.parent = self
                self.outband_vrf = None


            class InterfaceSelection(object):
                """
                Configure interfaces
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:   :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces>`
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self.interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self


                class Interfaces(object):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Name of the Interface
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self


                        class HttpProtocol(object):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:http-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol']['meta_info']


                        class TftpProtocol(object):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol']['meta_info']


                        class NetconfProtocol(object):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol']['meta_info']


                        class XrXml(object):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:xr-xml'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml']['meta_info']


                        class SshProtocol(object):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol']['meta_info']


                        class SnmpProtocol(object):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol']['meta_info']


                        class TelnetProtocol(object):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol']['meta_info']


                        class AllProtocols(object):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:all-protocols'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols']['meta_info']

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:interfaces/Cisco-IOS-XR-lib-mpp-cfg:interface[Cisco-IOS-XR-lib-mpp-cfg:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.all_protocols is not None and self.all_protocols._has_data():
                                return True

                            if self.http_protocol is not None and self.http_protocol._has_data():
                                return True

                            if self.netconf_protocol is not None and self.netconf_protocol._has_data():
                                return True

                            if self.snmp_protocol is not None and self.snmp_protocol._has_data():
                                return True

                            if self.ssh_protocol is not None and self.ssh_protocol._has_data():
                                return True

                            if self.telnet_protocol is not None and self.telnet_protocol._has_data():
                                return True

                            if self.tftp_protocol is not None and self.tftp_protocol._has_data():
                                return True

                            if self.xr_xml is not None and self.xr_xml._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces']['meta_info']


                class AllInterfaces(object):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self


                    class HttpProtocol(object):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol']['meta_info']


                    class TftpProtocol(object):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol']['meta_info']


                    class NetconfProtocol(object):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol']['meta_info']


                    class XrXml(object):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml']['meta_info']


                    class SshProtocol(object):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol']['meta_info']


                    class SnmpProtocol(object):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol']['meta_info']


                    class TelnetProtocol(object):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol']['meta_info']


                    class AllProtocols(object):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.all_protocols is not None and self.all_protocols._has_data():
                            return True

                        if self.http_protocol is not None and self.http_protocol._has_data():
                            return True

                        if self.netconf_protocol is not None and self.netconf_protocol._has_data():
                            return True

                        if self.snmp_protocol is not None and self.snmp_protocol._has_data():
                            return True

                        if self.ssh_protocol is not None and self.ssh_protocol._has_data():
                            return True

                        if self.telnet_protocol is not None and self.telnet_protocol._has_data():
                            return True

                        if self.tftp_protocol is not None and self.tftp_protocol._has_data():
                            return True

                        if self.xr_xml is not None and self.xr_xml._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.all_interfaces is not None and self.all_interfaces._has_data():
                        return True

                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:outband'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_selection is not None and self.interface_selection._has_data():
                    return True

                if self.outband_vrf is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Outband']['meta_info']


        class Inband(object):
            """
            Inband Configuration
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:   :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection>`
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2015-07-30'

            def __init__(self):
                self.parent = None
                self.interface_selection = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection()
                self.interface_selection.parent = self


            class InterfaceSelection(object):
                """
                Configure interfaces
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:   :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces>`
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2015-07-30'

                def __init__(self):
                    self.parent = None
                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self.interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self


                class Interfaces(object):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Name of the Interface
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self


                        class HttpProtocol(object):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:http-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol']['meta_info']


                        class TftpProtocol(object):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol']['meta_info']


                        class NetconfProtocol(object):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol']['meta_info']


                        class XrXml(object):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:xr-xml'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml']['meta_info']


                        class SshProtocol(object):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol']['meta_info']


                        class SnmpProtocol(object):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol']['meta_info']


                        class TelnetProtocol(object):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol']['meta_info']


                        class AllProtocols(object):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self


                            class PeerClass(object):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_all = None
                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self


                                class PeerV4(object):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4']['meta_info']


                                class PeerV6(object):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self


                                    class Peers(object):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer = YList()
                                            self.peer.parent = self
                                            self.peer.name = 'peer'


                                        class Peer(object):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  <key>
                                            
                                            	prefix
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address is None:
                                                    raise YPYModelError('Key property address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer is not None:
                                                for child_ref in self.peer:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers']['meta_info']


                                    class PeerPrefixes(object):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.peer_prefix = YList()
                                            self.peer_prefix.parent = self
                                            self.peer_prefix.name = 'peer_prefix'


                                        class PeerPrefix(object):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  <key>
                                            
                                            	prefix/length
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2015-07-30'

                                            def __init__(self):
                                                self.parent = None
                                                self.address_prefix = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.address_prefix is None:
                                                    raise YPYModelError('Key property address_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address_prefix is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.peer_prefix is not None:
                                                for child_ref in self.peer_prefix:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                            return True

                                        if self.peers is not None and self.peers._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_all is not None:
                                        return True

                                    if self.peer_v4 is not None and self.peer_v4._has_data():
                                        return True

                                    if self.peer_v6 is not None and self.peer_v6._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-lib-mpp-cfg:all-protocols'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_class is not None and self.peer_class._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols']['meta_info']

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:interfaces/Cisco-IOS-XR-lib-mpp-cfg:interface[Cisco-IOS-XR-lib-mpp-cfg:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.all_protocols is not None and self.all_protocols._has_data():
                                return True

                            if self.http_protocol is not None and self.http_protocol._has_data():
                                return True

                            if self.netconf_protocol is not None and self.netconf_protocol._has_data():
                                return True

                            if self.snmp_protocol is not None and self.snmp_protocol._has_data():
                                return True

                            if self.ssh_protocol is not None and self.ssh_protocol._has_data():
                                return True

                            if self.telnet_protocol is not None and self.telnet_protocol._has_data():
                                return True

                            if self.tftp_protocol is not None and self.tftp_protocol._has_data():
                                return True

                            if self.xr_xml is not None and self.xr_xml._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces']['meta_info']


                class AllInterfaces(object):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:   :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:   :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:   :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:   :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:   :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:   :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:   :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:   :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2015-07-30'

                    def __init__(self):
                        self.parent = None
                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self


                    class HttpProtocol(object):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:http-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol']['meta_info']


                    class TftpProtocol(object):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:tftp-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol']['meta_info']


                    class NetconfProtocol(object):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:netconf-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol']['meta_info']


                    class XrXml(object):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:xr-xml'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml']['meta_info']


                    class SshProtocol(object):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:ssh-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol']['meta_info']


                    class SnmpProtocol(object):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:snmp-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol']['meta_info']


                    class TelnetProtocol(object):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:telnet-protocol'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol']['meta_info']


                    class AllProtocols(object):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:   :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2015-07-30'

                        def __init__(self):
                            self.parent = None
                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self


                        class PeerClass(object):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:   :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:   :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2015-07-30'

                            def __init__(self):
                                self.parent = None
                                self.peer_all = None
                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self


                            class PeerV4(object):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v4'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4']['meta_info']


                            class PeerV6(object):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:   :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2015-07-30'

                                def __init__(self):
                                    self.parent = None
                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self


                                class Peers(object):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer = YList()
                                        self.peer.parent = self
                                        self.peer.name = 'peer'


                                    class Peer(object):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  <key>
                                        
                                        	prefix
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address = None

                                        @property
                                        def _common_path(self):
                                            if self.address is None:
                                                raise YPYModelError('Key property address is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers/Cisco-IOS-XR-lib-mpp-cfg:peer[Cisco-IOS-XR-lib-mpp-cfg:address = ' + str(self.address) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer is not None:
                                            for child_ref in self.peer:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers']['meta_info']


                                class PeerPrefixes(object):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of    :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2015-07-30'

                                    def __init__(self):
                                        self.parent = None
                                        self.peer_prefix = YList()
                                        self.peer_prefix.parent = self
                                        self.peer_prefix.name = 'peer_prefix'


                                    class PeerPrefix(object):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  <key>
                                        
                                        	prefix/length
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        
                                        ----
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2015-07-30'

                                        def __init__(self):
                                            self.parent = None
                                            self.address_prefix = None

                                        @property
                                        def _common_path(self):
                                            if self.address_prefix is None:
                                                raise YPYModelError('Key property address_prefix is None')

                                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes/Cisco-IOS-XR-lib-mpp-cfg:peer-prefix[Cisco-IOS-XR-lib-mpp-cfg:address-prefix = ' + str(self.address_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.address_prefix is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix']['meta_info']

                                    @property
                                    def _common_path(self):

                                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6/Cisco-IOS-XR-lib-mpp-cfg:peer-prefixes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.peer_prefix is not None:
                                            for child_ref in self.peer_prefix:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes']['meta_info']

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class/Cisco-IOS-XR-lib-mpp-cfg:peer-v6'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer_prefixes is not None and self.peer_prefixes._has_data():
                                        return True

                                    if self.peers is not None and self.peers._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols/Cisco-IOS-XR-lib-mpp-cfg:peer-class'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.peer_all is not None:
                                    return True

                                if self.peer_v4 is not None and self.peer_v4._has_data():
                                    return True

                                if self.peer_v6 is not None and self.peer_v6._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces/Cisco-IOS-XR-lib-mpp-cfg:all-protocols'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.peer_class is not None and self.peer_class._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                            return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection/Cisco-IOS-XR-lib-mpp-cfg:all-interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.all_protocols is not None and self.all_protocols._has_data():
                            return True

                        if self.http_protocol is not None and self.http_protocol._has_data():
                            return True

                        if self.netconf_protocol is not None and self.netconf_protocol._has_data():
                            return True

                        if self.snmp_protocol is not None and self.snmp_protocol._has_data():
                            return True

                        if self.ssh_protocol is not None and self.ssh_protocol._has_data():
                            return True

                        if self.telnet_protocol is not None and self.telnet_protocol._has_data():
                            return True

                        if self.tftp_protocol is not None and self.tftp_protocol._has_data():
                            return True

                        if self.xr_xml is not None and self.xr_xml._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                        return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband/Cisco-IOS-XR-lib-mpp-cfg:interface-selection'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.all_interfaces is not None and self.all_interfaces._has_data():
                        return True

                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                    return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection/Cisco-IOS-XR-lib-mpp-cfg:inband'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_selection is not None and self.interface_selection._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
                return meta._meta_table['ControlPlane.ManagementPlaneProtection.Inband']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane/Cisco-IOS-XR-lib-mpp-cfg:management-plane-protection'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.inband is not None and self.inband._has_data():
                return True

            if self.outband is not None and self.outband._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
            return meta._meta_table['ControlPlane.ManagementPlaneProtection']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-lib-mpp-cfg:control-plane'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.management_plane_protection is not None and self.management_plane_protection._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_lib_mpp_cfg as meta
        return meta._meta_table['ControlPlane']['meta_info']


